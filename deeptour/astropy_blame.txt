ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
796bed9983 astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2017-01-13 16:39:34 +0000   2) 
20fb882635 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-28 15:27:56 -0400   3) from packaging.version import Version
796bed9983 astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2017-01-13 16:39:34 +0000   4) import pytest
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000   5) import numpy as np
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400   6) from numpy.testing import assert_allclose, assert_array_equal
796bed9983 astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2017-01-13 16:39:34 +0000   7) 
0c64572a2e astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2018-11-30 14:02:06 +0000   8) from astropy.tests.helper import assert_quantity_allclose
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400   9) from astropy.nddata import (extract_array, add_array, subpixel_indices,
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400  10)                             overlap_slices, NoOverlapError,
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400  11)                             PartialOverlapError, Cutout2D)
0c64572a2e astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2018-11-30 14:02:06 +0000  12) from astropy.wcs import WCS, Sip
0c64572a2e astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2018-11-30 14:02:06 +0000  13) from astropy.wcs.utils import proj_plane_pixel_area
0c64572a2e astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2018-11-30 14:02:06 +0000  14) from astropy.coordinates import SkyCoord
0c64572a2e astropy/nddata/tests/test_utils.py       (Thomas Robitaille   2018-11-30 14:02:06 +0000  15) from astropy import units as u
078c0af18f astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-04-13 08:37:37 -0400  16) 
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500  17) from astropy.nddata import CCDData
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500  18) 
078c0af18f astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-04-13 08:37:37 -0400  19) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  20) test_positions = [(10.52, 3.12), (5.62, 12.97), (31.33, 31.77),
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  21)                   (0.46, 0.94), (20.45, 12.12), (42.24, 24.42)]
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  22) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  23) test_position_indices = [(0, 3), (0, 2), (4, 1),
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  24)                          (4, 2), (4, 3), (3, 4)]
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  25) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  26) test_slices = [slice(10.52, 3.12), slice(5.62, 12.97),
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  27)                slice(31.33, 31.77), slice(0.46, 0.94),
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  28)                slice(20.45, 12.12), slice(42.24, 24.42)]
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  29) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  30) subsampling = 5
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000  31) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  32) test_pos_bad = [(-1, -4), (-2, 0), (6, 2), (6, 6)]
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400  33) test_nonfinite_positions = [(np.nan, np.nan), (np.inf, np.inf), (1, np.nan),
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400  34)                             (np.nan, 2), (2, -np.inf), (-np.inf, 3)]
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  35) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  36) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  37) def test_slices_different_dim():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  38)     '''Overlap from arrays with different number of dim is undefined.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  39)     with pytest.raises(ValueError) as e:
68e7352080 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:50:26 -0400  40)         overlap_slices((4, 5, 6), (1, 2), (0, 0))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  41)     assert "the same number of dimensions" in str(e.value)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  42) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  43) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  44) def test_slices_pos_different_dim():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  45)     '''Position must have same dim as arrays.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  46)     with pytest.raises(ValueError) as e:
68e7352080 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:50:26 -0400  47)         overlap_slices((4, 5), (1, 2), (0, 0, 3))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  48)     assert "the same number of dimensions" in str(e.value)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  49) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  50) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  51) @pytest.mark.parametrize('pos', test_pos_bad)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  52) def test_slices_no_overlap(pos):
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  53)     '''If there is no overlap between arrays, an error should be raised.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  54)     with pytest.raises(NoOverlapError):
68e7352080 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:50:26 -0400  55)         overlap_slices((5, 5), (2, 2), pos)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  56) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  57) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  58) def test_slices_partial_overlap():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  59)     '''Compute a slice for partially overlapping arrays.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  60)     temp = overlap_slices((5,), (3,), (0,))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  61)     assert temp == ((slice(0, 2, None),), (slice(1, 3, None),))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  62) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  63)     temp = overlap_slices((5,), (3,), (0,), mode='partial')
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  64)     assert temp == ((slice(0, 2, None),), (slice(1, 3, None),))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  65) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  66)     for pos in [0, 4]:
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  67)         with pytest.raises(PartialOverlapError) as e:
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  68)             temp = overlap_slices((5,), (3,), (pos,), mode='strict')
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  69)         assert 'Arrays overlap only partially.' in str(e.value)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  70) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400  71) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  72) def test_slices_edges():
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  73)     """
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  74)     Test overlap_slices when extracting along edges.
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  75)     """
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  76) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  77)     slc_lg, slc_sm = overlap_slices((10, 10), (3, 3), (1, 1), mode='strict')
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  78)     assert slc_lg[0].start == slc_lg[1].start == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  79)     assert slc_lg[0].stop == slc_lg[1].stop == 3
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  80)     assert slc_sm[0].start == slc_sm[1].start == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  81)     assert slc_sm[0].stop == slc_sm[1].stop == 3
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  82) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  83)     slc_lg, slc_sm = overlap_slices((10, 10), (3, 3), (8, 8), mode='strict')
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  84)     assert slc_lg[0].start == slc_lg[1].start == 7
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  85)     assert slc_lg[0].stop == slc_lg[1].stop == 10
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  86)     assert slc_sm[0].start == slc_sm[1].start == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  87)     assert slc_sm[0].stop == slc_sm[1].stop == 3
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  88) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  89)     # test (0, 0) shape
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  90)     slc_lg, slc_sm = overlap_slices((10, 10), (0, 0), (0, 0))
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  91)     assert slc_lg[0].start == slc_lg[0].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  92)     assert slc_lg[1].start == slc_lg[1].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  93)     assert slc_sm[0].start == slc_sm[0].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  94)     assert slc_sm[1].start == slc_sm[1].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  95) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  96)     slc_lg, slc_sm = overlap_slices((10, 10), (0, 0), (5, 5))
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  97)     assert slc_lg[0].start == slc_lg[0].stop == 5
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  98)     assert slc_lg[1].start == slc_lg[1].stop == 5
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400  99)     assert slc_sm[0].start == slc_sm[0].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400 100)     assert slc_sm[1].start == slc_sm[1].stop == 0
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400 101) 
6bc9ae3968 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-06-21 14:58:54 -0400 102) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 103) def test_slices_overlap_wrong_mode():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 104)     '''Call overlap_slices with non-existing mode.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 105)     with pytest.raises(ValueError) as e:
68e7352080 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:50:26 -0400 106)         overlap_slices((5,), (3,), (0,), mode='full')
3603983aab astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-05-15 15:36:51 -0400 107)     assert "Mode can be only" in str(e.value)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 108) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 109) 
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 110) @pytest.mark.parametrize('position', test_nonfinite_positions)
a27f6680db astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-04-27 13:10:13 -0400 111) def test_slices_nonfinite_position(position):
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 112)     """
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 113)     A ValueError should be raised if position contains a non-finite
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 114)     value.
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 115)     """
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 116) 
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 117)     with pytest.raises(ValueError):
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 118)         overlap_slices((7, 7), (3, 3), position)
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 119) 
0aa3d746f6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2019-11-21 11:42:45 -0500 120) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 121) def test_extract_array_even_shape_rounding():
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 122)     """
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 123)     Test overlap_slices (via extract_array) for rounding with an
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 124)     even-shaped extraction.
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 125)     """
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 126) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 127)     data = np.arange(10)
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 128)     shape = (2,)
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 129)     positions_expected = [(1.49, (1, 2)), (1.5, (1, 2)), (1.501, (1, 2)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 130)                           (1.99, (1, 2)), (2.0, (1, 2)), (2.01, (2, 3)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 131)                           (2.49, (2, 3)), (2.5, (2, 3)), (2.501, (2, 3)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 132)                           (2.99, (2, 3)), (3.0, (2, 3)), (3.01, (3, 4))]
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 133) 
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 134)     for pos, exp in positions_expected:
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 135)         out = extract_array(data, shape, (pos, ), mode='partial')
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 136)         assert_array_equal(out, exp)
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 137) 
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 138)     # test negative positions
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 139)     positions = (-0.99, -0.51, -0.5, -0.49, -0.01, 0)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 140)     exp1 = (-99, 0)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 141)     exp2 = (0, 1)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 142)     expected = [exp1, ] * 6 + [exp2, ]
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 143) 
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 144)     for pos, exp in zip(positions, expected):
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 145)         out = extract_array(data, shape, (pos, ), mode='partial',
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 146)                             fill_value=-99)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 147)         assert_array_equal(out, exp)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 148) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 149) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 150) def test_extract_array_odd_shape_rounding():
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 151)     """
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 152)     Test overlap_slices (via extract_array) for rounding with an
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 153)     even-shaped extraction.
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 154)     """
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 155) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 156)     data = np.arange(10)
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 157)     shape = (3,)
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 158)     positions_expected = [(1.49, (0, 1, 2)), (1.5, (0, 1, 2)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 159)                           (1.501, (1, 2, 3)), (1.99, (1, 2, 3)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 160)                           (2.0, (1, 2, 3)), (2.01, (1, 2, 3)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 161)                           (2.49, (1, 2, 3)), (2.5, (1, 2, 3)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 162)                           (2.501, (2, 3, 4)), (2.99, (2, 3, 4)),
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 163)                           (3.0, (2, 3, 4)), (3.01, (2, 3, 4))]
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 164) 
7ebf05e9ae astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-19 15:10:34 -0400 165)     for pos, exp in positions_expected:
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 166)         out = extract_array(data, shape, (pos, ), mode='partial')
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 167)         assert_array_equal(out, exp)
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 168) 
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 169)     # test negative positions
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 170)     positions = (-0.99, -0.51, -0.5, -0.49, -0.01, 0)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 171)     exp1 = (-99, -99, 0)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 172)     exp2 = (-99, 0, 1)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 173)     expected = [exp1, ] * 3 + [exp2, ] * 4
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 174) 
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 175)     for pos, exp in zip(positions, expected):
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 176)         out = extract_array(data, shape, (pos, ), mode='partial',
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 177)                             fill_value=-99)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 178)         assert_array_equal(out, exp)
81eb6b3f25 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:42:35 -0400 179) 
e4b50c198d astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-09-19 16:15:13 -0400 180) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 181) def test_extract_array_wrong_mode():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 182)     '''Call extract_array with non-existing mode.'''
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 183)     with pytest.raises(ValueError) as e:
68e7352080 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:50:26 -0400 184)         extract_array(np.arange(4), (2, ), (0, ), mode='full')
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 185)     assert "Valid modes are 'partial', 'trim', and 'strict'." == str(e.value)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 186) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 187) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 188) def test_extract_array_1d_even():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 189)     '''Extract 1 d arrays.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 190) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 191)     All dimensions are treated the same, so we can test in 1 dim.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 192)     '''
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 193)     assert np.all(extract_array(np.arange(4), (2, ), (0, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 194)                                 fill_value=-99) == np.array([-99, 0]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 195)     for i in [1, 2, 3]:
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 196)         assert np.all(extract_array(np.arange(4), (2, ), (i, )) ==
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 197)                       np.array([i - 1, i]))
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 198)     assert np.all(extract_array(np.arange(4.), (2, ), (4, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 199)                                 fill_value=np.inf) == np.array([3, np.inf]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 200) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 201) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 202) def test_extract_array_1d_odd():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 203)     '''Extract 1 d arrays.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 204) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 205)     All dimensions are treated the same, so we can test in 1 dim.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 206)     The first few lines test the most error-prone part: Extraction of an
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 207)     array on the boundaries.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 208)     Additional tests (e.g. dtype of return array) are done for the last
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 209)     case only.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 210)     '''
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 211)     assert np.all(extract_array(np.arange(4), (3,), (-1, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 212)                                 fill_value=-99) == np.array([-99, -99, 0]))
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 213)     assert np.all(extract_array(np.arange(4), (3,), (0, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 214)                                 fill_value=-99) == np.array([-99, 0, 1]))
793f81a776 astropy/nddata/tests/test_utils.py       (Brigitta Sipőcz     2017-06-19 20:45:04 +0100 215)     for i in [1, 2]:
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 216)         assert np.all(extract_array(np.arange(4), (3,), (i, )) ==
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 217)                       np.array([i-1, i, i+1]))
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 218)     assert np.all(extract_array(np.arange(4), (3,), (3, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 219)                                 fill_value=-99) == np.array([2, 3, -99]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 220)     arrayin = np.arange(4.)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 221)     extracted = extract_array(arrayin, (3,), (4, ))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 222)     assert extracted[0] == 3
793f81a776 astropy/nddata/tests/test_utils.py       (Brigitta Sipőcz     2017-06-19 20:45:04 +0100 223)     assert np.isnan(extracted[1])  # since I cannot use `==` to test for nan
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 224)     assert extracted.dtype == arrayin.dtype
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 225) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 226) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 227) def test_extract_array_1d():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 228)     """In 1d, shape can be int instead of tuple"""
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 229)     assert np.all(extract_array(np.arange(4), 3, (-1, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 230)                                 fill_value=-99) == np.array([-99, -99, 0]))
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 231)     assert np.all(extract_array(np.arange(4), 3, -1,
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 232)                                 fill_value=-99) == np.array([-99, -99, 0]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 233) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 234) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 235) def test_extract_Array_float():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 236)     """integer is at bin center"""
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 237)     for a in np.arange(2.51, 3.49, 0.1):
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 238)         assert np.all(extract_array(np.arange(5), 3, a) ==
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 239)                       np.array([2, 3, 4]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 240) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 241) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 242) def test_extract_array_1d_trim():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 243)     '''Extract 1 d arrays.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 244) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 245)     All dimensions are treated the same, so we can test in 1 dim.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 246)     '''
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 247)     assert np.all(extract_array(np.arange(4), (2, ), (0, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 248)                                 mode='trim') == np.array([0]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 249)     for i in [1, 2, 3]:
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 250)         assert np.all(extract_array(np.arange(4), (2, ), (i, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 251)                                     mode='trim') == np.array([i - 1, i]))
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 252)     assert np.all(extract_array(np.arange(4.), (2, ), (4, ),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 253)                                 mode='trim') == np.array([3]))
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 254) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 255) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 256) @pytest.mark.parametrize('mode', ['partial', 'trim', 'strict'])
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 257) def test_extract_array_easy(mode):
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 258)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 259)     Test extract_array utility function.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 260) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 261)     Test by extracting an array of ones out of an array of zeros.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 262)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 263)     large_test_array = np.zeros((11, 11))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 264)     small_test_array = np.ones((5, 5))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 265)     large_test_array[3:8, 3:8] = small_test_array
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 266)     extracted_array = extract_array(large_test_array, (5, 5), (5, 5),
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 267)                                     mode=mode)
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 268)     assert np.all(extracted_array == small_test_array)
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 269) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 270) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 271) def test_extract_array_return_pos():
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 272)     '''Check that the return position is calculated correctly.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 273) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 274)     The result will differ by mode. All test here are done in 1d because it's
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 275)     easier to construct correct test cases.
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 276)     '''
06bc04e9cd astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-27 23:46:59 -0400 277)     large_test_array = np.arange(5, dtype=float)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 278)     for i in np.arange(-1, 6):
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 279)         extracted, new_pos = extract_array(large_test_array, 3, i,
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 280)                                            mode='partial',
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 281)                                            return_position=True)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 282)         assert new_pos == (1, )
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 283)     # Now check an array with an even number
fb7b38337f astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 00:04:32 -0400 284)     for i, expected in zip([1.49, 1.51, 3], [0.49, 0.51, 1]):
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 285)         extracted, new_pos = extract_array(large_test_array, (2,), (i,),
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 286)                                            mode='strict', return_position=True)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 287)         assert new_pos == (expected, )
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 288)     # For mode='trim' the answer actually depends
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 289)     for i, expected in zip(np.arange(-1, 6), (-1, 0, 1, 1, 1, 1, 1)):
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 290)         extracted, new_pos = extract_array(large_test_array, (3,), (i,),
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 291)                                            mode='trim', return_position=True)
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 292)         assert new_pos == (expected, )
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 293) 
3adf8c7ccb astropy/nddata/tests/test_utils.py       (Hans Moritz Günther 2015-04-25 22:18:04 -0400 294) 
28ee4ebd00 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-24 13:45:56 -0400 295) def test_extract_array_nan_fillvalue():
20fb882635 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-28 15:27:56 -0400 296)     if Version(np.__version__) >= Version('1.20'):
06bc04e9cd astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-27 23:46:59 -0400 297)         msg = 'fill_value cannot be set to np.nan if the input array has'
06bc04e9cd astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-27 23:46:59 -0400 298)         with pytest.raises(ValueError, match=msg):
28ee4ebd00 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-24 13:45:56 -0400 299)             extract_array(np.ones((10, 10), dtype=int), (5, 5), (1, 1),
28ee4ebd00 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-24 13:45:56 -0400 300)                           fill_value=np.nan)
28ee4ebd00 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-24 13:45:56 -0400 301) 
28ee4ebd00 astropy/nddata/tests/test_utils.py       (Larry Bradley       2020-07-24 13:45:56 -0400 302) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 303) def test_add_array_odd_shape():
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 304)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 305)     Test add_array utility function.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 306) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 307)     Test by adding an array of ones out of an array of zeros.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 308)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 309)     large_test_array = np.zeros((11, 11))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 310)     small_test_array = np.ones((5, 5))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 311)     large_test_array_ref = large_test_array.copy()
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 312)     large_test_array_ref[3:8, 3:8] += small_test_array
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 313) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 314)     added_array = add_array(large_test_array, small_test_array, (5, 5))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 315)     assert np.all(added_array == large_test_array_ref)
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 316) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 317) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 318) def test_add_array_even_shape():
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 319)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 320)     Test add_array_2D utility function.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 321) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 322)     Test by adding an array of ones out of an array of zeros.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 323)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 324)     large_test_array = np.zeros((11, 11))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 325)     small_test_array = np.ones((4, 4))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 326)     large_test_array_ref = large_test_array.copy()
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 327)     large_test_array_ref[0:2, 0:2] += small_test_array[2:4, 2:4]
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 328) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 329)     added_array = add_array(large_test_array, small_test_array, (0, 0))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 330)     assert np.all(added_array == large_test_array_ref)
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 331) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 332) 
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 333) def test_add_array_equal_shape():
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 334)     """
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 335)     Test add_array_2D utility function.
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 336) 
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 337)     Test by adding an array of ones out of an array of zeros.
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 338)     """
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 339)     large_test_array = np.zeros((11, 11))
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 340)     small_test_array = np.ones((11, 11))
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 341)     large_test_array_ref = large_test_array.copy()
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 342)     large_test_array_ref += small_test_array
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 343) 
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 344)     added_array = add_array(large_test_array, small_test_array, (5, 5))
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 345)     assert np.all(added_array == large_test_array_ref)
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 346) 
eac46178e4 astropy/nddata/tests/test_utils.py       (Tom J Wilson        2019-08-12 15:10:48 -0400 347) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 348) @pytest.mark.parametrize(('position', 'subpixel_index'),
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 349)                          zip(test_positions, test_position_indices))
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 350) def test_subpixel_indices(position, subpixel_index):
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 351)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 352)     Test subpixel_indices utility function.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 353) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 354)     Test by asserting that the function returns correct results for
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 355)     given test values.
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 356)     """
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille   2014-12-18 13:09:51 +0000 357)     assert np.all(subpixel_indices(position, subsampling) == subpixel_index)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-04-10 16:04:24 -0400 358) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-04-10 16:04:24 -0400 359) 
928fe68418 astropy/nddata/tests/test_utils.py       (Simon Conseil       2017-09-22 00:08:49 +0200 360) class TestCutout2D:
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 361)     def setup_class(self):
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 362)         self.data = np.arange(20.).reshape(5, 4)
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 363)         self.position = SkyCoord('13h11m29.96s -01d19m18.7s', frame='icrs')
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 364)         wcs = WCS(naxis=2)
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 365)         rho = np.pi / 3.
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 366)         scale = 0.05 / 3600.
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 367)         wcs.wcs.cd = [[scale*np.cos(rho), -scale*np.sin(rho)],
b1290b4e58 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:17:35 -0400 368)                       [scale*np.sin(rho), scale*np.cos(rho)]]
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 369)         wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']
a64f411d19 astropy/nddata/tests/test_utils.py       (Marten van Kerkwijk 2017-05-30 11:51:38 -0400 370)         wcs.wcs.crval = [self.position.ra.to_value(u.deg),
a64f411d19 astropy/nddata/tests/test_utils.py       (Marten van Kerkwijk 2017-05-30 11:51:38 -0400 371)                          self.position.dec.to_value(u.deg)]
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 372)         wcs.wcs.crpix = [3, 3]
9367af76b4 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-11 11:48:11 -0500 373)         self.wcs = wcs
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 374) 
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 375)         # add SIP
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 376)         sipwcs = wcs.deepcopy()
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 377)         sipwcs.wcs.ctype = ['RA---TAN-SIP', 'DEC--TAN-SIP']
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 378)         a = np.array(
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 379)             [[0, 0, 5.33092692e-08, 3.73753773e-11, -2.02111473e-13],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 380)              [0, 2.44084308e-05, 2.81394789e-11, 5.17856895e-13, 0.0],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 381)              [-2.41334657e-07, 1.29289255e-10, 2.35753629e-14, 0.0, 0.0],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 382)              [-2.37162007e-10, 5.43714947e-13, 0.0, 0.0, 0.0],
e418bd2175 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-02 10:25:26 -0400 383)              [-2.81029767e-13, 0.0, 0.0, 0.0, 0.0]]
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 384)         )
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 385)         b = np.array(
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 386)             [[0, 0, 2.99270374e-05, -2.38136074e-10, 7.23205168e-13],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 387)              [0, -1.71073858e-07, 6.31243431e-11, -5.16744347e-14, 0.0],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 388)              [6.95458963e-06, -3.08278961e-10, -1.75800917e-13, 0.0, 0.0],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 389)              [3.51974159e-11, 5.60993016e-14, 0.0, 0.0, 0.0],
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 390)              [-5.92438525e-13, 0.0, 0.0, 0.0, 0.0]]
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 391)         )
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 392)         sipwcs.sip = Sip(a, b, None, None, wcs.wcs.crpix)
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 393)         sipwcs.wcs.set()
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 394)         self.sipwcs = sipwcs
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 395) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 396)     def test_cutout(self):
8c45ac757b astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:49:00 -0400 397)         sizes = [3, 3*u.pixel, (3, 3), (3*u.pixel, 3*u.pix), (3., 3*u.pixel),
8c45ac757b astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:49:00 -0400 398)                  (2.9, 3.3)]
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 399)         for size in sizes:
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 400)             position = (2.1, 1.9)
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 401)             c = Cutout2D(self.data, position, size)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 402)             assert c.data.shape == (3, 3)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 403)             assert c.data[1, 1] == 10
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 404)             assert c.origin_original == (1, 1)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 405)             assert c.origin_cutout == (0, 0)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 406)             assert c.input_position_original == position
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 407)             assert_allclose(c.input_position_cutout, (1.1, 0.9))
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 408)             assert c.position_original == (2., 2.)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 409)             assert c.position_cutout == (1., 1.)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 410)             assert c.center_original == (2., 2.)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 411)             assert c.center_cutout == (1., 1.)
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 412)             assert c.bbox_original == ((1, 3), (1, 3))
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 413)             assert c.bbox_cutout == ((0, 2), (0, 2))
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 414)             assert c.slices_original == (slice(1, 4), slice(1, 4))
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 415)             assert c.slices_cutout == (slice(0, 3), slice(0, 3))
78fa1b6e09 astropy/nddata/tests/test_utils.py       (Joseph Jon Booker   2015-08-12 15:42:51 -0400 416) 
e427747893 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:17:03 -0400 417)     def test_size_length(self):
e427747893 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:17:03 -0400 418)         with pytest.raises(ValueError):
e427747893 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:17:03 -0400 419)             Cutout2D(self.data, (2, 2), (1, 1, 1))
e427747893 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:17:03 -0400 420) 
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 421)     def test_size_units(self):
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 422)         for size in [3 * u.cm, (3, 3 * u.K)]:
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 423)             with pytest.raises(ValueError):
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 424)                 Cutout2D(self.data, (2, 2), size)
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 425) 
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 426)     def test_size_pixel(self):
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 427)         """
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 428)         Check size in derived pixel units.
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 429)         """
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 430)         size = 0.3*u.arcsec / (0.1*u.arcsec/u.pixel)
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 431)         c = Cutout2D(self.data, (2, 2), size)
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 432)         assert c.data.shape == (3, 3)
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 433)         assert c.data[0, 0] == 5
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 434)         assert c.slices_original == (slice(1, 4), slice(1, 4))
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 435)         assert c.slices_cutout == (slice(0, 3), slice(0, 3))
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 436) 
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 437)     def test_size_angle(self):
41907e36ad astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-10-02 18:48:08 -0400 438)         c = Cutout2D(self.data, (2, 2), (0.1*u.arcsec), wcs=self.wcs)
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 439)         assert c.data.shape == (2, 2)
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 440)         assert c.data[0, 0] == 5
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 441)         assert c.slices_original == (slice(1, 3), slice(1, 3))
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 442)         assert c.slices_cutout == (slice(0, 2), slice(0, 2))
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 443) 
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 444)     def test_size_angle_without_wcs(self):
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 445)         with pytest.raises(ValueError):
793f81a776 astropy/nddata/tests/test_utils.py       (Brigitta Sipőcz     2017-06-19 20:45:04 +0100 446)             Cutout2D(self.data, (2, 2), (3, 3 * u.arcsec))
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 447) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 448)     def test_cutout_trim_overlap(self):
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 449)         c = Cutout2D(self.data, (0, 0), (3, 3), mode='trim')
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 450)         assert c.data.shape == (2, 2)
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 451)         assert c.data[0, 0] == 0
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 452)         assert c.slices_original == (slice(0, 2), slice(0, 2))
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 453)         assert c.slices_cutout == (slice(0, 2), slice(0, 2))
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 454) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 455)     def test_cutout_partial_overlap(self):
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 456)         c = Cutout2D(self.data, (0, 0), (3, 3), mode='partial')
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 457)         assert c.data.shape == (3, 3)
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 458)         assert c.data[1, 1] == 0
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 459)         assert c.slices_original == (slice(0, 2), slice(0, 2))
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 460)         assert c.slices_cutout == (slice(1, 3), slice(1, 3))
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 461) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 462)     def test_cutout_partial_overlap_fill_value(self):
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 463)         fill_value = -99
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 464)         c = Cutout2D(self.data, (0, 0), (3, 3), mode='partial',
b1290b4e58 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:17:35 -0400 465)                      fill_value=fill_value)
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 466)         assert c.data.shape == (3, 3)
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 467)         assert c.data[1, 1] == 0
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 468)         assert c.data[0, 0] == fill_value
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 469) 
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 470)     def test_copy(self):
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 471)         data = np.copy(self.data)
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 472)         c = Cutout2D(data, (2, 3), (3, 3))
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 473)         xy = (0, 0)
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 474)         value = 100.
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 475)         c.data[xy] = value
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 476)         xy_orig = c.to_original_position(xy)
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 477)         yx = xy_orig[::-1]
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 478)         assert data[yx] == value
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 479) 
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 480)         data = np.copy(self.data)
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 481)         c2 = Cutout2D(self.data, (2, 3), (3, 3), copy=True)
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 482)         c2.data[xy] = value
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 483)         assert data[yx] != value
5afb815ae3 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 16:14:17 -0400 484) 
5447f5d778 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 00:00:59 -0400 485)     def test_to_from_large(self):
5447f5d778 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 00:00:59 -0400 486)         position = (2, 2)
714c2b5ce6 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-09-23 17:13:21 -0400 487)         c = Cutout2D(self.data, position, (3, 3))
5447f5d778 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 00:00:59 -0400 488)         xy = (0, 0)
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 489)         result = c.to_cutout_position(c.to_original_position(xy))
5447f5d778 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 00:00:59 -0400 490)         assert_allclose(result, xy)
5447f5d778 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 00:00:59 -0400 491) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 492)     def test_skycoord_without_wcs(self):
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 493)         with pytest.raises(ValueError):
8fecfd0957 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-20 16:46:03 -0400 494)             Cutout2D(self.data, self.position, (3, 3))
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 495) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 496)     def test_skycoord(self):
8fecfd0957 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-20 16:46:03 -0400 497)         c = Cutout2D(self.data, self.position, (3, 3), wcs=self.wcs)
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 498)         skycoord_original = self.position.from_pixel(c.center_original[1],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 499)                                                      c.center_original[0],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 500)                                                      self.wcs)
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 501)         skycoord_cutout = self.position.from_pixel(c.center_cutout[1],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 502)                                                    c.center_cutout[0], c.wcs)
8be6ab95b9 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-24 11:58:05 -0400 503)         assert_quantity_allclose(skycoord_original.ra, skycoord_cutout.ra)
8be6ab95b9 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-24 11:58:05 -0400 504)         assert_quantity_allclose(skycoord_original.dec, skycoord_cutout.dec)
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 505) 
cbf7187024 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-06-08 16:48:39 -0400 506)     def test_skycoord_partial(self):
8fecfd0957 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-20 16:46:03 -0400 507)         c = Cutout2D(self.data, self.position, (3, 3), wcs=self.wcs,
b1290b4e58 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:17:35 -0400 508)                      mode='partial')
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 509)         skycoord_original = self.position.from_pixel(c.center_original[1],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 510)                                                      c.center_original[0],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 511)                                                      self.wcs)
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 512)         skycoord_cutout = self.position.from_pixel(c.center_cutout[1],
d120555f98 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-21 15:00:10 -0400 513)                                                    c.center_cutout[0], c.wcs)
8be6ab95b9 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-24 11:58:05 -0400 514)         assert_quantity_allclose(skycoord_original.ra, skycoord_cutout.ra)
8be6ab95b9 astropy/nddata/tests/test_utils.py       (Larry Bradley       2015-07-24 11:58:05 -0400 515)         assert_quantity_allclose(skycoord_original.dec, skycoord_cutout.dec)
631d6580fe astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:16:48 -0400 516) 
631d6580fe astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:16:48 -0400 517)     def test_naxis_update(self):
631d6580fe astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:16:48 -0400 518)         xsize = 2
631d6580fe astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:16:48 -0400 519)         ysize = 3
631d6580fe astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-06-08 12:16:48 -0400 520)         c = Cutout2D(self.data, self.position, (ysize, xsize), wcs=self.wcs)
8883629f72 astropy/nddata/tests/test_utils.py       (Larry Bradley       2018-10-26 09:16:29 -0400 521)         assert c.wcs.array_shape == (ysize, xsize)
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 522) 
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 523)     def test_crpix_maps_to_crval(self):
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 524)         w = Cutout2D(self.data, (0, 0), (3, 3), wcs=self.sipwcs,
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 525)                      mode='partial').wcs
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 526)         pscale = np.sqrt(proj_plane_pixel_area(w))
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 527)         assert_allclose(
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 528)             w.wcs_pix2world(*w.wcs.crpix, 1), w.wcs.crval,
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 529)             rtol=0.0, atol=1e-6 * pscale
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 530)         )
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 531)         assert_allclose(
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 532)             w.all_pix2world(*w.wcs.crpix, 1), w.wcs.crval,
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 533)             rtol=0.0, atol=1e-6 * pscale
e92b36dbaa astropy/nddata/tests/test_utils.py       (Mihai Cara          2018-06-11 12:38:50 -0400 534)         )
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 535) 
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 536)     def test_cutout_with_nddata_as_input(self):
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 537)         # This is essentially a copy/paste of test_skycoord with the
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 538)         # input a ccd with wcs attribute instead of passing the
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 539)         # wcs separately.
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 540)         ccd = CCDData(data=self.data, wcs=self.wcs, unit='adu')
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 541)         c = Cutout2D(ccd, self.position, (3, 3))
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 542)         skycoord_original = self.position.from_pixel(c.center_original[1],
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 543)                                                      c.center_original[0],
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 544)                                                      self.wcs)
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 545)         skycoord_cutout = self.position.from_pixel(c.center_cutout[1],
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 546)                                                    c.center_cutout[0], c.wcs)
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 547)         assert_quantity_allclose(skycoord_original.ra, skycoord_cutout.ra)
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig       2019-10-27 16:08:57 -0500 548)         assert_quantity_allclose(skycoord_original.dec, skycoord_cutout.dec)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200   2) 
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200   3) import inspect
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200   4) 
70ee9e164c astropy/nddata/tests/test_decorators.py (Brigitta Sipőcz   2017-10-13 12:30:56 +0100   5) import pytest
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200   6) import numpy as np
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200   7) 
0c64572a2e astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2018-11-30 14:02:06 +0000   8) from astropy.utils.exceptions import AstropyUserWarning
0c64572a2e astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2018-11-30 14:02:06 +0000   9) from astropy import units as u
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200  10) from astropy.wcs import WCS
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  11) 
0c64572a2e astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2018-11-30 14:02:06 +0000  12) from astropy.nddata.nddata import NDData
0c64572a2e astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2018-11-30 14:02:06 +0000  13) from astropy.nddata.decorators import support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  14) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  15) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100  16) class CCDData(NDData):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100  17)     pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100  18) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100  19) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000  20) @support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  21) def wrapped_function_1(data, wcs=None, unit=None):
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  22)     return data, wcs, unit
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  23) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  24) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  25) def test_pass_numpy():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  26) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  27)     data_in = np.array([1, 2, 3])
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  28)     data_out, wcs_out, unit_out = wrapped_function_1(data=data_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  29) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  30)     assert data_out is data_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  31)     assert wcs_out is None
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  32)     assert unit_out is None
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  33) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  34) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  35) def test_pass_all_separate():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  36) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  37)     data_in = np.array([1, 2, 3])
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200  38)     wcs_in = WCS(naxis=1)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  39)     unit_in = u.Jy
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  40) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  41)     data_out, wcs_out, unit_out = wrapped_function_1(data=data_in, wcs=wcs_in, unit=unit_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  42) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  43)     assert data_out is data_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  44)     assert wcs_out is wcs_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  45)     assert unit_out is unit_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  46) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  47) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  48) def test_pass_nddata():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  49) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  50)     data_in = np.array([1, 2, 3])
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200  51)     wcs_in = WCS(naxis=1)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  52)     unit_in = u.Jy
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  53) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  54)     nddata_in = NDData(data_in, wcs=wcs_in, unit=unit_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  55) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  56)     data_out, wcs_out, unit_out = wrapped_function_1(nddata_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  57) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  58)     assert data_out is data_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  59)     assert wcs_out is wcs_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  60)     assert unit_out is unit_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  61) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  62) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  63) def test_pass_nddata_and_explicit():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  64) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  65)     data_in = np.array([1, 2, 3])
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200  66)     wcs_in = WCS(naxis=1)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  67)     unit_in = u.Jy
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  68)     unit_in_alt = u.mJy
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  69) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  70)     nddata_in = NDData(data_in, wcs=wcs_in, unit=unit_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  71) 
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  72)     with pytest.warns(AstropyUserWarning, match="Property unit has been passed explicitly and as "
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  73)                       "an NDData property, using explicitly specified value") as w:
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  74)         data_out, wcs_out, unit_out = wrapped_function_1(nddata_in, unit=unit_in_alt)
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  75)     assert len(w) == 1
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  76) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  77)     assert data_out is data_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  78)     assert wcs_out is wcs_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  79)     assert unit_out is unit_in_alt
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  80) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  81) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  82) def test_pass_nddata_ignored():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  83) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  84)     data_in = np.array([1, 2, 3])
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200  85)     wcs_in = WCS(naxis=1)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  86)     unit_in = u.Jy
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  87) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  88)     nddata_in = NDData(data_in, wcs=wcs_in, unit=unit_in, mask=[0, 1, 0])
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  89) 
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  90)     with pytest.warns(AstropyUserWarning, match="The following attributes were set on the data "
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  91)                       "object, but will be ignored by the function: mask") as w:
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  92)         data_out, wcs_out, unit_out = wrapped_function_1(nddata_in)
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400  93)     assert len(w) == 1
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  94) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  95)     assert data_out is data_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  96)     assert wcs_out is wcs_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  97)     assert unit_out is unit_in
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  98) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200  99) 
74af0c9c84 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 14:51:53 +0000 100) def test_incorrect_first_argument():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 101) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 102)     with pytest.raises(ValueError) as exc:
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 103)         @support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 104)         def wrapped_function_2(something, wcs=None, unit=None):
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 105)             pass
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 106)     assert exc.value.args[0] == "Can only wrap functions whose first positional argument is `data`"
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 107) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 108)     with pytest.raises(ValueError) as exc:
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 109)         @support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 110)         def wrapped_function_3(something, data, wcs=None, unit=None):
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 111)             pass
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 112)     assert exc.value.args[0] == "Can only wrap functions whose first positional argument is `data`"
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 113) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 114)     with pytest.raises(ValueError) as exc:
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 115)         @support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 116)         def wrapped_function_4(wcs=None, unit=None):
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 117)             pass
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 118)     assert exc.value.args[0] == "Can only wrap functions whose first positional argument is `data`"
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 119) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 120) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 121) def test_wrap_function_no_kwargs():
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 122) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 123)     @support_nddata
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 124)     def wrapped_function_5(data, other_data):
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 125)         return data
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 126) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 127)     data_in = np.array([1, 2, 3])
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 128)     nddata_in = NDData(data_in)
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 129) 
20a528de12 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:13:18 +0200 130)     assert wrapped_function_5(nddata_in, [1, 2, 3]) is data_in
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 131) 
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 132) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 133) def test_wrap_function_repack_valid():
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 134) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 135)     @support_nddata(repack=True, returns=['data'])
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 136)     def wrapped_function_5(data, other_data):
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 137)         return data
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 138) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 139)     data_in = np.array([1, 2, 3])
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 140)     nddata_in = NDData(data_in)
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 141) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 142)     nddata_out = wrapped_function_5(nddata_in, [1, 2, 3])
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 143) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 144)     assert isinstance(nddata_out, NDData)
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 145)     assert nddata_out.data is data_in
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 146) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 147) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 148) def test_wrap_function_accepts():
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 149) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 150)     class MyData(NDData):
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 151)         pass
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 152) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 153)     @support_nddata(accepts=MyData)
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 154)     def wrapped_function_5(data, other_data):
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 155)         return data
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 156) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 157)     data_in = np.array([1, 2, 3])
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 158)     nddata_in = NDData(data_in)
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 159)     mydata_in = MyData(data_in)
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 160) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 161)     assert wrapped_function_5(mydata_in, [1, 2, 3]) is data_in
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 162) 
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 163)     with pytest.raises(TypeError, match="Only NDData sub-classes that inherit "
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 164)                        "from MyData can be used by this function"):
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 165)         wrapped_function_5(nddata_in, [1, 2, 3])
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 166) 
dcf0c2787f astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 22:44:04 +0000 167) 
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 168) def test_wrap_preserve_signature_docstring():
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 169) 
9050d8f6e1 astropy/nddata/tests/test_decorators.py (Thomas Robitaille 2014-12-18 15:13:45 +0000 170)     @support_nddata
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 171)     def wrapped_function_6(data, wcs=None, unit=None):
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 172)         """
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 173)         An awesome function
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 174)         """
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 175)         pass
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 176) 
004380c161 astropy/nddata/tests/test_decorators.py (E. Madison Bray   2015-07-07 12:59:39 -0400 177)     if wrapped_function_6.__doc__ is not None:
004380c161 astropy/nddata/tests/test_decorators.py (E. Madison Bray   2015-07-07 12:59:39 -0400 178)         assert wrapped_function_6.__doc__.strip() == "An awesome function"
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 179) 
204aa73455 astropy/nddata/tests/test_decorators.py (Simon Conseil     2018-07-02 10:34:59 +0200 180)     signature = inspect.signature(wrapped_function_6)
f1bc2f7e08 astropy/nddata/tests/test_decorator.py  (Thomas Robitaille 2014-08-15 18:31:09 +0200 181) 
204aa73455 astropy/nddata/tests/test_decorators.py (Simon Conseil     2018-07-02 10:34:59 +0200 182)     assert str(signature) == "(data, wcs=None, unit=None)"
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 183) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 184) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 185) def test_setup_failures1():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 186)     # repack but no returns
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 187)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 188)         support_nddata(repack=True)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 189) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 190) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 191) def test_setup_failures2():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 192)     # returns but no repack
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 193)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 194)         support_nddata(returns=['data'])
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 195) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 196) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 197) def test_setup_failures9():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 198)     # keeps but no repack
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 199)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 200)         support_nddata(keeps=['unit'])
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 201) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 202) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 203) def test_setup_failures3():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 204)     # same attribute in keeps and returns
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 205)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 206)         support_nddata(repack=True, keeps=['mask'], returns=['data', 'mask'])
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 207) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 208) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 209) def test_setup_failures4():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 210)     # function accepts *args
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 211)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 212)         @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 213)         def test(data, *args):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 214)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 215) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 216) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 217) def test_setup_failures10():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 218)     # function accepts **kwargs
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 219)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 220)         @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 221)         def test(data, **kwargs):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 222)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 223) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 224) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 225) def test_setup_failures5():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 226)     # function accepts *args (or **kwargs)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 227)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 228)         @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 229)         def test(data, *args):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 230)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 231) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 232) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 233) def test_setup_failures6():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 234)     # First argument is not data
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 235)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 236)         @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 237)         def test(img):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 238)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 239) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 240) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 241) def test_setup_failures7():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 242)     # accepts CCDData but was given just an NDData
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 243)     with pytest.raises(TypeError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 244)         @support_nddata(accepts=CCDData)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 245)         def test(data):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 246)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 247)         test(NDData(np.ones((3, 3))))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 248) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 249) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 250) def test_setup_failures8():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 251)     # function returns a different amount of arguments than specified. Using
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 252)     # NDData here so we don't get into troubles when creating a CCDData without
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 253)     # unit!
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 254)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 255)         @support_nddata(repack=True, returns=['data', 'mask'])
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 256)         def test(data):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 257)             return 10
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 258)         test(NDData(np.ones((3, 3))))  # do NOT use CCDData here.
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 259) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 260) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 261) def test_setup_failures11():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 262)     # function accepts no arguments
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 263)     with pytest.raises(ValueError):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 264)         @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 265)         def test():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 266)             pass
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 267) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 268) 
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 269) def test_setup_numpyarray_default():
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 270)     # It should be possible (even if it's not advisable to use mutable
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 271)     # defaults) to have a numpy array as default value.
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 272)     @support_nddata
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 273)     def func(data, wcs=np.array([1, 2, 3])):
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 274)         return wcs
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 275) 
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 276) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 277) def test_still_accepts_other_input():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 278)     @support_nddata(repack=True, returns=['data'])
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 279)     def test(data):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 280)         return data
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 281)     assert isinstance(test(NDData(np.ones((3, 3)))), NDData)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 282)     assert isinstance(test(10), int)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 283)     assert isinstance(test([1, 2, 3]), list)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 284) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 285) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 286) def test_accepting_property_normal():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 287)     # Accepts a mask attribute and takes it from the input
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 288)     @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 289)     def test(data, mask=None):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 290)         return mask
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 291) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 292)     ndd = NDData(np.ones((3, 3)))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 293)     assert test(ndd) is None
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 294)     ndd._mask = np.zeros((3, 3))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 295)     assert np.all(test(ndd) == 0)
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 296)     # Use the explicitly given one (raises a Warning)
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 297)     with pytest.warns(AstropyUserWarning) as w:
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 298)         assert test(ndd, mask=10) == 10
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 299)     assert len(w) == 1
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 300) 
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 301) 
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 302) def test_parameter_default_identical_to_explicit_passed_argument():
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 303)     # If the default is identical to the explicitly passed argument this
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 304)     # should still raise a Warning and use the explicit one.
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 305)     @support_nddata
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200 306)     def func(data, meta={'a': 1}):
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200 307)         return meta
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 308) 
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 309)     with pytest.warns(AstropyUserWarning) as w:
21e330439d astropy/nddata/tests/test_decorators.py (Michael Seifert   2019-09-26 21:09:34 +0200 310)         assert func(NDData(1, meta={'b': 2}), {'a': 1}) == {'a': 1}
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 311)     assert len(w) == 1
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 312) 
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 313)     assert func(NDData(1, meta={'b': 2})) == {'b': 2}
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 314) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 315) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 316) def test_accepting_property_notexist():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 317)     # Accepts flags attribute but NDData doesn't have one
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 318)     @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 319)     def test(data, flags=10):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 320)         return flags
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 321) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 322)     ndd = NDData(np.ones((3, 3)))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 323)     test(ndd)
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 324) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 325) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 326) def test_accepting_property_translated():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 327)     # Accepts a error attribute and we want to pass in uncertainty!
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 328)     @support_nddata(mask='masked')
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 329)     def test(data, masked=None):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 330)         return masked
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 331) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 332)     ndd = NDData(np.ones((3, 3)))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 333)     assert test(ndd) is None
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 334)     ndd._mask = np.zeros((3, 3))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 335)     assert np.all(test(ndd) == 0)
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 336)     # Use the explicitly given one (raises a Warning)
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 337)     with pytest.warns(AstropyUserWarning) as w:
11535dadb0 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-12-01 22:42:48 +0100 338)         assert test(ndd, masked=10) == 10
f193be1aee astropy/nddata/tests/test_decorators.py (Pey Lian Lim      2020-06-26 21:28:02 -0400 339)     assert len(w) == 1
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 340) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 341) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 342) def test_accepting_property_meta_empty():
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 343)     # Meta is always set (OrderedDict) so it has a special case that it's
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 344)     # ignored if it's empty but not None
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 345)     @support_nddata
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 346)     def test(data, meta=None):
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 347)         return meta
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 348) 
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 349)     ndd = NDData(np.ones((3, 3)))
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 350)     assert test(ndd) is None
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 351)     ndd._meta = {'a': 10}
feb0f6ce44 astropy/nddata/tests/test_decorators.py (Michael Seifert   2016-11-29 17:49:30 +0100 352)     assert test(ndd) == {'a': 10}
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille 2014-12-18 13:09:51 +0000   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
796bed9983 astropy/nddata/tests/test_utils.py       (Thomas Robitaille 2017-01-13 16:39:34 +0000   2) 
ce630bb157 astropy/nddata/tests/test_array_utils.py (Thomas Robitaille 2014-12-18 13:09:51 +0000   3) import numpy as np
a27f6680db astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 13:10:13 -0400   4) import pytest
078c0af18f astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-13 08:37:37 -0400   5) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400   6) from astropy.nddata import reshape_as_blocks, block_reduce, block_replicate
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400   7) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400   8) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400   9) class TestReshapeAsBlocks:
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  10)     def test_1d(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  11)         data = np.arange(16)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  12)         reshaped = reshape_as_blocks(data, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  13)         assert reshaped.shape == (8, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  14)         reshaped = reshape_as_blocks(data, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  15)         assert reshaped.shape == (4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  16)         reshaped = reshape_as_blocks(data, 8)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  17)         assert reshaped.shape == (2, 8)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  18) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  19)     def test_2d(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  20)         data = np.arange(16).reshape(4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  21)         reshaped = reshape_as_blocks(data, (2, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  22)         assert reshaped.shape == (2, 2, 2, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  23) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  24)         data = np.arange(64).reshape(8, 8)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  25)         reshaped = reshape_as_blocks(data, (2, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  26)         assert reshaped.shape == (4, 4, 2, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  27)         reshaped = reshape_as_blocks(data, (4, 4))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  28)         assert reshaped.shape == (2, 2, 4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  29) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  30)     def test_3d(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  31)         data = np.arange(64).reshape(4, 4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  32)         reshaped = reshape_as_blocks(data, (2, 2, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  33)         assert reshaped.shape == (2, 2, 2, 2, 2, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  34) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  35)         data = np.arange(2*3*4).reshape(2, 3, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  36)         reshaped = reshape_as_blocks(data, (2, 1, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  37)         assert reshaped.shape == (1, 3, 2, 2, 1, 2)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  38) 
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  39)     def test_view(self):
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  40)         data = np.arange(16).reshape(4, 4)
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  41)         reshaped = reshape_as_blocks(data, (2, 2))
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  42)         data[0, 0] = 100
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  43)         assert reshaped[0, 0, 0, 0] == 100
c5d611a5f6 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-30 17:07:51 -0400  44) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  45)     def test_invalid_block_dim(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  46)         data = np.arange(64).reshape(4, 4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  47)         match = ('block_size must be a scalar or have the same '
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  48)                  'length as the number of data dimensions')
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  49)         with pytest.raises(ValueError, match=match):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  50)             reshape_as_blocks(data, (2, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  51) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  52)     def test_invalid_block_size(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  53)         data = np.arange(16).reshape(4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  54)         match = ('Each dimension of block_size must divide evenly '
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  55)                  'into the corresponding dimension of data')
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  56)         with pytest.raises(ValueError, match=match):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  57)             reshape_as_blocks(data, (2, 3))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  58) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  59)     def test_invalid_block_value(self):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  60)         data = np.arange(16).reshape(4, 4)
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  61)         match = 'block_size elements must be integers'
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  62)         with pytest.raises(ValueError, match=match):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  63)             reshape_as_blocks(data, (2.1, 2))
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  64) 
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  65)         match = 'block_size elements must be strictly positive'
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  66)         with pytest.raises(ValueError, match=match):
71fcbef270 astropy/nddata/tests/test_blocks.py      (Larry Bradley     2020-04-27 15:24:47 -0400  67)             reshape_as_blocks(data, (-1, 0))
197ef46e15 astropy/nddata/tests/test_utils.py       (Matthew Craig     2019-10-27 16:08:57 -0500  68) 
078c0af18f astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-13 08:37:37 -0400  69) 
928fe68418 astropy/nddata/tests/test_utils.py       (Simon Conseil     2017-09-22 00:08:49 +0200  70) class TestBlockReduce:
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  71)     def test_1d(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  72)         """Test 1D array."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  73)         data = np.arange(4)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  74)         expected = np.array([1, 5])
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  75)         result = block_reduce(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  76)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  77) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  78)     def test_1d_mean(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  79)         """Test 1D array with func=np.mean."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  80)         data = np.arange(4)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  81)         block_size = 2.
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  82)         expected = block_reduce(data, block_size, func=np.sum) / block_size
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  83)         result_mean = block_reduce(data, block_size, func=np.mean)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  84)         assert np.all(result_mean == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  85) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  86)     def test_2d(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  87)         """Test 2D array."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  88)         data = np.arange(4).reshape(2, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  89)         expected = np.array([[6]])
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  90)         result = block_reduce(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  91)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  92) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  93)     def test_2d_mean(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  94)         """Test 2D array with func=np.mean."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  95)         data = np.arange(4).reshape(2, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  96)         block_size = 2.
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  97)         expected = (block_reduce(data, block_size, func=np.sum) /
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  98)                     block_size**2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400  99)         result = block_reduce(data, block_size, func=np.mean)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 100)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 101) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 102)     def test_2d_trim(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 103)         """
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 104)         Test trimming of 2D array when size is not perfectly divisible
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 105)         by block_size.
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 106)         """
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 107) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 108)         data1 = np.arange(15).reshape(5, 3)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 109)         result1 = block_reduce(data1, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 110)         data2 = data1[0:4, 0:2]
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 111)         result2 = block_reduce(data2, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 112)         assert np.all(result1 == result2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 113) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 114)     def test_block_size_broadcasting(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 115)         """Test scalar block_size broadcasting."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 116)         data = np.arange(16).reshape(4, 4)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 117)         result1 = block_reduce(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 118)         result2 = block_reduce(data, (2, 2))
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 119)         assert np.all(result1 == result2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 120) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 121)     def test_block_size_len(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 122)         """Test block_size length."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 123)         data = np.ones((2, 2))
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 124)         with pytest.raises(ValueError):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 125)             block_reduce(data, (2, 2, 2))
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 126) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 127) 
928fe68418 astropy/nddata/tests/test_utils.py       (Simon Conseil     2017-09-22 00:08:49 +0200 128) class TestBlockReplicate:
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 129)     def test_1d(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 130)         """Test 1D array."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 131)         data = np.arange(2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 132)         expected = np.array([0, 0, 0.5, 0.5])
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 133)         result = block_replicate(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 134)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 135) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 136)     def test_1d_conserve_sum(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 137)         """Test 1D array with conserve_sum=False."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 138)         data = np.arange(2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 139)         block_size = 2.
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 140)         expected = block_replicate(data, block_size) * block_size
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 141)         result = block_replicate(data, block_size, conserve_sum=False)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 142)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 143) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 144)     def test_2d(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 145)         """Test 2D array."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 146)         data = np.arange(2).reshape(2, 1)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 147)         expected = np.array([[0, 0], [0, 0], [0.25, 0.25], [0.25, 0.25]])
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 148)         result = block_replicate(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 149)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 150) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 151)     def test_2d_conserve_sum(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 152)         """Test 2D array with conserve_sum=False."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 153)         data = np.arange(6).reshape(2, 3)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 154)         block_size = 2.
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 155)         expected = block_replicate(data, block_size) * block_size**2
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 156)         result = block_replicate(data, block_size, conserve_sum=False)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 157)         assert np.all(result == expected)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 158) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 159)     def test_block_size_broadcasting(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 160)         """Test scalar block_size broadcasting."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 161)         data = np.arange(4).reshape(2, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 162)         result1 = block_replicate(data, 2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 163)         result2 = block_replicate(data, (2, 2))
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 164)         assert np.all(result1 == result2)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 165) 
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 166)     def test_block_size_len(self):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 167)         """Test block_size length."""
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 168)         data = np.arange(5)
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 169)         with pytest.raises(ValueError):
082ee69e0d astropy/nddata/tests/test_utils.py       (Larry Bradley     2015-04-10 16:04:24 -0400 170)             block_replicate(data, (2, 2))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500    1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500    2) 
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200    3) import textwrap
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200    4) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500    5) import numpy as np
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500    6) import pytest
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500    7) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000    8) from astropy.io import fits
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000    9) from astropy.nddata.nduncertainty import (
ba76d8f31b (Michael Seifert   2018-11-16 23:23:11 +0100   10)     StdDevUncertainty, MissingDataAssociationException, VarianceUncertainty,
ba76d8f31b (Michael Seifert   2018-11-16 23:23:11 +0100   11)     InverseVariance)
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   12) from astropy import units as u
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   13) from astropy import log
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   14) from astropy.wcs import WCS, FITSFixedWarning
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   15) from astropy.utils import NumpyRNGContext
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   16) from astropy.utils.data import (get_pkg_data_filename, get_pkg_data_filenames,
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500   17)                                 get_pkg_data_contents)
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500   18) from astropy.utils.exceptions import AstropyWarning
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   19) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   20) from astropy.nddata.ccddata import CCDData
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200   21) from astropy.nddata import _testing as nd_testing
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300   22) from astropy.table import Table
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   23) 
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   24) DEFAULT_DATA_SIZE = 100
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   25) 
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   26) with NumpyRNGContext(123):
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   27)     _random_array = np.random.normal(size=[DEFAULT_DATA_SIZE, DEFAULT_DATA_SIZE])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   28) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   29) 
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   30) def create_ccd_data():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   31)     """
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   32)     Return a CCDData object of size DEFAULT_DATA_SIZE x DEFAULT_DATA_SIZE
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   33)     with units of ADU.
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   34)     """
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   35)     data = _random_array.copy()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   36)     fake_meta = {'my_key': 42, 'your_key': 'not 42'}
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   37)     ccd = CCDData(data, unit=u.adu)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   38)     ccd.header = fake_meta
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   39)     return ccd
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   40) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   41) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   42) def test_ccddata_empty():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   43)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   44)         CCDData()  # empty initializer should fail
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   45) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   46) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   47) def test_ccddata_must_have_unit():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   48)     with pytest.raises(ValueError):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200   49)         CCDData(np.zeros([2, 2]))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   50) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   51) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200   52) def test_ccddata_unit_cannot_be_set_to_none():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200   53)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   54)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   55)         ccd_data.unit = None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   56) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   57) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   58) def test_ccddata_meta_header_conflict():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   59)     with pytest.raises(ValueError) as exc:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   60)         CCDData([1, 2, 3], unit='', meta={1: 1}, header={2: 2})
6c990ecf11 (Derek Homeier     2019-07-02 17:50:55 +0200   61)         assert "can't have both header and meta." in str(exc.value)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   62) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   63) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200   64) def test_ccddata_simple():
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   65)     ccd_data = create_ccd_data()
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   66)     assert ccd_data.shape == (DEFAULT_DATA_SIZE, DEFAULT_DATA_SIZE)
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   67)     assert ccd_data.size == DEFAULT_DATA_SIZE * DEFAULT_DATA_SIZE
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   68)     assert ccd_data.dtype == np.dtype(float)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   69) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   70) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   71) def test_ccddata_init_with_string_electron_unit():
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200   72)     ccd = CCDData(np.zeros([2, 2]), unit="electron")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   73)     assert ccd.unit is u.electron
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   74) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   75) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200   76) def test_initialize_from_FITS(tmpdir):
f245beafa5 (Michael Seifert   2019-06-20 20:55:57 +0200   77)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   78)     hdu = fits.PrimaryHDU(ccd_data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   79)     hdulist = fits.HDUList([hdu])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   80)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   81)     hdulist.writeto(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   82)     cd = CCDData.read(filename, unit=u.electron)
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   83)     assert cd.shape == (DEFAULT_DATA_SIZE, DEFAULT_DATA_SIZE)
53ddd829c6 (Michael Seifert   2019-06-20 21:54:58 +0200   84)     assert cd.size == DEFAULT_DATA_SIZE * DEFAULT_DATA_SIZE
91a203ddab (Michael Seifert   2017-09-24 17:59:47 +0200   85)     assert np.issubdtype(cd.data.dtype, np.floating)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   86)     for k, v in hdu.header.items():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   87)         assert cd.meta[k] == v
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   88) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   89) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   90) def test_initialize_from_fits_with_unit_in_header(tmpdir):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200   91)     fake_img = np.zeros([2, 2])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   92)     hdu = fits.PrimaryHDU(fake_img)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   93)     hdu.header['bunit'] = u.adu.to_string()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   94)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   95)     hdu.writeto(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   96)     ccd = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   97)     # ccd should pick up the unit adu from the fits header...did it?
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   98)     assert ccd.unit is u.adu
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500   99) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  100)     # An explicit unit in the read overrides any unit in the FITS file
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  101)     ccd2 = CCDData.read(filename, unit="photon")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  102)     assert ccd2.unit is u.photon
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  103) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  104) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  105) def test_initialize_from_fits_with_ADU_in_header(tmpdir):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  106)     fake_img = np.zeros([2, 2])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  107)     hdu = fits.PrimaryHDU(fake_img)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  108)     hdu.header['bunit'] = 'ADU'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  109)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  110)     hdu.writeto(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  111)     ccd = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  112)     # ccd should pick up the unit adu from the fits header...did it?
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  113)     assert ccd.unit is u.adu
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  114) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  115) 
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  116) def test_initialize_from_fits_with_invalid_unit_in_header(tmpdir):
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  117)     hdu = fits.PrimaryHDU(np.ones((2, 2)))
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  118)     hdu.header['bunit'] = 'definetely-not-a-unit'
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  119)     filename = tmpdir.join('afile.fits').strpath
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  120)     hdu.writeto(filename)
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  121)     with pytest.raises(ValueError):
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  122)         CCDData.read(filename)
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  123) 
1118b0cc2b (Michael Seifert   2018-06-30 22:50:36 +0200  124) 
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  125) def test_initialize_from_fits_with_technically_invalid_but_not_really(tmpdir):
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  126)     hdu = fits.PrimaryHDU(np.ones((2, 2)))
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  127)     hdu.header['bunit'] = 'ELECTRONS/S'
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  128)     filename = tmpdir.join('afile.fits').strpath
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  129)     hdu.writeto(filename)
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  130)     ccd = CCDData.read(filename)
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  131)     assert ccd.unit == u.electron/u.s
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  132) 
5c00551979 (Erik Tollerud     2019-10-17 17:56:04 -0400  133) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  134) def test_initialize_from_fits_with_data_in_different_extension(tmpdir):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  135)     fake_img = np.arange(4).reshape(2, 2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  136)     hdu1 = fits.PrimaryHDU()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  137)     hdu2 = fits.ImageHDU(fake_img)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  138)     hdus = fits.HDUList([hdu1, hdu2])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  139)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  140)     hdus.writeto(filename)
f193be1aee (Pey Lian Lim      2020-06-26 21:28:02 -0400  141)     ccd = CCDData.read(filename, unit='adu')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  142)     # ccd should pick up the unit adu from the fits header...did it?
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  143)     np.testing.assert_array_equal(ccd.data, fake_img)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  144)     # check that the header is the combined header
189ac76350 (Michael Seifert   2017-08-30 01:00:55 +0200  145)     assert hdu2.header + hdu1.header == ccd.header
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  146) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  147) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  148) def test_initialize_from_fits_with_extension(tmpdir):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  149)     fake_img1 = np.zeros([2, 2])
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  150)     fake_img2 = np.arange(4).reshape(2, 2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  151)     hdu0 = fits.PrimaryHDU()
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  152)     hdu1 = fits.ImageHDU(fake_img1, name='first', ver=1)
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  153)     hdu2 = fits.ImageHDU(fake_img2, name='second', ver=1)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  154)     hdus = fits.HDUList([hdu0, hdu1, hdu2])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  155)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  156)     hdus.writeto(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  157)     ccd = CCDData.read(filename, hdu=2, unit='adu')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  158)     # ccd should pick up the unit adu from the fits header...did it?
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  159)     np.testing.assert_array_equal(ccd.data, fake_img2)
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  160)     # check hdu string parameter
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  161)     ccd = CCDData.read(filename, hdu='second', unit='adu')
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  162)     np.testing.assert_array_equal(ccd.data, fake_img2)
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  163)     # check hdu tuple parameter
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  164)     ccd = CCDData.read(filename, hdu=('second', 1), unit='adu')
bd6833c3e8 (Chiara Marmo      2022-01-09 16:54:04 -1000  165)     np.testing.assert_array_equal(ccd.data, fake_img2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  166) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  167) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  168) def test_write_unit_to_hdu():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  169)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  170)     ccd_unit = ccd_data.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  171)     hdulist = ccd_data.to_hdu()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  172)     assert 'bunit' in hdulist[0].header
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  173)     assert hdulist[0].header['bunit'] == ccd_unit.to_string()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  174) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  175) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  176) def test_initialize_from_FITS_bad_keyword_raises_error(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  177)     # There are two fits.open keywords that are not permitted in ccdproc:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  178)     #     do_not_scale_image_data and scale_back
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  179)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  180)     filename = tmpdir.join('test.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  181)     ccd_data.write(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  182) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  183)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  184)         CCDData.read(filename, unit=ccd_data.unit,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  185)                      do_not_scale_image_data=True)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  186)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  187)         CCDData.read(filename, unit=ccd_data.unit, scale_back=True)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  188) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  189) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  190) def test_ccddata_writer(tmpdir):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  191)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  192)     filename = tmpdir.join('test.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  193)     ccd_data.write(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  194) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  195)     ccd_disk = CCDData.read(filename, unit=ccd_data.unit)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  196)     np.testing.assert_array_equal(ccd_data.data, ccd_disk.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  197) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  198) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  199) def test_ccddata_meta_is_case_sensitive():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  200)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  201)     key = 'SoMeKEY'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  202)     ccd_data.meta[key] = 10
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  203)     assert key.lower() not in ccd_data.meta
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  204)     assert key.upper() not in ccd_data.meta
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  205)     assert key in ccd_data.meta
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  206) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  207) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  208) def test_ccddata_meta_is_not_fits_header():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  209)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  210)     ccd_data.meta = {'OBSERVER': 'Edwin Hubble'}
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  211)     assert not isinstance(ccd_data.meta, fits.Header)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  212) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  213) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  214) def test_fromMEF(tmpdir):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  215)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  216)     hdu = fits.PrimaryHDU(ccd_data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  217)     hdu2 = fits.PrimaryHDU(2 * ccd_data.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  218)     hdulist = fits.HDUList(hdu)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  219)     hdulist.append(hdu2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  220)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  221)     hdulist.writeto(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  222)     # by default, we reading from the first extension
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  223)     cd = CCDData.read(filename, unit=u.electron)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  224)     np.testing.assert_array_equal(cd.data, ccd_data.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  225)     # but reading from the second should work too
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  226)     cd = CCDData.read(filename, hdu=1, unit=u.electron)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  227)     np.testing.assert_array_equal(cd.data, 2 * ccd_data.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  228) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  229) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  230) def test_metafromheader():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  231)     hdr = fits.header.Header()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  232)     hdr['observer'] = 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  233)     hdr['exptime'] = '3600'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  234) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  235)     d1 = CCDData(np.ones((5, 5)), meta=hdr, unit=u.electron)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  236)     assert d1.meta['OBSERVER'] == 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  237)     assert d1.header['OBSERVER'] == 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  238) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  239) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  240) def test_metafromdict():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  241)     dic = {'OBSERVER': 'Edwin Hubble', 'EXPTIME': 3600}
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  242)     d1 = CCDData(np.ones((5, 5)), meta=dic, unit=u.electron)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  243)     assert d1.meta['OBSERVER'] == 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  244) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  245) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  246) def test_header2meta():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  247)     hdr = fits.header.Header()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  248)     hdr['observer'] = 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  249)     hdr['exptime'] = '3600'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  250) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  251)     d1 = CCDData(np.ones((5, 5)), unit=u.electron)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  252)     d1.header = hdr
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  253)     assert d1.meta['OBSERVER'] == 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  254)     assert d1.header['OBSERVER'] == 'Edwin Hubble'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  255) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  256) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  257) def test_metafromstring_fail():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  258)     hdr = 'this is not a valid header'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  259)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  260)         CCDData(np.ones((5, 5)), meta=hdr, unit=u.adu)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  261) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  262) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  263) def test_setting_bad_uncertainty_raises_error():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  264)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  265)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  266)         # Uncertainty is supposed to be an instance of NDUncertainty
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  267)         ccd_data.uncertainty = 10
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  268) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  269) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  270) def test_setting_uncertainty_with_array():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  271)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  272)     ccd_data.uncertainty = None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  273)     fake_uncertainty = np.sqrt(np.abs(ccd_data.data))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  274)     ccd_data.uncertainty = fake_uncertainty.copy()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  275)     np.testing.assert_array_equal(ccd_data.uncertainty.array, fake_uncertainty)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  276) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  277) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  278) def test_setting_uncertainty_wrong_shape_raises_error():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  279)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  280)     with pytest.raises(ValueError):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  281)         ccd_data.uncertainty = np.zeros([3, 4])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  282) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  283) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  284) def test_to_hdu():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  285)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  286)     ccd_data.meta = {'observer': 'Edwin Hubble'}
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  287)     fits_hdulist = ccd_data.to_hdu()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  288)     assert isinstance(fits_hdulist, fits.HDUList)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  289)     for k, v in ccd_data.meta.items():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  290)         assert fits_hdulist[0].header[k] == v
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  291)     np.testing.assert_array_equal(fits_hdulist[0].data, ccd_data.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  292) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  293) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  294) def test_copy():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  295)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  296)     ccd_copy = ccd_data.copy()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  297)     np.testing.assert_array_equal(ccd_copy.data, ccd_data.data)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  298)     assert ccd_copy.unit == ccd_data.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  299)     assert ccd_copy.meta == ccd_data.meta
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  300) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  301) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  302) @pytest.mark.parametrize('operation,affects_uncertainty', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  303)                          ("multiply", True),
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  304)                          ("divide", True),
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  305)                          ])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  306) @pytest.mark.parametrize('operand', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  307)                          2.0,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  308)                          2 * u.dimensionless_unscaled,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  309)                          2 * u.photon / u.adu,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  310)                          ])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  311) @pytest.mark.parametrize('with_uncertainty', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  312)                          True,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  313)                          False])
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  314) def test_mult_div_overload(operand, with_uncertainty,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  315)                            operation, affects_uncertainty):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  316)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  317)     if with_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  318)         ccd_data.uncertainty = StdDevUncertainty(np.ones_like(ccd_data))
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  319)     method = getattr(ccd_data, operation)
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  320)     np_method = getattr(np, operation)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  321)     result = method(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  322)     assert result is not ccd_data
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  323)     assert isinstance(result, CCDData)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  324)     assert (result.uncertainty is None or
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  325)             isinstance(result.uncertainty, StdDevUncertainty))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  326)     try:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  327)         op_value = operand.value
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  328)     except AttributeError:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  329)         op_value = operand
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  330) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  331)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  332)                                   np_method(ccd_data.data, op_value))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  333)     if with_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  334)         if affects_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  335)             np.testing.assert_array_equal(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  336)                                           np_method(ccd_data.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  337)                                                     op_value))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  338)         else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  339)             np.testing.assert_array_equal(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  340)                                           ccd_data.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  341)     else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  342)         assert result.uncertainty is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  343) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  344)     if isinstance(operand, u.Quantity):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  345)         # Need the "1 *" below to force arguments to be Quantity to work around
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  346)         # astropy/astropy#2377
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  347)         expected_unit = np_method(1 * ccd_data.unit, 1 * operand.unit).unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  348)         assert result.unit == expected_unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  349)     else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  350)         assert result.unit == ccd_data.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  351) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  352) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  353) @pytest.mark.parametrize('operation,affects_uncertainty', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  354)                          ("add", False),
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  355)                          ("subtract", False),
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  356)                          ])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  357) @pytest.mark.parametrize('operand,expect_failure', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  358)                          (2.0, u.UnitsError),  # fail--units don't match image
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  359)                          (2 * u.dimensionless_unscaled, u.UnitsError),  # same
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  360)                          (2 * u.adu, False),
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  361)                          ])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  362) @pytest.mark.parametrize('with_uncertainty', [
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  363)                          True,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  364)                          False])
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  365) def test_add_sub_overload(operand, expect_failure, with_uncertainty,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  366)                           operation, affects_uncertainty):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  367)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  368)     if with_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  369)         ccd_data.uncertainty = StdDevUncertainty(np.ones_like(ccd_data))
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  370)     method = getattr(ccd_data, operation)
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  371)     np_method = getattr(np, operation)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  372)     if expect_failure:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  373)         with pytest.raises(expect_failure):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  374)             result = method(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  375)         return
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  376)     else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  377)         result = method(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  378)     assert result is not ccd_data
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  379)     assert isinstance(result, CCDData)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  380)     assert (result.uncertainty is None or
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  381)             isinstance(result.uncertainty, StdDevUncertainty))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  382)     try:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  383)         op_value = operand.value
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  384)     except AttributeError:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  385)         op_value = operand
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  386) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  387)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  388)                                   np_method(ccd_data.data, op_value))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  389)     if with_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  390)         if affects_uncertainty:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  391)             np.testing.assert_array_equal(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  392)                                           np_method(ccd_data.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  393)                                                     op_value))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  394)         else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  395)             np.testing.assert_array_equal(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  396)                                           ccd_data.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  397)     else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  398)         assert result.uncertainty is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  399) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  400)     if isinstance(operand, u.Quantity):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  401)         assert (result.unit == ccd_data.unit and result.unit == operand.unit)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  402)     else:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  403)         assert result.unit == ccd_data.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  404) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  405) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  406) def test_arithmetic_overload_fails():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  407)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  408)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  409)         ccd_data.multiply("five")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  410) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  411)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  412)         ccd_data.divide("five")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  413) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  414)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  415)         ccd_data.add("five")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  416) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  417)     with pytest.raises(TypeError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  418)         ccd_data.subtract("five")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  419) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  420) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  421) def test_arithmetic_no_wcs_compare():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  422)     ccd = CCDData(np.ones((10, 10)), unit='')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  423)     assert ccd.add(ccd, compare_wcs=None).wcs is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  424)     assert ccd.subtract(ccd, compare_wcs=None).wcs is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  425)     assert ccd.multiply(ccd, compare_wcs=None).wcs is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  426)     assert ccd.divide(ccd, compare_wcs=None).wcs is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  427) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  428) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  429) def test_arithmetic_with_wcs_compare():
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  430)     def return_true(_, __):
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  431)         return True
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  432) 
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  433)     wcs1, wcs2 = nd_testing.create_two_equal_wcs(naxis=2)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  434)     ccd1 = CCDData(np.ones((10, 10)), unit='', wcs=wcs1)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  435)     ccd2 = CCDData(np.ones((10, 10)), unit='', wcs=wcs2)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  436)     nd_testing.assert_wcs_seem_equal(
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  437)         ccd1.add(ccd2, compare_wcs=return_true).wcs,
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  438)         wcs1)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  439)     nd_testing.assert_wcs_seem_equal(
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  440)         ccd1.subtract(ccd2, compare_wcs=return_true).wcs,
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  441)         wcs1)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  442)     nd_testing.assert_wcs_seem_equal(
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  443)         ccd1.multiply(ccd2, compare_wcs=return_true).wcs,
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  444)         wcs1)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  445)     nd_testing.assert_wcs_seem_equal(
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  446)         ccd1.divide(ccd2, compare_wcs=return_true).wcs,
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  447)         wcs1)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  448) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  449) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  450) def test_arithmetic_with_wcs_compare_fail():
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  451)     def return_false(_, __):
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  452)         return False
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  453) 
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  454)     ccd1 = CCDData(np.ones((10, 10)), unit='', wcs=WCS())
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  455)     ccd2 = CCDData(np.ones((10, 10)), unit='', wcs=WCS())
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  456)     with pytest.raises(ValueError):
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  457)         ccd1.add(ccd2, compare_wcs=return_false)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  458)     with pytest.raises(ValueError):
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  459)         ccd1.subtract(ccd2, compare_wcs=return_false)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  460)     with pytest.raises(ValueError):
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  461)         ccd1.multiply(ccd2, compare_wcs=return_false)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  462)     with pytest.raises(ValueError):
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  463)         ccd1.divide(ccd2, compare_wcs=return_false)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  464) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  465) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  466) def test_arithmetic_overload_ccddata_operand():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  467)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  468)     ccd_data.uncertainty = StdDevUncertainty(np.ones_like(ccd_data))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  469)     operand = ccd_data.copy()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  470)     result = ccd_data.add(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  471)     assert len(result.meta) == 0
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  472)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  473)                                   2 * ccd_data.data)
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  474)     np.testing.assert_array_almost_equal_nulp(
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  475)         result.uncertainty.array,
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  476)         np.sqrt(2) * ccd_data.uncertainty.array
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  477)     )
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  478) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  479)     result = ccd_data.subtract(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  480)     assert len(result.meta) == 0
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  481)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  482)                                   0 * ccd_data.data)
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  483)     np.testing.assert_array_almost_equal_nulp(
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  484)         result.uncertainty.array,
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  485)         np.sqrt(2) * ccd_data.uncertainty.array
731e5e27b2 (Simon Conseil     2018-11-16 22:43:41 +0100  486)     )
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  487) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  488)     result = ccd_data.multiply(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  489)     assert len(result.meta) == 0
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  490)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  491)                                   ccd_data.data ** 2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  492)     expected_uncertainty = (np.sqrt(2) * np.abs(ccd_data.data) *
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  493)                             ccd_data.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  494)     np.testing.assert_allclose(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  495)                                expected_uncertainty)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  496) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  497)     result = ccd_data.divide(operand)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  498)     assert len(result.meta) == 0
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  499)     np.testing.assert_array_equal(result.data,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  500)                                   np.ones_like(ccd_data.data))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  501)     expected_uncertainty = (np.sqrt(2) / np.abs(ccd_data.data) *
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  502)                             ccd_data.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  503)     np.testing.assert_allclose(result.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  504)                                expected_uncertainty)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  505) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  506) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  507) def test_arithmetic_overload_differing_units():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  508)     a = np.array([1, 2, 3]) * u.m
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  509)     b = np.array([1, 2, 3]) * u.cm
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  510)     ccddata = CCDData(a)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  511) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  512)     # TODO: Could also be parametrized.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  513)     res = ccddata.add(b)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  514)     np.testing.assert_array_almost_equal(res.data, np.add(a, b).value)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  515)     assert res.unit == np.add(a, b).unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  516) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  517)     res = ccddata.subtract(b)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  518)     np.testing.assert_array_almost_equal(res.data, np.subtract(a, b).value)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  519)     assert res.unit == np.subtract(a, b).unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  520) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  521)     res = ccddata.multiply(b)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  522)     np.testing.assert_array_almost_equal(res.data, np.multiply(a, b).value)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  523)     assert res.unit == np.multiply(a, b).unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  524) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  525)     res = ccddata.divide(b)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  526)     np.testing.assert_array_almost_equal(res.data, np.divide(a, b).value)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  527)     assert res.unit == np.divide(a, b).unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  528) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  529) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  530) def test_arithmetic_add_with_array():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  531)     ccd = CCDData(np.ones((3, 3)), unit='')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  532)     res = ccd.add(np.arange(3))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  533)     np.testing.assert_array_equal(res.data, [[1, 2, 3]] * 3)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  534) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  535)     ccd = CCDData(np.ones((3, 3)), unit='adu')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  536)     with pytest.raises(ValueError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  537)         ccd.add(np.arange(3))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  538) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  539) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  540) def test_arithmetic_subtract_with_array():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  541)     ccd = CCDData(np.ones((3, 3)), unit='')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  542)     res = ccd.subtract(np.arange(3))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  543)     np.testing.assert_array_equal(res.data, [[1, 0, -1]] * 3)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  544) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  545)     ccd = CCDData(np.ones((3, 3)), unit='adu')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  546)     with pytest.raises(ValueError):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  547)         ccd.subtract(np.arange(3))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  548) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  549) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  550) def test_arithmetic_multiply_with_array():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  551)     ccd = CCDData(np.ones((3, 3)) * 3, unit=u.m)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  552)     res = ccd.multiply(np.ones((3, 3)) * 2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  553)     np.testing.assert_array_equal(res.data, [[6, 6, 6]] * 3)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  554)     assert res.unit == ccd.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  555) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  556) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  557) def test_arithmetic_divide_with_array():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  558)     ccd = CCDData(np.ones((3, 3)), unit=u.m)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  559)     res = ccd.divide(np.ones((3, 3)) * 2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  560)     np.testing.assert_array_equal(res.data, [[0.5, 0.5, 0.5]] * 3)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  561)     assert res.unit == ccd.unit
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  562) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  563) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  564) def test_history_preserved_if_metadata_is_fits_header(tmpdir):
c5d48f1dd2 (Michael Seifert   2019-06-21 00:22:24 +0200  565)     fake_img = np.zeros([2, 2])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  566)     hdu = fits.PrimaryHDU(fake_img)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  567)     hdu.header['history'] = 'one'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  568)     hdu.header['history'] = 'two'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  569)     hdu.header['history'] = 'three'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  570)     assert len(hdu.header['history']) == 3
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  571)     tmp_file = tmpdir.join('temp.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  572)     hdu.writeto(tmp_file)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  573) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  574)     ccd_read = CCDData.read(tmp_file, unit="adu")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  575)     assert ccd_read.header['history'] == hdu.header['history']
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  576) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  577) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  578) def test_infol_logged_if_unit_in_fits_header(tmpdir):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  579)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  580)     tmpfile = tmpdir.join('temp.fits')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  581)     ccd_data.write(tmpfile.strpath)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  582)     log.setLevel('INFO')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  583)     explicit_unit_name = "photon"
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  584)     with log.log_to_list() as log_list:
f193be1aee (Pey Lian Lim      2020-06-26 21:28:02 -0400  585)         _ = CCDData.read(tmpfile.strpath, unit=explicit_unit_name)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  586)         assert explicit_unit_name in log_list[0].message
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  587) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  588) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  589) def test_wcs_attribute(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  590)     """
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  591)     Check that WCS attribute gets added to header, and that if a CCDData
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  592)     object is created from a FITS file with a header, and the WCS attribute
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  593)     is modified, then the CCDData object is turned back into an hdu, the
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  594)     WCS object overwrites the old WCS information in the header.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  595)     """
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  596)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  597)     tmpfile = tmpdir.join('temp.fits')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  598)     # This wcs example is taken from the astropy.wcs docs.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  599)     wcs = WCS(naxis=2)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  600)     wcs.wcs.crpix = np.array(ccd_data.shape) / 2
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  601)     wcs.wcs.cdelt = np.array([-0.066667, 0.066667])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  602)     wcs.wcs.crval = [0, -90]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  603)     wcs.wcs.ctype = ["RA---AIR", "DEC--AIR"]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  604)     wcs.wcs.set_pv([(2, 1, 45.0)])
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  605)     ccd_data.header = ccd_data.to_hdu()[0].header
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  606)     ccd_data.header.extend(wcs.to_header(), useblanks=False)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  607)     ccd_data.write(tmpfile.strpath)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  608) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  609)     # Get the header length after it has been extended by the WCS keywords
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  610)     original_header_length = len(ccd_data.header)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  611) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  612)     ccd_new = CCDData.read(tmpfile.strpath)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  613)     # WCS attribute should be set for ccd_new
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  614)     assert ccd_new.wcs is not None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  615)     # WCS attribute should be equal to wcs above.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  616)     assert ccd_new.wcs.wcs == wcs.wcs
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  617) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  618)     # Converting CCDData object with wcs to an hdu shouldn't
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  619)     # create duplicate wcs-related entries in the header.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  620)     ccd_new_hdu = ccd_new.to_hdu()[0]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  621)     assert len(ccd_new_hdu.header) == original_header_length
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  622) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  623)     # Making a CCDData with WCS (but not WCS in the header) should lead to
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  624)     # WCS information in the header when it is converted to an HDU.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  625)     ccd_wcs_not_in_header = CCDData(ccd_data.data, wcs=wcs, unit="adu")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  626)     hdu = ccd_wcs_not_in_header.to_hdu()[0]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  627)     wcs_header = wcs.to_header()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  628)     for k in wcs_header.keys():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  629)         # Skip these keywords if they are in the WCS header because they are
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  630)         # not WCS-specific.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  631)         if k in ['', 'COMMENT', 'HISTORY']:
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  632)             continue
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  633)         # No keyword from the WCS should be in the header.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  634)         assert k not in ccd_wcs_not_in_header.header
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  635)         # Every keyword in the WCS should be in the header of the HDU
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  636)         assert hdu.header[k] == wcs_header[k]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  637) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  638)     # Now check that if WCS of a CCDData is modified, then the CCDData is
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  639)     # converted to an HDU, the WCS keywords in the header are overwritten
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  640)     # with the appropriate keywords from the header.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  641)     #
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  642)     # ccd_new has a WCS and WCS keywords in the header, so try modifying
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  643)     # the WCS.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  644)     ccd_new.wcs.wcs.cdelt *= 2
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  645)     ccd_new_hdu_mod_wcs = ccd_new.to_hdu()[0]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  646)     assert ccd_new_hdu_mod_wcs.header['CDELT1'] == ccd_new.wcs.wcs.cdelt[0]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  647)     assert ccd_new_hdu_mod_wcs.header['CDELT2'] == ccd_new.wcs.wcs.cdelt[1]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  648) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  649) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  650) def test_wcs_keywords_removed_from_header():
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  651)     """
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  652)     Test, for the file included with the nddata tests, that WCS keywords are
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  653)     properly removed from header.
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  654)     """
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  655)     from astropy.nddata.ccddata import _KEEP_THESE_KEYWORDS_IN_HEADER
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  656)     keepers = set(_KEEP_THESE_KEYWORDS_IN_HEADER)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  657)     data_file = get_pkg_data_filename('data/sip-wcs.fits')
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  658)     ccd = CCDData.read(data_file)
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500  659)     with pytest.warns(AstropyWarning,
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500  660)                       match=r'Some non-standard WCS keywords were excluded'):
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500  661)         wcs_header = ccd.wcs.to_header()
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  662)     assert not (set(wcs_header) & set(ccd.meta) - keepers)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  663) 
714b878ee9 (Brigitta Sipőcz   2017-07-24 16:54:18 +0100  664)     # Make sure that exceptions are not raised when trying to remove missing
714b878ee9 (Brigitta Sipőcz   2017-07-24 16:54:18 +0100  665)     # keywords. o4sp040b0_raw.fits of io.fits is missing keyword 'PC1_1'.
714b878ee9 (Brigitta Sipőcz   2017-07-24 16:54:18 +0100  666)     data_file1 = get_pkg_data_filename('../../io/fits/tests/data/o4sp040b0_raw.fits')
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500  667)     with pytest.warns(FITSFixedWarning, match=r"'unitfix' made the change"):
77ca068d37 (Pey Lian Lim      2019-11-05 16:27:40 -0500  668)         ccd = CCDData.read(data_file1, unit='count')
714b878ee9 (Brigitta Sipőcz   2017-07-24 16:54:18 +0100  669) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  670) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  671) def test_wcs_SIP_coefficient_keywords_removed():
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  672)     # If SIP polynomials are present, check that no more polynomial
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  673)     # coefficients remain in the header. See #8598
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  674) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  675)     # The SIP paper is ambiguous as to whether keywords like
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  676)     # A_0_0 can appear in the header for a 2nd order or higher
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  677)     # polynomial. The paper clearly says that the corrections
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  678)     # are only for quadratic or higher order, so A_0_0 and the like
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  679)     # should be zero if they are present, but they apparently can be
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  680)     # there (or at least astrometry.net produces them).
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  681) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  682)     # astropy WCS does not write those coefficients, so they were
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  683)     # not being removed from the header even though they are WCS-related.
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  684) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  685)     data_file = get_pkg_data_filename('data/sip-wcs.fits')
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500  686)     test_keys = ['A_0_0', 'B_0_1']
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  687) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  688)     # Make sure the keywords added to this file for testing are there
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500  689)     with fits.open(data_file) as hdu:
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500  690)         for key in test_keys:
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500  691)             assert key in hdu[0].header
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  692) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  693)     ccd = CCDData.read(data_file)
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  694) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  695)     # Now the test...the two keywords above should have been removed.
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  696)     for key in test_keys:
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  697)         assert key not in ccd.header
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  698) 
9239b60a6b (Matthew Craig     2019-04-19 12:44:03 -0500  699) 
c9db697adf (Pey Lian Lim      2019-11-04 17:45:45 -0500  700) @pytest.mark.filterwarnings('ignore')
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  701) def test_wcs_keyword_removal_for_wcs_test_files():
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  702)     """
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  703)     Test, for the WCS test files, that keyword removal works as
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  704)     expected. Those cover a much broader range of WCS types than
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  705)     test_wcs_keywords_removed_from_header.
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  706) 
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  707)     Includes regression test for #8597
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  708)     """
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  709)     from astropy.nddata.ccddata import _generate_wcs_and_update_header
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  710)     from astropy.nddata.ccddata import (_KEEP_THESE_KEYWORDS_IN_HEADER,
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  711)                                         _CDs, _PCs)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  712) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  713)     keepers = set(_KEEP_THESE_KEYWORDS_IN_HEADER)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  714)     wcs_headers = get_pkg_data_filenames('../../wcs/tests/data',
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  715)                                          pattern='*.hdr')
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  716) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  717)     for hdr in wcs_headers:
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  718)         # Skip the files that are expected to be bad...
44075af005 (Mihai Cara        2021-03-26 13:09:39 -0400  719)         if ('invalid' in hdr or 'nonstandard' in hdr or 'segfault' in hdr or
44075af005 (Mihai Cara        2021-03-26 13:09:39 -0400  720)             'chandra-pixlist-wcs' in hdr):
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  721)             continue
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  722)         header_string = get_pkg_data_contents(hdr)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  723)         header = fits.Header.fromstring(header_string)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  724) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  725)         wcs = WCS(header_string)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  726)         header_from_wcs = wcs.to_header(relax=True)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  727) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  728)         new_header, new_wcs = _generate_wcs_and_update_header(header)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  729)         new_wcs_header = new_wcs.to_header(relax=True)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  730) 
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  731)         # Make sure all of the WCS-related keywords generated by astropy
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  732)         # have been removed.
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  733)         assert not (set(new_header) &
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  734)                     set(new_wcs_header) -
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  735)                     keepers)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  736) 
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  737)         # Check that new_header contains no remaining WCS information.
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  738)         # Specifically, check that
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  739)         # 1. The combination of new_header and new_wcs does not contain
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  740)         #    both PCi_j and CDi_j keywords. See #8597.
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  741) 
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  742)         # Check for 1
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  743)         final_header = new_header + new_wcs_header
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  744)         final_header_set = set(final_header)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  745) 
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  746)         if _PCs & final_header_set:
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  747)             assert not (_CDs & final_header_set)
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  748)         elif _CDs & final_header_set:
b6bfcb4cf4 (Matthew Craig     2019-04-19 11:40:42 -0500  749)             assert not (_PCs & final_header_set)
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  750) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  751)         # Check that the new wcs is the same as the old.
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  752)         for k, v in new_wcs_header.items():
0665636ee2 (Brigitta Sipőcz   2017-09-17 16:57:07 +0100  753)             if isinstance(v, str):
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  754)                 assert header_from_wcs[k] == v
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  755)             else:
0b8e00dd24 (Matthew Craig     2019-04-19 10:58:48 -0500  756)                 np.testing.assert_almost_equal(header_from_wcs[k], v)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  757) 
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  758) 
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  759) def test_read_wcs_not_creatable(tmpdir):
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  760)     # The following Header can't be converted to a WCS object. See also #6499.
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  761)     hdr_txt_example_WCS = textwrap.dedent('''
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  762)     SIMPLE  =                    T / Fits standard
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  763)     BITPIX  =                   16 / Bits per pixel
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  764)     NAXIS   =                    2 / Number of axes
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  765)     NAXIS1  =                 1104 / Axis length
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  766)     NAXIS2  =                 4241 / Axis length
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  767)     CRVAL1  =         164.98110962 / Physical value of the reference pixel X
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  768)     CRVAL2  =          44.34089279 / Physical value of the reference pixel Y
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  769)     CRPIX1  =                -34.0 / Reference pixel in X (pixel)
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  770)     CRPIX2  =               2041.0 / Reference pixel in Y (pixel)
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  771)     CDELT1  =           0.10380000 / X Scale projected on detector (#/pix)
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  772)     CDELT2  =           0.10380000 / Y Scale projected on detector (#/pix)
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  773)     CTYPE1  = 'RA---TAN'           / Pixel coordinate system
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  774)     CTYPE2  = 'WAVELENGTH'         / Pixel coordinate system
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  775)     CUNIT1  = 'degree  '           / Units used in both CRVAL1 and CDELT1
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  776)     CUNIT2  = 'nm      '           / Units used in both CRVAL2 and CDELT2
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  777)     CD1_1   =           0.20760000 / Pixel Coordinate translation matrix
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  778)     CD1_2   =           0.00000000 / Pixel Coordinate translation matrix
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  779)     CD2_1   =           0.00000000 / Pixel Coordinate translation matrix
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  780)     CD2_2   =           0.10380000 / Pixel Coordinate translation matrix
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  781)     C2YPE1  = 'RA---TAN'           / Pixel coordinate system
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  782)     C2YPE2  = 'DEC--TAN'           / Pixel coordinate system
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  783)     C2NIT1  = 'degree  '           / Units used in both C2VAL1 and C2ELT1
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  784)     C2NIT2  = 'degree  '           / Units used in both C2VAL2 and C2ELT2
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  785)     RADECSYS= 'FK5     '           / The equatorial coordinate system
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  786)     ''')
f193be1aee (Pey Lian Lim      2020-06-26 21:28:02 -0400  787)     hdr = fits.Header.fromstring(hdr_txt_example_WCS, sep='\n')
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  788)     hdul = fits.HDUList([fits.PrimaryHDU(np.ones((4241, 1104)), header=hdr)])
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  789)     filename = tmpdir.join('afile.fits').strpath
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  790)     hdul.writeto(filename)
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  791)     # The hdr cannot be converted to a WCS object because of an
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  792)     # InconsistentAxisTypesError but it should still open the file
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  793)     ccd = CCDData.read(filename, unit='adu')
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  794)     assert ccd.wcs is None
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  795) 
c43f048ea6 (Michael Seifert   2017-09-02 12:36:19 +0200  796) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  797) def test_header():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  798)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  799)     a = {'Observer': 'Hubble'}
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  800)     ccd = CCDData(ccd_data, header=a)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  801)     assert ccd.meta == a
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  802) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  803) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  804) def test_wcs_arithmetic():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  805)     ccd_data = create_ccd_data()
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  806)     wcs = WCS(naxis=2)
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  807)     ccd_data.wcs = wcs
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  808)     result = ccd_data.multiply(1.0)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  809)     nd_testing.assert_wcs_seem_equal(result.wcs, wcs)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  810) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  811) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  812) @pytest.mark.parametrize('operation',
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  813)                          ['multiply', 'divide', 'add', 'subtract'])
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  814) def test_wcs_arithmetic_ccd(operation):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  815)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  816)     ccd_data2 = ccd_data.copy()
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  817)     ccd_data.wcs = WCS(naxis=2)
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  818)     method = getattr(ccd_data, operation)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  819)     result = method(ccd_data2)
21e330439d (Michael Seifert   2019-09-26 21:09:34 +0200  820)     nd_testing.assert_wcs_seem_equal(result.wcs, ccd_data.wcs)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  821)     assert ccd_data2.wcs is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  822) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  823) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  824) def test_wcs_sip_handling():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  825)     """
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  826)     Check whether the ctypes RA---TAN-SIP and DEC--TAN-SIP survive
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  827)     a roundtrip unchanged.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  828)     """
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  829)     data_file = get_pkg_data_filename('data/sip-wcs.fits')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  830) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  831)     def check_wcs_ctypes(header):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  832)         expected_wcs_ctypes = {
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  833)             'CTYPE1': 'RA---TAN-SIP',
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  834)             'CTYPE2': 'DEC--TAN-SIP'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  835)         }
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  836) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  837)         return [header[k] == v for k, v in expected_wcs_ctypes.items()]
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  838) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  839)     ccd_original = CCDData.read(data_file)
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  840)     # After initialization the keywords should be in the WCS, not in the
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  841)     # meta.
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  842)     with fits.open(data_file) as raw:
d70c247e43 (Matthew Craig     2017-06-16 12:23:09 -0500  843)         good_ctype = check_wcs_ctypes(raw[0].header)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  844)     assert all(good_ctype)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  845) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  846)     ccd_new = ccd_original.to_hdu()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  847)     good_ctype = check_wcs_ctypes(ccd_new[0].header)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  848)     assert all(good_ctype)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  849) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  850)     # Try converting to header with wcs_relax=False and
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  851)     # the header should contain the CTYPE keywords without
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  852)     # the -SIP
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  853) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  854)     ccd_no_relax = ccd_original.to_hdu(wcs_relax=False)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  855)     good_ctype = check_wcs_ctypes(ccd_no_relax[0].header)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  856)     assert not any(good_ctype)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  857)     assert ccd_no_relax[0].header['CTYPE1'] == 'RA---TAN'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  858)     assert ccd_no_relax[0].header['CTYPE2'] == 'DEC--TAN'
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  859) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  860) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  861) @pytest.mark.parametrize('operation',
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  862)                          ['multiply', 'divide', 'add', 'subtract'])
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  863) def test_mask_arithmetic_ccd(operation):
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  864)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  865)     ccd_data2 = ccd_data.copy()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  866)     ccd_data.mask = (ccd_data.data > 0)
02b39c3546 (Michael Seifert   2019-06-21 00:34:57 +0200  867)     method = getattr(ccd_data, operation)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  868)     result = method(ccd_data2)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  869)     np.testing.assert_equal(result.mask, ccd_data.mask)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  870) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  871) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  872) def test_write_read_multiextensionfits_mask_default(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  873)     # Test that if a mask is present the mask is saved and loaded by default.
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  874)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  875)     ccd_data.mask = ccd_data.data > 10
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  876)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  877)     ccd_data.write(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  878)     ccd_after = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  879)     assert ccd_after.mask is not None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  880)     np.testing.assert_array_equal(ccd_data.mask, ccd_after.mask)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  881) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  882) 
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  883) @pytest.mark.parametrize(
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  884)     'uncertainty_type',
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  885)     [StdDevUncertainty, VarianceUncertainty, InverseVariance])
ba76d8f31b (Michael Seifert   2018-11-16 23:23:11 +0100  886) def test_write_read_multiextensionfits_uncertainty_default(
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  887)         tmpdir, uncertainty_type):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  888)     # Test that if a uncertainty is present it is saved and loaded by default.
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  889)     ccd_data = create_ccd_data()
ba76d8f31b (Michael Seifert   2018-11-16 23:23:11 +0100  890)     ccd_data.uncertainty = uncertainty_type(ccd_data.data * 10)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  891)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  892)     ccd_data.write(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  893)     ccd_after = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  894)     assert ccd_after.uncertainty is not None
ba76d8f31b (Michael Seifert   2018-11-16 23:23:11 +0100  895)     assert type(ccd_after.uncertainty) is uncertainty_type
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  896)     np.testing.assert_array_equal(ccd_data.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  897)                                   ccd_after.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  898) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  899) 
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  900) @pytest.mark.parametrize(
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  901)     'uncertainty_type',
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  902)     [StdDevUncertainty, VarianceUncertainty, InverseVariance])
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  903) def test_write_read_multiextensionfits_uncertainty_different_uncertainty_key(
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  904)         tmpdir, uncertainty_type):
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  905)     # Test that if a uncertainty is present it is saved and loaded by default.
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  906)     ccd_data = create_ccd_data()
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  907)     ccd_data.uncertainty = uncertainty_type(ccd_data.data * 10)
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  908)     filename = tmpdir.join('afile.fits').strpath
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  909)     ccd_data.write(filename, key_uncertainty_type='Blah')
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  910)     ccd_after = CCDData.read(filename, key_uncertainty_type='Blah')
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  911)     assert ccd_after.uncertainty is not None
bcbf5ed517 (Michael Seifert   2018-11-16 23:58:02 +0100  912)     assert type(ccd_after.uncertainty) is uncertainty_type
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  913)     np.testing.assert_array_equal(ccd_data.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  914)                                   ccd_after.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  915) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  916) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  917) def test_write_read_multiextensionfits_not(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  918)     # Test that writing mask and uncertainty can be disabled
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  919)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  920)     ccd_data.mask = ccd_data.data > 10
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  921)     ccd_data.uncertainty = StdDevUncertainty(ccd_data.data * 10)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  922)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  923)     ccd_data.write(filename, hdu_mask=None, hdu_uncertainty=None)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  924)     ccd_after = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  925)     assert ccd_after.uncertainty is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  926)     assert ccd_after.mask is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  927) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  928) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  929) def test_write_read_multiextensionfits_custom_ext_names(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  930)     # Test writing mask, uncertainty in another extension than default
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  931)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  932)     ccd_data.mask = ccd_data.data > 10
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  933)     ccd_data.uncertainty = StdDevUncertainty(ccd_data.data * 10)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  934)     filename = tmpdir.join('afile.fits').strpath
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  935)     ccd_data.write(filename, hdu_mask='Fun', hdu_uncertainty='NoFun')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  936) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  937)     # Try reading with defaults extension names
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  938)     ccd_after = CCDData.read(filename)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  939)     assert ccd_after.uncertainty is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  940)     assert ccd_after.mask is None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  941) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  942)     # Try reading with custom extension names
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  943)     ccd_after = CCDData.read(filename, hdu_mask='Fun', hdu_uncertainty='NoFun')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  944)     assert ccd_after.uncertainty is not None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  945)     assert ccd_after.mask is not None
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  946)     np.testing.assert_array_equal(ccd_data.mask, ccd_after.mask)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  947)     np.testing.assert_array_equal(ccd_data.uncertainty.array,
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  948)                                   ccd_after.uncertainty.array)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  949) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  950) 
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  951) def test_read_old_style_multiextensionfits(tmpdir):
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  952)     # Regression test for https://github.com/astropy/ccdproc/issues/664
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  953)     #
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  954)     # Prior to astropy 3.1 there was no uncertainty type saved
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  955)     # in the multiextension fits files generated by CCDData
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  956)     # because the uncertainty had to be StandardDevUncertainty.
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  957)     #
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  958)     # Current version should be able to read those in.
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  959)     #
5da3381d6e (Matthew Craig     2019-03-31 12:29:55 -0500  960)     size = 4
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  961)     # Value of the variables below are not important to the test.
5da3381d6e (Matthew Craig     2019-03-31 12:29:55 -0500  962)     data = np.zeros([size, size])
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  963)     mask = data > 0.9
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  964)     uncert = np.sqrt(data)
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  965) 
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  966)     ccd = CCDData(data=data, mask=mask, uncertainty=uncert, unit='adu')
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  967)     # We'll create the file manually to ensure we have the
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  968)     # right extension names and no uncertainty type.
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  969)     hdulist = ccd.to_hdu()
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  970)     del hdulist[2].header['UTYPE']
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  971)     file_name = tmpdir.join('old_ccddata_mef.fits').strpath
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  972)     hdulist.writeto(file_name)
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  973) 
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  974)     ccd = CCDData.read(file_name)
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  975) 
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  976)     assert isinstance(ccd.uncertainty, StdDevUncertainty)
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  977) 
70f1baedef (Matthew Craig     2019-03-30 21:06:02 -0500  978) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  979) def test_wcs():
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  980)     ccd_data = create_ccd_data()
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  981)     wcs = WCS(naxis=2)
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  982)     ccd_data.wcs = wcs
3509ea6156 (Michael Seifert   2019-09-24 21:35:34 +0200  983)     assert ccd_data.wcs is wcs
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  984) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  985) 
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  986) def test_recognized_fits_formats_for_read_write(tmpdir):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  987)     # These are the extensions that are supposed to be supported.
a5901d2108 (Michael Seifert   2019-06-20 20:46:42 +0200  988)     ccd_data = create_ccd_data()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  989)     supported_extensions = ['fit', 'fits', 'fts']
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  990) 
04b66fa0c1 (Matthew Craig     2017-06-13 16:57:51 -0500  991)     for ext in supported_extensions:
19e4931703 (Tom Aldcroft      2019-07-11 15:41:32 -0400  992)         path = tmpdir.join(f"test.{ext}")
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  993)         ccd_data.write(path.strpath)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  994)         from_disk = CCDData.read(path.strpath)
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  995)         assert (ccd_data.data == from_disk.data).all()
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  996) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  997) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  998) def test_stddevuncertainty_compat_descriptor_no_parent():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500  999)     with pytest.raises(MissingDataAssociationException):
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1000)         StdDevUncertainty(np.ones((10, 10))).parent_nddata
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1001) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1002) 
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1003) def test_stddevuncertainty_compat_descriptor_no_weakref():
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1004)     # TODO: Remove this test if astropy 1.0 isn't supported anymore
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1005)     # This test might create a Memoryleak on purpose, so the last lines after
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1006)     # the assert are IMPORTANT cleanup.
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1007)     ccd = CCDData(np.ones((10, 10)), unit='')
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1008)     uncert = StdDevUncertainty(np.ones((10, 10)))
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1009)     uncert._parent_nddata = ccd
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1010)     assert uncert.parent_nddata is ccd
ae1685011d (Matthew Craig     2017-06-09 14:17:08 -0500 1011)     uncert._parent_nddata = None
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300 1012) 
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1013) 
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1014) # https://github.com/astropy/astropy/issues/7595
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1015) def test_read_returns_image(tmpdir):
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300 1016)     # Test if CCData.read returns a image when reading a fits file containing
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1017)     # a table and image, in that order.
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1018)     tbl = Table(np.ones(10).reshape(5, 2))
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1019)     img = np.ones((5, 5))
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1020)     hdul = fits.HDUList(hdus=[fits.PrimaryHDU(), fits.TableHDU(tbl.as_array()),
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1021)                               fits.ImageHDU(img)])
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300 1022)     filename = tmpdir.join('table_image.fits').strpath
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300 1023)     hdul.writeto(filename)
7b174e3198 (Ana Posses        2018-08-14 21:10:01 -0300 1024)     ccd = CCDData.read(filename, unit='adu')
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1025)     # Expecting to get (5, 5), the size of the image
fd4661853e (Pey Lian Lim      2018-09-04 20:55:13 -0400 1026)     assert ccd.data.shape == (5, 5)
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1027) 
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1028) 
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1029) # https://github.com/astropy/astropy/issues/9664
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1030) def test_sliced_ccdata_to_hdu():
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1031)     wcs = WCS(naxis=2)
3b4d7ad3ec (Stuart Mumford    2019-11-29 14:00:52 +0000 1032)     wcs.wcs.crpix = 10, 10
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1033)     ccd = CCDData(np.ones((10, 10)), wcs=wcs, unit='pixel')
a55b05f25a (Stuart Mumford    2019-11-29 10:54:08 +0000 1034)     trimmed = ccd[2:-2, 2:-2]
3b4d7ad3ec (Stuart Mumford    2019-11-29 14:00:52 +0000 1035)     hdul = trimmed.to_hdu()
3b4d7ad3ec (Stuart Mumford    2019-11-29 14:00:52 +0000 1036)     assert isinstance(hdul, fits.HDUList)
3b4d7ad3ec (Stuart Mumford    2019-11-29 14:00:52 +0000 1037)     assert hdul[0].header['CRPIX1'] == 8
3b4d7ad3ec (Stuart Mumford    2019-11-29 14:00:52 +0000 1038)     assert hdul[0].header['CRPIX2'] == 8
38edc3c0c3 (Erik Tollerud      2011-12-12 14:02:35 -0800   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
d22b940a88 (Thomas Robitaille  2013-10-03 18:43:39 +0200   2) 
2359b3a4b9 (Michael Droettboom 2014-01-23 13:19:59 -0500   3) 
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200   4) import pickle
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400   5) import textwrap
a49c25630e (Michael Seifert    2016-01-18 22:13:40 +0100   6) from collections import OrderedDict
38edc3c0c3 (Erik Tollerud      2011-12-12 14:02:35 -0800   7) 
796bed9983 (Thomas Robitaille  2017-01-13 16:39:34 +0000   8) import pytest
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200   9) import numpy as np
68633a40a4 (Erik Tollerud      2013-01-28 19:55:27 -0500  10) from numpy.testing import assert_array_equal
c6d2730f25 (E. Madison Bray    2012-02-13 17:17:19 -0500  11) 
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000  12) from astropy.nddata.nddata import NDData
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000  13) from astropy.nddata.nduncertainty import StdDevUncertainty
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000  14) from astropy import units as u
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000  15) from astropy.utils import NumpyRNGContext
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200  16) from astropy.wcs import WCS
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500  17) from astropy.wcs.wcsapi import HighLevelWCSWrapper, SlicedLowLevelWCS, \
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500  18)                                BaseHighLevelWCS
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200  19) 
73882ece05 (Matthew Craig      2018-10-15 09:32:01 -0500  20) from .test_nduncertainty import FakeUncertainty
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500  21) from astropy.nddata import _testing as nd_testing
ba74882d45 (Michael Seifert    2016-01-27 23:14:49 +0100  22) 
3e8ddc1281 (Thomas Robitaille  2012-08-17 13:55:19 +0200  23) 
928fe68418 (Simon Conseil      2017-09-22 00:08:49 +0200  24) class FakeNumpyArray:
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  25)     """
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  26)     Class that has a few of the attributes of a numpy array.
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  27) 
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  28)     These attributes are checked for by NDData.
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  29)     """
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  30)     def __init__(self):
ecfc6c2a69 (Michael Seifert    2017-09-26 22:38:57 +0200  31)         super().__init__()
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  32) 
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  33)     def shape(self):
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  34)         pass
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  35) 
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  36)     def __getitem__(self):
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  37)         pass
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  38) 
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  39)     def __array__(self):
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  40)         pass
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  41) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  42)     @property
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  43)     def dtype(self):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  44)         return 'fake'
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  45) 
7432456de3 (Matthew Craig      2015-02-03 20:45:48 -0600  46) 
928fe68418 (Simon Conseil      2017-09-22 00:08:49 +0200  47) class MinimalUncertainty:
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  48)     """
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  49)     Define the minimum attributes acceptable as an uncertainty object.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  50)     """
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  51)     def __init__(self, value):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  52)         self._uncertainty = value
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  53) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  54)     @property
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  55)     def uncertainty_type(self):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  56)         return "totally and completely fake"
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  57) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  58) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  59) class BadNDDataSubclass(NDData):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  60) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  61)     def __init__(self, data, uncertainty=None, mask=None, wcs=None,
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  62)                  meta=None, unit=None):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  63)         self._data = data
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  64)         self._uncertainty = uncertainty
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  65)         self._mask = mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  66)         self._wcs = wcs
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  67)         self._unit = unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  68)         self._meta = meta
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  69) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  70) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  71) # Setter tests
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  72) def test_uncertainty_setter():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  73)     nd = NDData([1, 2, 3])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  74)     good_uncertainty = MinimalUncertainty(5)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  75)     nd.uncertainty = good_uncertainty
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  76)     assert nd.uncertainty is good_uncertainty
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  77)     # Check the fake uncertainty (minimal does not work since it has no
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  78)     # parent_nddata attribute from NDUncertainty)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  79)     nd.uncertainty = FakeUncertainty(5)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  80)     assert nd.uncertainty.parent_nddata is nd
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  81)     # Check that it works if the uncertainty was set during init
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  82)     nd = NDData(nd)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  83)     assert isinstance(nd.uncertainty, FakeUncertainty)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  84)     nd.uncertainty = 10
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  85)     assert not isinstance(nd.uncertainty, FakeUncertainty)
3be3ac353f (Michael Seifert    2015-12-22 19:05:51 +0100  86)     assert nd.uncertainty.array == 10
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  87) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  88) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  89) def test_mask_setter():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  90)     # Since it just changes the _mask attribute everything should work
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  91)     nd = NDData([1, 2, 3])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  92)     nd.mask = True
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  93)     assert nd.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  94)     nd.mask = False
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  95)     assert not nd.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  96)     # Check that it replaces a mask from init
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  97)     nd = NDData(nd, mask=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  98)     assert nd.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100  99)     nd.mask = False
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 100)     assert not nd.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 101) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 102) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 103) # Init tests
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200 104) def test_nddata_empty():
5ff2d510d7 (Thomas Robitaille  2012-09-30 18:56:07 -0400 105)     with pytest.raises(TypeError):
38edc3c0c3 (Erik Tollerud      2011-12-12 14:02:35 -0800 106)         NDData()  # empty initializer should fail
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200 107) 
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 108) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 109) def test_nddata_init_data_nonarray():
7fd0bf8b7b (Matthew Craig      2014-12-18 11:29:06 -0600 110)     inp = [1, 2, 3]
7fd0bf8b7b (Matthew Craig      2014-12-18 11:29:06 -0600 111)     nd = NDData(inp)
7fd0bf8b7b (Matthew Craig      2014-12-18 11:29:06 -0600 112)     assert (np.array(inp) == nd.data).all()
83acf14157 (Thomas Robitaille  2013-05-30 14:00:55 +0200 113) 
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 114) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 115) def test_nddata_init_data_ndarray():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 116)     # random floats
68633a40a4 (Erik Tollerud      2013-01-28 19:55:27 -0500 117)     with NumpyRNGContext(123):
68633a40a4 (Erik Tollerud      2013-01-28 19:55:27 -0500 118)         nd = NDData(np.random.random((10, 10)))
b8c0e914d1 (Matthew Craig      2014-12-18 11:43:35 -0600 119)     assert nd.data.shape == (10, 10)
b8c0e914d1 (Matthew Craig      2014-12-18 11:43:35 -0600 120)     assert nd.data.size == 100
b8c0e914d1 (Matthew Craig      2014-12-18 11:43:35 -0600 121)     assert nd.data.dtype == np.dtype(float)
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200 122) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 123)     # specific integers
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 124)     nd = NDData(np.array([[1, 2, 3], [4, 5, 6]]))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 125)     assert nd.data.size == 6
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 126)     assert nd.data.dtype == np.dtype(int)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 127) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 128)     # Tests to ensure that creating a new NDData object copies by *reference*.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 129)     a = np.ones((10, 10))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 130)     nd_ref = NDData(a)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 131)     a[0, 0] = 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 132)     assert nd_ref.data[0, 0] == 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 133) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 134)     # Except we choose copy=True
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 135)     a = np.ones((10, 10))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 136)     nd_ref = NDData(a, copy=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 137)     a[0, 0] = 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 138)     assert nd_ref.data[0, 0] != 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 139) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 140) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 141) def test_nddata_init_data_maskedarray():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 142)     with NumpyRNGContext(456):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 143)         NDData(np.random.random((10, 10)),
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 144)                mask=np.random.random((10, 10)) > 0.5)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 145) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 146)     # Another test (just copied here)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 147)     with NumpyRNGContext(12345):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 148)         a = np.random.randn(100)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 149)         marr = np.ma.masked_where(a > 0, a)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 150)     nd = NDData(marr)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 151)     # check that masks and data match
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 152)     assert_array_equal(nd.mask, marr.mask)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 153)     assert_array_equal(nd.data, marr.data)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 154)     # check that they are both by reference
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 155)     marr.mask[10] = ~marr.mask[10]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 156)     marr.data[11] = 123456789
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 157)     assert_array_equal(nd.mask, marr.mask)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 158)     assert_array_equal(nd.data, marr.data)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 159) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 160)     # or not if we choose copy=True
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 161)     nd = NDData(marr, copy=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 162)     marr.mask[10] = ~marr.mask[10]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 163)     marr.data[11] = 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 164)     assert nd.mask[10] != marr.mask[10]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 165)     assert nd.data[11] != marr.data[11]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 166) 
353abd826e (Thomas Robitaille  2012-06-27 20:56:02 +0200 167) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 168) @pytest.mark.parametrize('data', [np.array([1, 2, 3]), 5])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 169) def test_nddata_init_data_quantity(data):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 170)     # Test an array and a scalar because a scalar Quantity does not always
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 171)     # behaves the same way as an array.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 172)     quantity = data * u.adu
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 173)     ndd = NDData(quantity)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 174)     assert ndd.unit == quantity.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 175)     assert_array_equal(ndd.data, np.array(quantity.value))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 176)     if ndd.data.size > 1:
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 177)         # check that if it is an array it is not copied
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 178)         quantity.value[1] = 100
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 179)         assert ndd.data[1] == quantity.value[1]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 180) 
01d98073c1 (Brigitta Sipőcz    2016-06-15 05:34:47 +0100 181)         # or is copied if we choose copy=True
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 182)         ndd = NDData(quantity, copy=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 183)         quantity.value[1] = 5
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 184)         assert ndd.data[1] != quantity.value[1]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 185) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 186) 
30fb2c92ff (Michael Seifert    2016-01-07 09:05:38 +0100 187) def test_nddata_init_data_masked_quantity():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 188)     a = np.array([2, 3])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 189)     q = a * u.m
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 190)     m = False
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 191)     mq = np.ma.array(q, mask=m)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 192)     nd = NDData(mq)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 193)     assert_array_equal(nd.data, a)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 194)     # This test failed before the change in nddata init because the masked
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 195)     # arrays data (which in fact was a quantity was directly saved)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 196)     assert nd.unit == u.m
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 197)     assert not isinstance(nd.data, u.Quantity)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 198)     np.testing.assert_array_equal(nd.mask, np.array(m))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 199) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 200) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 201) def test_nddata_init_data_nddata():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 202)     nd1 = NDData(np.array([1]))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 203)     nd2 = NDData(nd1)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 204)     assert nd2.wcs == nd1.wcs
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 205)     assert nd2.uncertainty == nd1.uncertainty
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 206)     assert nd2.mask == nd1.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 207)     assert nd2.unit == nd1.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 208)     assert nd2.meta == nd1.meta
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 209) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 210)     # Check that it is copied by reference
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 211)     nd1 = NDData(np.ones((5, 5)))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 212)     nd2 = NDData(nd1)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 213)     assert nd1.data is nd2.data
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 214) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 215)     # Check that it is really copied if copy=True
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 216)     nd2 = NDData(nd1, copy=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 217)     nd1.data[2, 3] = 10
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 218)     assert nd1.data[2, 3] != nd2.data[2, 3]
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 219) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 220)     # Now let's see what happens if we have all explicitly set
6969297ad8 (Patricio Rojo      2018-05-04 17:18:20 -0300 221)     nd1 = NDData(np.array([1]), mask=False, uncertainty=StdDevUncertainty(10), unit=u.s,
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 222)                  meta={'dest': 'mordor'}, wcs=WCS(naxis=1))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 223)     nd2 = NDData(nd1)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 224)     assert nd2.data is nd1.data
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 225)     assert nd2.wcs is nd1.wcs
10eaa80bff (Michael Seifert    2016-05-11 00:28:30 +0200 226)     assert nd2.uncertainty.array == nd1.uncertainty.array
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 227)     assert nd2.mask == nd1.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 228)     assert nd2.unit == nd1.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 229)     assert nd2.meta == nd1.meta
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 230) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 231)     # now what happens if we overwrite them all too
6969297ad8 (Patricio Rojo      2018-05-04 17:18:20 -0300 232)     nd3 = NDData(nd1, mask=True, uncertainty=StdDevUncertainty(200), unit=u.km,
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 233)                  meta={'observer': 'ME'}, wcs=WCS(naxis=1))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 234)     assert nd3.data is nd1.data
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 235)     assert nd3.wcs is not nd1.wcs
10eaa80bff (Michael Seifert    2016-05-11 00:28:30 +0200 236)     assert nd3.uncertainty.array != nd1.uncertainty.array
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 237)     assert nd3.mask != nd1.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 238)     assert nd3.unit != nd1.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 239)     assert nd3.meta != nd1.meta
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 240) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 241) 
30fb2c92ff (Michael Seifert    2016-01-07 09:05:38 +0100 242) def test_nddata_init_data_nddata_subclass():
6969297ad8 (Patricio Rojo      2018-05-04 17:18:20 -0300 243)     uncert = StdDevUncertainty(3)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 244)     # There might be some incompatible subclasses of NDData around.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 245)     bnd = BadNDDataSubclass(False, True, 3, 2, 'gollum', 100)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 246)     # Before changing the NDData init this would not have raised an error but
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 247)     # would have lead to a compromised nddata instance
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 248)     with pytest.raises(TypeError):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 249)         NDData(bnd)
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 250) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 251)     # but if it has no actual incompatible attributes it passes
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 252)     bnd_good = BadNDDataSubclass(np.array([1, 2]), uncert, 3, HighLevelWCSWrapper(WCS(naxis=1)),
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 253)                                  {'enemy': 'black knight'}, u.km)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 254)     nd = NDData(bnd_good)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 255)     assert nd.unit == bnd_good.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 256)     assert nd.meta == bnd_good.meta
6969297ad8 (Patricio Rojo      2018-05-04 17:18:20 -0300 257)     assert nd.uncertainty == bnd_good.uncertainty
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 258)     assert nd.mask == bnd_good.mask
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 259)     assert nd.wcs is bnd_good.wcs
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 260)     assert nd.data is bnd_good.data
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 261) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 262) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 263) def test_nddata_init_data_fail():
01d98073c1 (Brigitta Sipőcz    2016-06-15 05:34:47 +0100 264)     # First one is sliceable but has no shape, so should fail.
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 265)     with pytest.raises(TypeError):
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 266)         NDData({'a': 'dict'})
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 267) 
01d98073c1 (Brigitta Sipőcz    2016-06-15 05:34:47 +0100 268)     # This has a shape but is not sliceable
928fe68418 (Simon Conseil      2017-09-22 00:08:49 +0200 269)     class Shape:
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 270)         def __init__(self):
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 271)             self.shape = 5
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 272) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 273)         def __repr__(self):
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 274)             return '7'
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 275) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 276)     with pytest.raises(TypeError):
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 277)         NDData(Shape())
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 278) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 279) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 280) def test_nddata_init_data_fakes():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 281)     ndd1 = NDData(FakeNumpyArray())
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 282)     # First make sure that NDData isn't converting its data to a numpy array.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 283)     assert isinstance(ndd1.data, FakeNumpyArray)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 284)     # Make a new NDData initialized from an NDData
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 285)     ndd2 = NDData(ndd1)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 286)     # Check that the data wasn't converted to numpy
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 287)     assert isinstance(ndd2.data, FakeNumpyArray)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 288) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 289) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 290) # Specific parameters
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 291) def test_param_uncertainty():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 292)     u = StdDevUncertainty(array=np.ones((5, 5)))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 293)     d = NDData(np.ones((5, 5)), uncertainty=u)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 294)     # Test that the parent_nddata is set.
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 295)     assert d.uncertainty.parent_nddata is d
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 296)     # Test conflicting uncertainties (other NDData)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 297)     u2 = StdDevUncertainty(array=np.ones((5, 5))*2)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 298)     d2 = NDData(d, uncertainty=u2)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 299)     assert d2.uncertainty is u2
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 300)     assert d2.uncertainty.parent_nddata is d2
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 301) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 302) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 303) def test_param_wcs():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 304)     # Since everything is allowed we only need to test something
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 305)     nd = NDData([1], wcs=WCS(naxis=1))
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 306)     assert nd.wcs is not None
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 307)     # Test conflicting wcs (other NDData)
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 308)     nd2 = NDData(nd, wcs=WCS(naxis=1))
b66a694da7 (Michael Seifert    2019-09-24 20:36:57 +0200 309)     assert nd2.wcs is not None and nd2.wcs is not nd.wcs
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 310) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 311) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 312) def test_param_meta():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 313)     # everything dict-like is allowed
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 314)     with pytest.raises(TypeError):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 315)         NDData([1], meta=3)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 316)     nd = NDData([1, 2, 3], meta={})
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 317)     assert len(nd.meta) == 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 318)     nd = NDData([1, 2, 3])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 319)     assert isinstance(nd.meta, OrderedDict)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 320)     assert len(nd.meta) == 0
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 321)     # Test conflicting meta (other NDData)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 322)     nd2 = NDData(nd, meta={'image': 'sun'})
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 323)     assert len(nd2.meta) == 1
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 324)     nd3 = NDData(nd2, meta={'image': 'moon'})
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 325)     assert len(nd3.meta) == 1
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 326)     assert nd3.meta['image'] == 'moon'
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 327) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 328) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 329) def test_param_mask():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 330)     # Since everything is allowed we only need to test something
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 331)     nd = NDData([1], mask=False)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 332)     assert not nd.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 333)     # Test conflicting mask (other NDData)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 334)     nd2 = NDData(nd, mask=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 335)     assert nd2.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 336)     # (masked array)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 337)     nd3 = NDData(np.ma.array([1], mask=False), mask=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 338)     assert nd3.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 339)     # (masked quantity)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 340)     mq = np.ma.array(np.array([2, 3])*u.m, mask=False)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 341)     nd4 = NDData(mq, mask=True)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 342)     assert nd4.mask
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 343) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 344) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 345) def test_param_unit():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 346)     with pytest.raises(ValueError):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 347)         NDData(np.ones((5, 5)), unit="NotAValidUnit")
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 348)     NDData([1, 2, 3], unit='meter')
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 349)     # Test conflicting units (quantity as data)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 350)     q = np.array([1, 2, 3]) * u.m
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 351)     nd = NDData(q, unit='cm')
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 352)     assert nd.unit != q.unit
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 353)     assert nd.unit == u.cm
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 354)     # (masked quantity)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 355)     mq = np.ma.array(np.array([2, 3])*u.m, mask=False)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 356)     nd2 = NDData(mq, unit=u.s)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 357)     assert nd2.unit == u.s
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 358)     # (another NDData as data)
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 359)     nd3 = NDData(nd, unit='km')
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 360)     assert nd3.unit == u.km
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 361) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 362) 
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 363) def test_pickle_nddata_with_uncertainty():
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 364)     ndd = NDData(np.ones(3),
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 365)                  uncertainty=StdDevUncertainty(np.ones(5), unit=u.m),
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 366)                  unit=u.m)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 367)     ndd_dumped = pickle.dumps(ndd)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 368)     ndd_restored = pickle.loads(ndd_dumped)
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 369)     assert type(ndd_restored.uncertainty) is StdDevUncertainty
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 370)     assert ndd_restored.uncertainty.parent_nddata is ndd_restored
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 371)     assert ndd_restored.uncertainty.unit == u.m
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 372) 
4bdede90a0 (Michael Seifert    2018-04-16 23:17:45 +0200 373) 
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 374) def test_pickle_uncertainty_only():
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 375)     ndd = NDData(np.ones(3),
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 376)                  uncertainty=StdDevUncertainty(np.ones(5), unit=u.m),
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 377)                  unit=u.m)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 378)     uncertainty_dumped = pickle.dumps(ndd.uncertainty)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 379)     uncertainty_restored = pickle.loads(uncertainty_dumped)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 380)     np.testing.assert_array_equal(ndd.uncertainty.array,
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 381)                                   uncertainty_restored.array)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 382)     assert ndd.uncertainty.unit == uncertainty_restored.unit
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 383)     # Even though it has a parent there is no one that references the parent
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 384)     # after unpickling so the weakref "dies" immediately after unpickling
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 385)     # finishes.
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 386)     assert uncertainty_restored.parent_nddata is None
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 387) 
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 388) 
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 389) def test_pickle_nddata_without_uncertainty():
f3df211805 (Matthew Craig      2018-10-25 21:14:37 -0500 390)     ndd = NDData(np.ones(3), unit=u.m)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 391)     dumped = pickle.dumps(ndd)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 392)     ndd_restored = pickle.loads(dumped)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 393)     np.testing.assert_array_equal(ndd.data, ndd_restored.data)
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 394) 
61503a75ff (Michael Seifert    2018-08-05 15:08:23 +0200 395) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 396) # Check that the meta descriptor is working as expected. The MetaBaseTest class
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 397) # takes care of defining all the tests, and we simply have to define the class
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 398) # and any minimal set of args to pass.
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000 399) from astropy.utils.tests.test_metadata import MetaBaseTest
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 400) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 401) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 402) class TestMetaNDData(MetaBaseTest):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 403)     test_class = NDData
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 404)     args = np.array([[1.]])
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 405) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 406) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 407) # Representation tests
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 408) def test_nddata_str():
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 409)     arr1d = NDData(np.array([1, 2, 3]))
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 410)     assert str(arr1d) == '[1 2 3]'
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 411) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 412)     arr2d = NDData(np.array([[1, 2], [3, 4]]))
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 413)     assert str(arr2d) == textwrap.dedent("""
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 414)         [[1 2]
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 415)          [3 4]]"""[1:])
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 416) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 417)     arr3d = NDData(np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]))
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 418)     assert str(arr3d) == textwrap.dedent("""
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 419)         [[[1 2]
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 420)           [3 4]]
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 421) 
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 422)          [[5 6]
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 423)           [7 8]]]"""[1:])
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 424) 
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 425)     # let's add units!
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 426)     arr = NDData(np.array([1, 2, 3]), unit="km")
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 427)     assert str(arr) == '[1 2 3] km'
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 428) 
96386fcc23 (Nathaniel Starkman 2021-04-13 14:54:56 -0400 429)     # what if it had these units?
96386fcc23 (Nathaniel Starkman 2021-04-13 14:54:56 -0400 430)     arr = NDData(np.array([1, 2, 3]), unit="erg cm^-2 s^-1 A^-1")
96386fcc23 (Nathaniel Starkman 2021-04-13 14:54:56 -0400 431)     assert str(arr) == '[1 2 3] erg / (A cm2 s)'
96386fcc23 (Nathaniel Starkman 2021-04-13 14:54:56 -0400 432) 
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 433) 
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 434) def test_nddata_repr():
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 435)     # The big test is eval(repr()) should be equal to the original!
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 436) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 437)     arr1d = NDData(np.array([1, 2, 3]))
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 438)     s = repr(arr1d)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 439)     assert s == 'NDData([1, 2, 3])'
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 440)     got = eval(s)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 441)     assert np.all(got.data == arr1d.data)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 442)     assert got.unit == arr1d.unit
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 443) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 444)     arr2d = NDData(np.array([[1, 2], [3, 4]]))
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 445)     s = repr(arr2d)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 446)     assert s == textwrap.dedent("""
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 447)         NDData([[1, 2],
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 448)                 [3, 4]])"""[1:])
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 449)     got = eval(s)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 450)     assert np.all(got.data == arr2d.data)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 451)     assert got.unit == arr2d.unit
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 452) 
a8853fbcdf (Matthew Craig      2014-11-30 20:59:13 -0600 453)     arr3d = NDData(np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]]))
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 454)     s = repr(arr3d)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 455)     assert s == textwrap.dedent("""
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 456)         NDData([[[1, 2],
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 457)                  [3, 4]],
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 458) 
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 459)                 [[5, 6],
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 460)                  [7, 8]]])"""[1:])
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 461)     got = eval(s)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 462)     assert np.all(got.data == arr3d.data)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 463)     assert got.unit == arr3d.unit
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 464) 
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 465)     # let's add units!
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 466)     arr = NDData(np.array([1, 2, 3]), unit="km")
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 467)     s = repr(arr)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 468)     assert s == "NDData([1, 2, 3], unit='km')"
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 469)     got = eval(s)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 470)     assert np.all(got.data == arr.data)
41eb906180 (Nathaniel Starkman 2021-04-13 14:31:48 -0400 471)     assert got.unit == arr.unit
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 472) 
f1f6cba222 (E. Madison Bray    2013-08-01 16:54:28 -0400 473) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 474) # Not supported features
2991815d0e (Matthew Craig      2014-11-28 19:40:09 -0600 475) def test_slicing_not_supported():
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 476)     ndd = NDData(np.ones((5, 5)))
2991815d0e (Matthew Craig      2014-11-28 19:40:09 -0600 477)     with pytest.raises(TypeError):
2991815d0e (Matthew Craig      2014-11-28 19:40:09 -0600 478)         ndd[0]
7a004f3015 (Matthew Craig      2014-05-01 23:23:27 -0500 479) 
7a004f3015 (Matthew Craig      2014-05-01 23:23:27 -0500 480) 
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 481) def test_arithmetic_not_supported():
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 482)     ndd = NDData(np.ones((5, 5)))
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 483)     with pytest.raises(TypeError):
718e11dfb0 (Michael Seifert    2015-10-25 20:29:58 +0100 484)         ndd + ndd
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 485) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 486) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 487) def test_nddata_wcs_setter_error_cases():
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 488)     ndd = NDData(np.ones((5, 5)))
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 489) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 490)     # Setting with a non-WCS should raise an error
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 491)     with pytest.raises(TypeError):
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 492)         ndd.wcs = "I am not a WCS"
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 493) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 494)     naxis = 2
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 495)     # This should succeed since the WCS is currently None
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 496)     ndd.wcs = nd_testing._create_wcs_simple(naxis=naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 497)                                             ctype=['deg'] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 498)                                             crpix=[0] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 499)                                             crval=[10] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 500)                                             cdelt=[1] * naxis)
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 501)     with pytest.raises(ValueError):
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 502)         # This should fail since the WCS is not None
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 503)         ndd.wcs = nd_testing._create_wcs_simple(naxis=naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 504)                                                 ctype=['deg'] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 505)                                                 crpix=[0] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 506)                                                 crval=[10] * naxis,
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 507)                                                 cdelt=[1] * naxis)
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 508) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 509) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 510) def test_nddata_wcs_setter_with_low_level_wcs():
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 511)     ndd = NDData(np.ones((5, 5)))
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 512)     wcs = WCS()
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 513)     # If the wcs property is set with a low level WCS it should get
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 514)     # wrapped to high level.
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 515)     low_level = SlicedLowLevelWCS(wcs, 5)
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 516)     assert not isinstance(low_level, BaseHighLevelWCS)
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 517) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 518)     ndd.wcs = low_level
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 519) 
e9abe58578 (Matthew Craig      2019-10-26 20:26:21 -0500 520)     assert isinstance(ndd.wcs, BaseHighLevelWCS)
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 521) 
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 522) 
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 523) def test_nddata_init_with_low_level_wcs():
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 524)     wcs = WCS()
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 525)     low_level = SlicedLowLevelWCS(wcs, 5)
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 526)     ndd = NDData(np.ones((5, 5)), wcs=low_level)
6e7a2a684a (Stuart Mumford     2021-07-28 17:19:40 +0100 527)     assert isinstance(ndd.wcs, BaseHighLevelWCS)
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 528) 
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 529) 
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 530) class NDDataCustomWCS(NDData):
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 531)     @property
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 532)     def wcs(self):
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 533)         return WCS()
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 534) 
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 535) 
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 536) def test_overriden_wcs():
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 537)     # Check that a sub-class that overrides `.wcs` without providing a setter
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 538)     # works
34e1c80fae (David Stansby      2021-10-22 09:36:59 +0100 539)     NDDataCustomWCS(np.ones((5, 5)))
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100   2) 
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200   3) import pickle
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200   4) 
796bed9983 (Thomas Robitaille 2017-01-13 16:39:34 +0000   5) import pytest
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100   6) import numpy as np
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100   7) from numpy.testing import assert_array_equal
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100   8) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   9) from astropy.nddata.nduncertainty import (StdDevUncertainty,
1add626fe7 (Matthew Craig     2017-12-11 12:38:53 -0600  10)                              VarianceUncertainty,
1f7f924f80 (Matthew Craig     2018-07-02 15:17:55 -0500  11)                              InverseVariance,
1add626fe7 (Matthew Craig     2017-12-11 12:38:53 -0600  12)                              NDUncertainty,
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  13)                              IncompatibleUncertaintiesException,
29b100ed84 (Matthew Craig     2018-10-25 21:14:23 -0500  14)                              MissingDataAssociationException,
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  15)                              UnknownUncertainty)
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  16) from astropy.nddata.nddata import NDData
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  17) from astropy.nddata.compat import NDDataArray
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  18) from astropy.nddata.ccddata import CCDData
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  19) from astropy import units as u
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  20) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  21) # Regarding setter tests:
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  22) # No need to test setters since the uncertainty is considered immutable after
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  23) # creation except of the parent_nddata attribute and this accepts just
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  24) # everything.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  25) # Additionally they should be covered by NDData, NDArithmeticMixin which rely
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  26) # on it
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  27) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  28) # Regarding propagate, _convert_uncert, _propagate_* tests:
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  29) # They should be covered by NDArithmeticMixin since there is generally no need
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  30) # to test them without this mixin.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  31) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  32) # Regarding __getitem__ tests:
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  33) # Should be covered by NDSlicingMixin.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  34) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  35) # Regarding StdDevUncertainty tests:
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  36) # This subclass only overrides the methods for propagation so the same
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  37) # they should be covered in NDArithmeticMixin.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  38) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  39) # Not really fake but the minimum an uncertainty has to override not to be
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  40) # abstract.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  41) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  42) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  43) class FakeUncertainty(NDUncertainty):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  44) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  45)     @property
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  46)     def uncertainty_type(self):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  47)         return 'fake'
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  48) 
73882ece05 (Matthew Craig     2018-10-15 09:32:01 -0500  49)     def _data_unit_to_uncertainty_unit(self, value):
73882ece05 (Matthew Craig     2018-10-15 09:32:01 -0500  50)         return None
73882ece05 (Matthew Craig     2018-10-15 09:32:01 -0500  51) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  52)     def _propagate_add(self, data, final_data):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  53)         pass
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  54) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  55)     def _propagate_subtract(self, data, final_data):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  56)         pass
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  57) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  58)     def _propagate_multiply(self, data, final_data):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  59)         pass
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  60) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  61)     def _propagate_divide(self, data, final_data):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  62)         pass
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  63) 
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  64) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  65) # Test the fake (added also StdDevUncertainty which should behave identical)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  66) 
1f685821ed (Erik Tollerud     2018-08-03 10:44:41 -0400  67) # the list of classes used for parametrization in tests below
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  68) uncertainty_types_to_be_tested = [
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  69)     FakeUncertainty,
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  70)     StdDevUncertainty,
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  71)     VarianceUncertainty,
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  72)     InverseVariance,
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  73)     UnknownUncertainty
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  74) ]
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500  75) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  76) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400  77) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  78) def test_init_fake_with_list(UncertClass):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  79)     fake_uncert = UncertClass([1, 2, 3])
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  80)     assert_array_equal(fake_uncert.array, np.array([1, 2, 3]))
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  81)     # Copy makes no difference since casting a list to an np.ndarray always
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  82)     # makes a copy.
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  83)     # But let's give the uncertainty a unit too
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  84)     fake_uncert = UncertClass([1, 2, 3], unit=u.adu)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  85)     assert_array_equal(fake_uncert.array, np.array([1, 2, 3]))
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  86)     assert fake_uncert.unit is u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  87) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  88) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400  89) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  90) def test_init_fake_with_ndarray(UncertClass):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  91)     uncert = np.arange(100).reshape(10, 10)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  92)     fake_uncert = UncertClass(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  93)     # Numpy Arrays are copied by default
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  94)     assert_array_equal(fake_uncert.array, uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  95)     assert fake_uncert.array is not uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  96)     # Now try it without copy
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  97)     fake_uncert = UncertClass(uncert, copy=False)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  98)     assert fake_uncert.array is uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100  99)     # let's provide a unit
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 100)     fake_uncert = UncertClass(uncert, unit=u.adu)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 101)     assert_array_equal(fake_uncert.array, uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 102)     assert fake_uncert.array is not uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 103)     assert fake_uncert.unit is u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 104) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 105) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400 106) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 107) def test_init_fake_with_quantity(UncertClass):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 108)     uncert = np.arange(10).reshape(2, 5) * u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 109)     fake_uncert = UncertClass(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 110)     # Numpy Arrays are copied by default
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 111)     assert_array_equal(fake_uncert.array, uncert.value)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 112)     assert fake_uncert.array is not uncert.value
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 113)     assert fake_uncert.unit is u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 114)     # Try without copy (should not work, quantity.value always returns a copy)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 115)     fake_uncert = UncertClass(uncert, copy=False)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 116)     assert fake_uncert.array is not uncert.value
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 117)     assert fake_uncert.unit is u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 118)     # Now try with an explicit unit parameter too
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 119)     fake_uncert = UncertClass(uncert, unit=u.m)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 120)     assert_array_equal(fake_uncert.array, uncert.value)  # No conversion done
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 121)     assert fake_uncert.array is not uncert.value
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 122)     assert fake_uncert.unit is u.m  # It took the explicit one
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 123) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 124) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400 125) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 126) def test_init_fake_with_fake(UncertClass):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 127)     uncert = np.arange(5).reshape(5, 1)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 128)     fake_uncert1 = UncertClass(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 129)     fake_uncert2 = UncertClass(fake_uncert1)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 130)     assert_array_equal(fake_uncert2.array, uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 131)     assert fake_uncert2.array is not uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 132)     # Without making copies
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 133)     fake_uncert1 = UncertClass(uncert, copy=False)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 134)     fake_uncert2 = UncertClass(fake_uncert1, copy=False)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 135)     assert_array_equal(fake_uncert2.array, fake_uncert1.array)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 136)     assert fake_uncert2.array is fake_uncert1.array
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 137)     # With a unit
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 138)     uncert = np.arange(5).reshape(5, 1) * u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 139)     fake_uncert1 = UncertClass(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 140)     fake_uncert2 = UncertClass(fake_uncert1)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 141)     assert_array_equal(fake_uncert2.array, uncert.value)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 142)     assert fake_uncert2.array is not uncert.value
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 143)     assert fake_uncert2.unit is u.adu
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 144)     # With a unit and an explicit unit-parameter
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 145)     fake_uncert2 = UncertClass(fake_uncert1, unit=u.cm)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 146)     assert_array_equal(fake_uncert2.array, uncert.value)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 147)     assert fake_uncert2.array is not uncert.value
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 148)     assert fake_uncert2.unit is u.cm
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 149) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 150) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400 151) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 152) def test_init_fake_with_somethingElse(UncertClass):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 153)     # What about a dict?
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 154)     uncert = {'rdnoise': 2.9, 'gain': 0.6}
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 155)     fake_uncert = UncertClass(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 156)     assert fake_uncert.array == uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 157)     # We can pass a unit too but since we cannot do uncertainty propagation
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 158)     # the interpretation is up to the user
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 159)     fake_uncert = UncertClass(uncert, unit=u.s)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 160)     assert fake_uncert.array == uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 161)     assert fake_uncert.unit is u.s
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 162)     # So, now check what happens if copy is False
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 163)     fake_uncert = UncertClass(uncert, copy=False)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 164)     assert fake_uncert.array == uncert
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 165)     assert id(fake_uncert) != id(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 166)     # dicts cannot be referenced without copy
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 167)     # TODO : Find something that can be referenced without copy :-)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 168) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 169) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 170) def test_init_fake_with_StdDevUncertainty():
774e837d43 (Michael Seifert   2016-05-12 15:53:27 +0200 171)     # Different instances of uncertainties are not directly convertible so this
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 172)     # should fail
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 173)     uncert = np.arange(5).reshape(5, 1)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 174)     std_uncert = StdDevUncertainty(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 175)     with pytest.raises(IncompatibleUncertaintiesException):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 176)         FakeUncertainty(std_uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 177)     # Ok try it the other way around
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 178)     fake_uncert = FakeUncertainty(uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 179)     with pytest.raises(IncompatibleUncertaintiesException):
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 180)         StdDevUncertainty(fake_uncert)
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 181) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 182) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 183) def test_uncertainty_type():
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 184)     fake_uncert = FakeUncertainty([10, 2])
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 185)     assert fake_uncert.uncertainty_type == 'fake'
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 186)     std_uncert = StdDevUncertainty([10, 2])
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 187)     assert std_uncert.uncertainty_type == 'std'
1add626fe7 (Matthew Craig     2017-12-11 12:38:53 -0600 188)     var_uncert = VarianceUncertainty([10, 2])
1add626fe7 (Matthew Craig     2017-12-11 12:38:53 -0600 189)     assert var_uncert.uncertainty_type == 'var'
1f7f924f80 (Matthew Craig     2018-07-02 15:17:55 -0500 190)     ivar_uncert = InverseVariance([10, 2])
1f7f924f80 (Matthew Craig     2018-07-02 15:17:55 -0500 191)     assert ivar_uncert.uncertainty_type == 'ivar'
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 192) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 193) 
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 194) def test_uncertainty_correlated():
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 195)     fake_uncert = FakeUncertainty([10, 2])
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 196)     assert not fake_uncert.supports_correlated
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 197)     std_uncert = StdDevUncertainty([10, 2])
6d15a57b1f (Michael Seifert   2015-10-25 22:06:55 +0100 198)     assert std_uncert.supports_correlated
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 199) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 200) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 201) def test_for_leak_with_uncertainty():
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 202)     # Regression test for memory leak because of cyclic references between
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 203)     # NDData and uncertainty
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 204)     from collections import defaultdict
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 205)     from gc import get_objects
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 206) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 207)     def test_leak(func, specific_objects=None):
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 208)         """Function based on gc.get_objects to determine if any object or
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 209)         a specific object leaks.
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 210) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 211)         It requires a function to be given and if any objects survive the
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 212)         function scope it's considered a leak (so don't return anything).
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 213)         """
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 214)         before = defaultdict(int)
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 215)         for i in get_objects():
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 216)             before[type(i)] += 1
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 217) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 218)         func()
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 219) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 220)         after = defaultdict(int)
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 221)         for i in get_objects():
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 222)             after[type(i)] += 1
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 223) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 224)         if specific_objects is None:
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 225)             assert all(after[k] - before[k] == 0 for k in after)
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 226)         else:
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 227)             assert after[specific_objects] - before[specific_objects] == 0
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 228) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 229)     def non_leaker_nddata():
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 230)         # Without uncertainty there is no reason to assume that there is a
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 231)         # memory leak but test it nevertheless.
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 232)         NDData(np.ones(100))
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 233) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 234)     def leaker_nddata():
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 235)         # With uncertainty there was a memory leak!
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 236)         NDData(np.ones(100), uncertainty=StdDevUncertainty(np.ones(100)))
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 237) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 238)     test_leak(non_leaker_nddata, NDData)
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 239)     test_leak(leaker_nddata, NDData)
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 240) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 241)     # Same for NDDataArray:
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 242) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000 243)     from astropy.nddata.compat import NDDataArray
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 244) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 245)     def non_leaker_nddataarray():
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 246)         NDDataArray(np.ones(100))
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 247) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 248)     def leaker_nddataarray():
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 249)         NDDataArray(np.ones(100), uncertainty=StdDevUncertainty(np.ones(100)))
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 250) 
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 251)     test_leak(non_leaker_nddataarray, NDDataArray)
82f5cd5090 (Michael Seifert   2016-05-15 18:58:08 +0200 252)     test_leak(leaker_nddataarray, NDDataArray)
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 253) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 254) 
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 255) def test_for_stolen_uncertainty():
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 256)     # Sharing uncertainties should not overwrite the parent_nddata attribute
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 257)     ndd1 = NDData(1, uncertainty=1)
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 258)     ndd2 = NDData(2, uncertainty=ndd1.uncertainty)
10eaa80bff (Michael Seifert   2016-05-11 00:28:30 +0200 259)     # uncertainty.parent_nddata.data should be the original data!
3fa82562b5 (Michael Seifert   2016-05-11 00:06:44 +0200 260)     assert ndd1.uncertainty.parent_nddata.data == ndd1.data
f22b038bfc (Matthew Craig     2018-10-15 08:40:53 -0500 261)     assert ndd2.uncertainty.parent_nddata.data == ndd2.data
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 262) 
f0ea63859d (Brigitta Sipőcz   2019-06-24 19:14:19 -0700 263) 
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 264) def test_stddevuncertainty_pickle():
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 265)     uncertainty = StdDevUncertainty(np.ones(3), unit=u.m)
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 266)     uncertainty_restored = pickle.loads(pickle.dumps(uncertainty))
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 267)     np.testing.assert_array_equal(uncertainty.array, uncertainty_restored.array)
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 268)     assert uncertainty.unit == uncertainty_restored.unit
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 269)     with pytest.raises(MissingDataAssociationException):
61503a75ff (Michael Seifert   2018-08-05 15:08:23 +0200 270)         uncertainty_restored.parent_nddata
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 271) 
f0ea63859d (Brigitta Sipőcz   2019-06-24 19:14:19 -0700 272) 
4c27541932 (Erik Tollerud     2018-08-06 23:27:30 -0400 273) @pytest.mark.parametrize(('UncertClass'), uncertainty_types_to_be_tested)
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 274) def test_quantity(UncertClass):
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 275)     fake_uncert = UncertClass([1, 2, 3], unit=u.adu)
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 276)     assert isinstance(fake_uncert.quantity, u.Quantity)
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 277)     assert fake_uncert.quantity.unit.is_equivalent(u.adu)
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 278) 
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 279)     fake_uncert_nounit = UncertClass([1, 2, 3])
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 280)     assert isinstance(fake_uncert_nounit.quantity, u.Quantity)
92614d0b06 (Erik Tollerud     2018-08-03 10:45:12 -0400 281)     assert fake_uncert_nounit.quantity.unit.is_equivalent(u.dimensionless_unscaled)
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 282) 
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 283) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 284) @pytest.mark.parametrize(('UncertClass'),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 285)                          [VarianceUncertainty,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 286)                           StdDevUncertainty,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 287)                           InverseVariance])
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 288) def test_setting_uncertainty_unit_results_in_unit_object(UncertClass):
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 289)     v = UncertClass([1, 1])
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 290)     v.unit = 'electron'
7132354d03 (Matthew Craig     2018-10-14 21:21:08 -0500 291)     assert isinstance(v.unit, u.UnitBase)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 292) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 293) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 294) @pytest.mark.parametrize('NDClass', [NDData, NDDataArray, CCDData])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 295) @pytest.mark.parametrize(('UncertClass'),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 296)                          [VarianceUncertainty,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 297)                           StdDevUncertainty,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 298)                           InverseVariance])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 299) def test_changing_unit_to_value_inconsistent_with_parent_fails(NDClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 300)                                                                UncertClass):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 301)     ndd1 = NDClass(1, unit='adu')
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 302)     v = UncertClass(1)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 303)     # Sets the uncertainty unit to whatever makes sense with this data.
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 304)     ndd1.uncertainty = v
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 305) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 306)     with pytest.raises(u.UnitConversionError):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 307)         # Nothing special about 15 except no one would ever use that unit
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 308)         v.unit = ndd1.unit ** 15
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 309) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 310) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 311) @pytest.mark.parametrize('NDClass', [NDData, NDDataArray, CCDData])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 312) @pytest.mark.parametrize(('UncertClass, expected_unit'),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 313)                          [(VarianceUncertainty, u.adu ** 2),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 314)                           (StdDevUncertainty, u.adu),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 315)                           (InverseVariance, 1 / u.adu ** 2)])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 316) def test_assigning_uncertainty_to_parent_gives_correct_unit(NDClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 317)                                                             UncertClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 318)                                                             expected_unit):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 319)     # Does assigning a unitless uncertainty to an NDData result in the
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 320)     # expected unit?
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 321)     ndd = NDClass([1, 1], unit=u.adu)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 322)     v = UncertClass([1, 1])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 323)     ndd.uncertainty = v
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 324)     assert v.unit == expected_unit
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 325) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 326) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 327) @pytest.mark.parametrize('NDClass', [NDData, NDDataArray, CCDData])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 328) @pytest.mark.parametrize(('UncertClass, expected_unit'),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 329)                          [(VarianceUncertainty, u.adu ** 2),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 330)                           (StdDevUncertainty, u.adu),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 331)                           (InverseVariance, 1 / u.adu ** 2)])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 332) def test_assigning_uncertainty_with_unit_to_parent_with_unit(NDClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 333)                                                              UncertClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 334)                                                              expected_unit):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 335)     # Does assigning an uncertainty with an appropriate unit to an NDData
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 336)     # with a unit work?
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 337)     ndd = NDClass([1, 1], unit=u.adu)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 338)     v = UncertClass([1, 1], unit=expected_unit)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 339)     ndd.uncertainty = v
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 340)     assert v.unit == expected_unit
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 341) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 342) 
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 343) @pytest.mark.parametrize('NDClass', [NDData, NDDataArray, CCDData])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 344) @pytest.mark.parametrize(('UncertClass'),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 345)                          [(VarianceUncertainty),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 346)                           (StdDevUncertainty),
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 347)                           (InverseVariance)])
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 348) def test_assigning_uncertainty_with_bad_unit_to_parent_fails(NDClass,
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 349)                                                              UncertClass):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 350)     # Does assigning an uncertainty with a non-matching unit to an NDData
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 351)     # with a unit work?
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 352)     ndd = NDClass([1, 1], unit=u.adu)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 353)     # Set the unit to something inconsistent with ndd's unit
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 354)     v = UncertClass([1, 1], unit=u.second)
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 355)     with pytest.raises(u.UnitConversionError):
e484ec8fa9 (Matthew Craig     2018-10-15 08:33:21 -0500 356)         ndd.uncertainty = v
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   2) # This module contains tests of a class equivalent to pre-1.0 NDData.
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   3) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   4) 
796bed9983 (Thomas Robitaille 2017-01-13 16:39:34 +0000   5) import pytest
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   6) import numpy as np
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600   7) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   8) from astropy.nddata.nddata import NDData
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   9) from astropy.nddata.compat import NDDataArray
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  10) from astropy.nddata.nduncertainty import StdDevUncertainty
b66a694da7 (Michael Seifert   2019-09-24 20:36:57 +0200  11) from astropy.wcs import WCS
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  12) from astropy import units as u
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  13) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  14) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  15) NDDATA_ATTRIBUTES = ['mask', 'flags', 'uncertainty', 'unit', 'shape', 'size',
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  16)                      'dtype', 'ndim', 'wcs', 'convert_unit_to']
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  17) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  18) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  19) def test_nddataarray_has_attributes_of_old_nddata():
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  20)     ndd = NDDataArray([1, 2, 3])
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  21)     for attr in NDDATA_ATTRIBUTES:
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  22)         assert hasattr(ndd, attr)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  23) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  24) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  25) def test_nddata_simple():
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  26)     nd = NDDataArray(np.zeros((10, 10)))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  27)     assert nd.shape == (10, 10)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  28)     assert nd.size == 100
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  29)     assert nd.dtype == np.dtype(float)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  30) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  31) 
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  32) def test_nddata_parameters():
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  33)     # Test for issue 4620
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  34)     nd = NDDataArray(data=np.zeros((10, 10)))
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  35)     assert nd.shape == (10, 10)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  36)     assert nd.size == 100
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  37)     assert nd.dtype == np.dtype(float)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  38)     # Change order; `data` has to be given explicitly here
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  39)     nd = NDDataArray(meta={}, data=np.zeros((10, 10)))
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  40)     assert nd.shape == (10, 10)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  41)     assert nd.size == 100
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  42)     assert nd.dtype == np.dtype(float)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  43)     # Pass uncertainty as second implicit argument
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  44)     data = np.zeros((10, 10))
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  45)     uncertainty = StdDevUncertainty(0.1 + np.zeros_like(data))
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  46)     nd = NDDataArray(data, uncertainty)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  47)     assert nd.shape == (10, 10)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  48)     assert nd.size == 100
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  49)     assert nd.dtype == np.dtype(float)
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  50)     assert nd.uncertainty == uncertainty
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  51) 
cc4e93035b (Evert Rol         2016-02-22 16:23:46 +1100  52) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  53) def test_nddata_conversion():
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  54)     nd = NDDataArray(np.array([[1, 2, 3], [4, 5, 6]]))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  55)     assert nd.size == 6
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  56)     assert nd.dtype == np.dtype(int)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  57) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  58) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  59) @pytest.mark.parametrize('flags_in', [
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  60)                          np.array([True, False]),
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  61)                          np.array([1, 0]),
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  62)                          [True, False],
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  63)                          [1, 0],
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  64)                          np.array(['a', 'b']),
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  65)                          ['a', 'b']])
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  66) def test_nddata_flags_init_without_np_array(flags_in):
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  67)     ndd = NDDataArray([1, 1], flags=flags_in)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  68)     assert (ndd.flags == flags_in).all()
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  69) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  70) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  71) @pytest.mark.parametrize(('shape'), [(10,), (5, 5), (3, 10, 10)])
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  72) def test_nddata_flags_invalid_shape(shape):
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  73)     with pytest.raises(ValueError) as exc:
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  74)         NDDataArray(np.zeros((10, 10)), flags=np.ones(shape))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  75)     assert exc.value.args[0] == 'dimensions of flags do not match data'
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  76) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  77) 
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  78) def test_convert_unit_to():
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  79)     # convert_unit_to should return a copy of its input
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  80)     d = NDDataArray(np.ones((5, 5)))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  81)     d.unit = 'km'
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  82)     d.uncertainty = StdDevUncertainty(0.1 + np.zeros_like(d))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  83)     # workaround because zeros_like does not support dtype arg until v1.6
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  84)     # and NDData accepts only bool ndarray as mask
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  85)     tmp = np.zeros_like(d.data)
ebd0477d26 (Michael Seifert   2017-09-24 22:31:43 +0200  86)     d.mask = np.array(tmp, dtype=bool)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  87)     d1 = d.convert_unit_to('m')
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  88)     assert np.all(d1.data == np.array(1000.0))
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  89)     assert np.all(d1.uncertainty.array == 1000.0 * d.uncertainty.array)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  90)     assert d1.unit == u.m
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  91)     # changing the output mask should not change the original
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  92)     d1.mask[0, 0] = True
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  93)     assert d.mask[0, 0] != d1.mask[0, 0]
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  94)     d.flags = np.zeros_like(d.data)
4c64b79fff (Matthew Craig     2015-02-09 13:15:08 -0600  95)     d1 = d.convert_unit_to('m')
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600  96) 
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600  97) 
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600  98) # check that subclasses can require wcs and/or unit to be present and use
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600  99) # _arithmetic and convert_unit_to
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 100) class SubNDData(NDDataArray):
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 101)     """
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 102)     Subclass for test initialization of subclasses in NDData._arithmetic and
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 103)     NDData.convert_unit_to
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 104)     """
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 105)     def __init__(self, *arg, **kwd):
ecfc6c2a69 (Michael Seifert   2017-09-26 22:38:57 +0200 106)         super().__init__(*arg, **kwd)
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 107)         if self.unit is None:
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 108)             raise ValueError("Unit for subclass must be specified")
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 109)         if self.wcs is None:
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 110)             raise ValueError("WCS for subclass must be specified")
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 111) 
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 112) 
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 113) def test_init_of_subclass_in_convert_unit_to():
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 114)     data = np.ones([10, 10])
b66a694da7 (Michael Seifert   2019-09-24 20:36:57 +0200 115)     arr1 = SubNDData(data, unit='m', wcs=WCS(naxis=2))
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 116)     result = arr1.convert_unit_to('km')
2d5f25a036 (Matthew Craig     2015-02-09 13:22:12 -0600 117)     np.testing.assert_array_equal(arr1.data, 1000 * result.data)
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 118) 
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 119) 
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 120) # Test for issue #4129:
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 121) def test_nddataarray_from_nddataarray():
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 122)     ndd1 = NDDataArray([1., 4., 9.],
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 123)                        uncertainty=StdDevUncertainty([1., 2., 3.]),
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 124)                        flags=[0, 1, 0])
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 125)     ndd2 = NDDataArray(ndd1)
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 126)     # Test that the 2 instances point to the same objects and aren't just
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 127)     # equal; this is explicitly documented for the main data array and we
4e26af9776 (Thomas Robitaille 2018-10-21 18:00:38 +0100 128)     # probably want to catch any future change in behavior for the other
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 129)     # attributes too and ensure they are intentional.
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 130)     assert ndd2.data is ndd1.data
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 131)     assert ndd2.uncertainty is ndd1.uncertainty
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 132)     assert ndd2.flags is ndd1.flags
840809e5fa (Michael Seifert   2016-01-19 22:27:11 +0100 133)     assert ndd2.meta == ndd1.meta
19f9adb828 (James Turner      2015-09-08 13:11:36 -0300 134) 
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 135) 
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 136) # Test for issue #4137:
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 137) def test_nddataarray_from_nddata():
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 138)     ndd1 = NDData([1., 4., 9.],
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 139)                   uncertainty=StdDevUncertainty([1., 2., 3.]))
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 140)     ndd2 = NDDataArray(ndd1)
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 141) 
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 142)     assert ndd2.data is ndd1.data
c8ac9687e8 (James Turner      2015-09-08 20:26:22 -0300 143)     assert ndd2.uncertainty is ndd1.uncertainty
840809e5fa (Michael Seifert   2016-01-19 22:27:11 +0100 144)     assert ndd2.meta == ndd1.meta
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400   1) """
4027356d37 (luz paz           2021-10-08 22:33:06 -0400   2) A module containing unit tests for the `bitmask` module.
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400   3) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400   4) Licensed under a 3-clause BSD style license - see LICENSE.rst
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400   5) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400   6) """
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400   7) import warnings
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400   8) import numpy as np
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400   9) import pytest
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400  10) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  11) from astropy.nddata import bitmask
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  12) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  13) 
451fe49ee0 (Michael Seifert   2019-11-04 22:04:40 +0100  14) MAX_INT_TYPE = np.maximum_sctype(np.int_)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  15) MAX_UINT_TYPE = np.maximum_sctype(np.uint)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  16) MAX_UINT_FLAG = np.left_shift(
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  17)     MAX_UINT_TYPE(1),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  18)     MAX_UINT_TYPE(np.iinfo(MAX_UINT_TYPE).bits - 1)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  19) )
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  20) MAX_INT_FLAG = np.left_shift(
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  21)     MAX_INT_TYPE(1),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  22)     MAX_INT_TYPE(np.iinfo(MAX_INT_TYPE).bits - 2)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  23) )
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  24) SUPER_LARGE_FLAG = 1 << np.iinfo(MAX_UINT_TYPE).bits
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  25) EXTREME_TEST_DATA = np.array([
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  26)         0, 1, 1 + 1 << 2, MAX_INT_FLAG, ~0, MAX_INT_TYPE(MAX_UINT_FLAG),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  27)         1 + MAX_INT_TYPE(MAX_UINT_FLAG)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  28) ], dtype=MAX_INT_TYPE)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  29) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  30) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  31) @pytest.mark.parametrize('flag', [0, -1])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  32) def test_nonpositive_not_a_bit_flag(flag):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  33)     assert not bitmask._is_bit_flag(n=flag)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  34) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  35) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  36) @pytest.mark.parametrize('flag', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  37)     1, MAX_UINT_FLAG, int(MAX_UINT_FLAG), SUPER_LARGE_FLAG
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  38) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  39) def test_is_bit_flag(flag):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  40)     assert bitmask._is_bit_flag(n=flag)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  41) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  42) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  43) @pytest.mark.parametrize('number', [0, 1, MAX_UINT_FLAG, SUPER_LARGE_FLAG])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  44) def test_is_int(number):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  45)     assert bitmask._is_int(number)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  46) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  47) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  48) @pytest.mark.parametrize('number', ['1', True, 1.0])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  49) def test_nonint_is_not_an_int(number):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  50)     assert not bitmask._is_int(number)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  51) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  52) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  53) @pytest.mark.parametrize('flag,flip,expected', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  54)     (3, None, 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  55)     (3, True, -4),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  56)     (3, False, 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  57)     ([1, 2], False, 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  58)     ([1, 2], True, -4)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  59) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  60) def test_interpret_valid_int_bit_flags(flag, flip, expected):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  61)     assert(
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  62)         bitmask.interpret_bit_flags(bit_flags=flag, flip_bits=flip) == expected
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  63)     )
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  64) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  65) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  66) @pytest.mark.parametrize('flag', [None, ' ', 'None', 'Indef'])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  67) def test_interpret_none_bit_flags_as_None(flag):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  68)     assert bitmask.interpret_bit_flags(bit_flags=flag) is None
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  69) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  70) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  71) @pytest.mark.parametrize('flag,expected', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  72)     ('1', 1),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  73)     ('~-1', ~(-1)),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  74)     ('~1', ~1),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  75)     ('1,2', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  76)     ('1|2', 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  77)     ('1+2', 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  78)     ('(1,2)', 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  79)     ('(1+2)', 3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  80)     ('~1,2', ~3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  81)     ('~1+2', ~3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  82)     ('~(1,2)', ~3),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  83)     ('~(1+2)', ~3)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  84) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  85) def test_interpret_valid_str_bit_flags(flag, expected):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  86)     assert(
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  87)         bitmask.interpret_bit_flags(bit_flags=flag) == expected
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  88)     )
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  89) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400  90) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  91) @pytest.mark.parametrize('flag,expected', [
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  92)     ('CR', 1),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  93)     ('~CR', ~1),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  94)     ('CR|HOT', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  95)     ('CR,HOT', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  96)     ('CR+HOT', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  97)     (['CR', 'HOT'], 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  98)     ('(CR,HOT)', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400  99)     ('(HOT+CR)', 3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 100)     ('~HOT,CR', ~3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 101)     ('~CR+HOT', ~3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 102)     ('~(HOT,CR)', ~3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 103)     ('~(HOT|CR)', ~3),
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 104)     ('~(CR+HOT)', ~3)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 105) ])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 106) def test_interpret_valid_mnemonic_bit_flags(flag, expected):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 107)     flagmap = bitmask.extend_bit_flag_map('DetectorMap', CR=1, HOT=2)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 108) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 109)     assert(
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 110)         bitmask.interpret_bit_flags(bit_flags=flag, flag_name_map=flagmap)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 111)         == expected
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 112)     )
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 113) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 114) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 115) @pytest.mark.parametrize('flag,flip', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 116)     (None, True),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 117)     (' ', True),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 118)     ('None', True),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 119)     ('Indef', True),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 120)     (None, False),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 121)     (' ', False),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 122)     ('None', False),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 123)     ('Indef', False),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 124)     ('1', True),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 125)     ('1', False)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 126) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 127) def test_interpret_None_or_str_and_flip_incompatibility(flag, flip):
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 128)     with pytest.raises(TypeError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 129)         bitmask.interpret_bit_flags(bit_flags=flag, flip_bits=flip)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 130) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 131) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 132) @pytest.mark.parametrize('flag', [True, 1.0, [1.0], object])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 133) def test_interpret_wrong_flag_type(flag):
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 134)     with pytest.raises(TypeError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 135)         bitmask.interpret_bit_flags(bit_flags=flag)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 136) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 137) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 138) @pytest.mark.parametrize('flag', ['SOMETHING', '1.0,2,3'])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 139) def test_interpret_wrong_string_int_format(flag):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 140)     with pytest.raises(ValueError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 141)         bitmask.interpret_bit_flags(bit_flags=flag)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 142) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 143) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 144) def test_interpret_duplicate_flag_warning():
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 145)     with warnings.catch_warnings(record=True) as w:
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 146)         warnings.simplefilter("always")
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 147)         assert bitmask.interpret_bit_flags([2, 4, 4]) == 6
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 148)         assert len(w)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 149)         assert issubclass(w[-1].category, UserWarning)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 150)         assert "Duplicate" in str(w[-1].message)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 151) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 152) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 153) @pytest.mark.parametrize('flag', [[1, 2, 3], '1, 2, 3'])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 154) def test_interpret_non_flag(flag):
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 155)     with pytest.raises(ValueError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 156)         bitmask.interpret_bit_flags(bit_flags=flag)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 157) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 158) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 159) def test_interpret_allow_single_value_str_nonflags():
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 160)     assert bitmask.interpret_bit_flags(bit_flags=str(3)) == 3
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 161) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 162) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 163) @pytest.mark.parametrize('flag', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 164)     '~',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 165)     '( )',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 166)     '(~1,2)',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 167)     '~(1,2',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 168)     '1,~2',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 169)     '1,(2,4)',
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 170)     '1,2+4',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 171)     '1+4,2',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 172)     '1|4+2'
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 173) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 174) def test_interpret_bad_str_syntax(flag):
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 175)     with pytest.raises(ValueError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 176)         bitmask.interpret_bit_flags(bit_flags=flag)
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 177) 
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 178) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 179) def test_bitfield_must_be_integer_check():
29d7cc1c6d (Mihai Cara        2018-10-22 14:26:20 -0400 180)     with pytest.raises(TypeError):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 181)         bitmask.bitfield_to_boolean_mask(1.0, 1)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 182) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 183) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 184) @pytest.mark.parametrize('data,flags,flip,goodval,dtype,ref', [
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 185)     (EXTREME_TEST_DATA, None, None, True, np.bool_,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 186)      EXTREME_TEST_DATA.size * [1]),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 187)     (EXTREME_TEST_DATA, None, None, False, np.bool_,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 188)      EXTREME_TEST_DATA.size * [0]),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 189)     (EXTREME_TEST_DATA, [1, MAX_UINT_FLAG], False, True, np.bool_,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 190)      [1, 1, 0, 0, 0, 1, 1]),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 191)     (EXTREME_TEST_DATA, None, None, True, np.bool_,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 192)      EXTREME_TEST_DATA.size * [1]),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 193)     (EXTREME_TEST_DATA, [1, MAX_UINT_FLAG], False, False, np.bool_,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 194)      [0, 0, 1, 1, 1, 0, 0]),
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 195)     (EXTREME_TEST_DATA, [1, MAX_UINT_FLAG], True, True, np.int8,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 196)      [1, 0, 1, 1, 0, 0, 0])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 197) ])
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 198) def test_bitfield_to_boolean_mask(data, flags, flip, goodval, dtype, ref):
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 199)     mask = bitmask.bitfield_to_boolean_mask(
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 200)         bitfield=data,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 201)         ignore_flags=flags,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 202)         flip_bits=flip,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 203)         good_mask_value=goodval,
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 204)         dtype=dtype
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 205)     )
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 206) 
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 207)     assert(mask.dtype == dtype)
bf505bf055 (Mihai Cara        2018-10-26 03:26:43 -0400 208)     assert np.all(mask == ref)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 209) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 210) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 211) @pytest.mark.parametrize('flag', [(4, 'flag1'), 8])
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 212) def test_bitflag(flag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 213)     f = bitmask.BitFlag(flag)
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 214)     if isinstance(flag, tuple):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 215)         assert f == flag[0]
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 216)         assert f.__doc__ == flag[1]
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 217) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 218)         f = bitmask.BitFlag(*flag)
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 219)         assert f == flag[0]
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 220)         assert f.__doc__ == flag[1]
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 221) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 222)     else:
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 223)         assert f == flag
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 224) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 225) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 226) def test_bitflag_docs2():
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 227)     with pytest.raises(ValueError):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 228)         bitmask.BitFlag((1, 'docs1'), 'docs2')
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 229) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 230) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 231) @pytest.mark.parametrize('flag', [0, 3])
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 232) def test_bitflag_not_pow2(flag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 233)     with pytest.raises(bitmask.InvalidBitFlag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 234)         bitmask.BitFlag(flag, 'custom flag')
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 235) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 236) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 237) @pytest.mark.parametrize('flag', [0.0, True, '1'])
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 238) def test_bitflag_not_int_flag(flag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 239)     with pytest.raises(bitmask.InvalidBitFlag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 240)         bitmask.BitFlag((flag, 'custom flag'))
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 241) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 242) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 243) @pytest.mark.parametrize('caching', [True, False])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 244) def test_basic_map(monkeypatch, caching):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 245)     monkeypatch.setattr(bitmask, '_ENABLE_BITFLAG_CACHING', False)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 246) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 247)     class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 248)         _not_a_flag = 1
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 249)         CR = 1, 'cosmic ray'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 250)         HOT = 2
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 251)         DEAD = 4
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 252) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 253)     class DetectorMap(ObservatoryDQMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 254)         __version__ = '1.0'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 255)         _not_a_flag = 181
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 256)         READOUT_ERR = 16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 257) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 258)     assert ObservatoryDQMap.cr == 1
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 259)     assert ObservatoryDQMap.cr.__doc__ == 'cosmic ray'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 260)     assert DetectorMap.READOUT_ERR == 16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 261) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 262) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 263) @pytest.mark.parametrize('caching', [True, False])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 264) def test_extend_map(monkeypatch, caching):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 265)     monkeypatch.setattr(bitmask, '_ENABLE_BITFLAG_CACHING', caching)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 266) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 267)     class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 268)         CR = 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 269)         HOT = 2
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 270)         DEAD = 4
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 271) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 272)     DetectorMap = bitmask.extend_bit_flag_map(
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 273)         'DetectorMap', ObservatoryDQMap,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 274)         __version__='1.0',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 275)         DEAD=4,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 276)         READOUT_ERR=16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 277)     )
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 278) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 279)     assert DetectorMap.CR == 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 280)     assert DetectorMap.readout_err == 16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 281) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 282) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 283) @pytest.mark.parametrize('caching', [True, False])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 284) def test_extend_map_redefine_flag(monkeypatch, caching):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 285)     monkeypatch.setattr(bitmask, '_ENABLE_BITFLAG_CACHING', caching)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 286) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 287)     class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 288)         CR = 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 289)         HOT = 2
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 290)         DEAD = 4
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 291) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 292)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 293)         bitmask.extend_bit_flag_map(
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 294)             'DetectorMap',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 295)             ObservatoryDQMap,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 296)             __version__='1.0',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 297)             DEAD=32
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 298)         )
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 299) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 300)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 301)         bitmask.extend_bit_flag_map(
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 302)             'DetectorMap',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 303)             ObservatoryDQMap,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 304)             __version__='1.0',
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 305)             DEAD=32,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 306)             dead=64
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 307)         )
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 308) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 309) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 310) @pytest.mark.parametrize('caching', [True, False])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 311) def test_map_redefine_flag(monkeypatch, caching):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 312)     monkeypatch.setattr(bitmask, '_ENABLE_BITFLAG_CACHING', caching)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 313) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 314)     class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 315)         _not_a_flag = 8
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 316)         CR = 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 317)         HOT = 2
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 318)         DEAD = 4
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 319) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 320)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 321)         class DetectorMap1(ObservatoryDQMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 322)             __version__ = '1.0'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 323)             CR = 16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 324) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 325)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 326)         class DetectorMap2(ObservatoryDQMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 327)             SHADE = 8
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 328)             _FROZEN = 16
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 329) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 330)         DetectorMap2.novel = 32
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 331) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 332)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 333)         bitmask.extend_bit_flag_map(
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 334)             'DetectorMap', ObservatoryDQMap,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 335)             READOUT_ERR=16,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 336)             SHADE=32,
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 337)             readout_err=128
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 338)         )
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 339) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 340) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 341) def test_map_cant_modify_version():
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 342)     class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 343)         __version__ = '1.2.3'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 344)         CR = 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 345) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 346)     assert ObservatoryDQMap.__version__ == '1.2.3'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 347)     assert ObservatoryDQMap.CR == 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 348) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 349)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 350)         ObservatoryDQMap.__version__ = '3.2.1'
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 351) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 352) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 353) @pytest.mark.parametrize('flag', [0, 3])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 354) def test_map_not_bit_flag(flag):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 355)     with pytest.raises(ValueError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 356)         bitmask.extend_bit_flag_map('DetectorMap', DEAD=flag)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 357) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 358)     with pytest.raises(ValueError):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 359)         class DetectorMap(bitmask.BitFlagNameMap):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 360)             DEAD=flag
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 361) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 362) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 363) @pytest.mark.parametrize('flag', [0.0, True, '1'])
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 364) def test_map_not_int_flag(flag):
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 365)     with pytest.raises(bitmask.InvalidBitFlag):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 366)         bitmask.extend_bit_flag_map('DetectorMap', DEAD=flag)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 367) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 368)     with pytest.raises(bitmask.InvalidBitFlag):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 369)         class ObservatoryDQMap(bitmask.BitFlagNameMap):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 370)             CR = flag
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 371) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 372) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 373) def test_map_access_undefined_flag():
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 374)     DetectorMap = bitmask.extend_bit_flag_map('DetectorMap', DEAD=1)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 375) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 376)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 377)         DetectorMap.DEAD1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 378) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 379)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 380)         DetectorMap['DEAD1']
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 381) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 382) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 383) def test_map_delete_flag():
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 384)     DetectorMap = bitmask.extend_bit_flag_map('DetectorMap', DEAD=1)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 385) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 386)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 387)         del DetectorMap.DEAD1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 388) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 389)     with pytest.raises(AttributeError):
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 390)         del DetectorMap['DEAD1']
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 391) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 392) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 393) def test_map_repr():
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 394)     DetectorMap = bitmask.extend_bit_flag_map('DetectorMap', DEAD=1)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 395)     assert repr(DetectorMap) == "<BitFlagNameMap 'DetectorMap'>"
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 396) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 397) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 398) def test_map_add_flags():
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 399)     map1 = bitmask.extend_bit_flag_map('DetectorMap', CR=1)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 400) 
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 401)     map2 = map1 + {'HOT': 2, 'DEAD': (4, 'a really dead pixel')}
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 402)     assert map2.CR == 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 403)     assert map2.HOT == 2
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 404)     assert map2.DEAD.__doc__ == 'a really dead pixel'
4349372b96 (Mihai Cara        2020-04-24 15:57:11 -0400 405)     assert map2.DEAD == 4
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 406) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 407)     map2 = map1 + [('HOT', 2), ('DEAD', 4)]
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 408)     assert map2.CR == 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 409)     assert map2.HOT == 2
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 410) 
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 411)     map2 = map1 + ('HOT', 2)
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 412)     assert map2.CR == 1
bd48e227e8 (Mihai Cara        2020-04-22 23:01:39 -0400 413)     assert map2.HOT == 2
bdd6216d08 (Thomas Robitaille  2013-01-11 10:03:29 +0100  1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
d22b940a88 (Thomas Robitaille  2013-10-03 18:43:39 +0200  2) 
2359b3a4b9 (Michael Droettboom 2014-01-23 13:19:59 -0500  3) 
796bed9983 (Thomas Robitaille  2017-01-13 16:39:34 +0000  4) import pytest
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200  5) import numpy as np
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200  6) 
0c64572a2e (Thomas Robitaille  2018-11-30 14:02:06 +0000  7) from astropy.nddata import FlagCollection
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200  8) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200  9) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 10) def test_init():
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 11)     FlagCollection(shape=(1, 2, 3))
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 12) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 13) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 14) def test_init_noshape():
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 15)     with pytest.raises(Exception) as exc:
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 16)         FlagCollection()
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 17)     assert exc.value.args[0] == ('FlagCollection should be initialized with '
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 18)                                  'the shape of the data')
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 19) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 20) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 21) def test_init_notiterable():
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 22)     with pytest.raises(Exception) as exc:
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 23)         FlagCollection(shape=1.)
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 24)     assert exc.value.args[0] == ('FlagCollection shape should be '
2768151df4 (Matthew Craig      2014-12-19 21:51:59 -0600 25)                                  'an iterable object')
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 26) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 27) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 28) def test_setitem():
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 29)     f = FlagCollection(shape=(1, 2, 3))
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 30)     f['a'] = np.ones((1, 2, 3)).astype(float)
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 31)     f['b'] = np.ones((1, 2, 3)).astype(int)
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 32)     f['c'] = np.ones((1, 2, 3)).astype(bool)
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 33)     f['d'] = np.ones((1, 2, 3)).astype(str)
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 34) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 35) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 36) @pytest.mark.parametrize(('value'), [1, 1., 'spam', [1, 2, 3], (1., 2., 3.)])
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 37) def test_setitem_invalid_type(value):
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 38)     f = FlagCollection(shape=(1, 2, 3))
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 39)     with pytest.raises(Exception) as exc:
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 40)         f['a'] = value
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 41)     assert exc.value.args[0] == 'flags should be given as a Numpy array'
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 42) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 43) 
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 44) def test_setitem_invalid_shape():
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 45)     f = FlagCollection(shape=(1, 2, 3))
2807031bee (Matthew Craig      2014-08-17 19:53:36 -0500 46)     with pytest.raises(ValueError) as exc:
fa1aac94fb (Thomas Robitaille  2012-08-17 11:30:06 +0200 47)         f['a'] = np.ones((3, 2, 1))
0889e03cc8 (Matthew Craig      2014-08-18 09:19:42 -0500 48)     assert exc.value.args[0].startswith('flags array shape')
0889e03cc8 (Matthew Craig      2014-08-18 09:19:42 -0500 49)     assert exc.value.args[0].endswith('does not match data shape (1, 2, 3)')
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  2) # Tests of NDDataBase
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  3) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  4) 
0c64572a2e astropy/nddata/tests/test_nddata_base.py (Thomas Robitaille 2018-11-30 14:02:06 +0000  5) from astropy.nddata.nddata_base import NDDataBase
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  6) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  7) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600  8) class MinimalSubclass(NDDataBase):
f54186fcae astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-18 10:30:00 -0600  9)     def __init__(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 10)         super().__init__()
f54186fcae astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-18 10:30:00 -0600 11) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 12)     @property
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 13)     def data(self):
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 14)         return None
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 15) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 16)     @property
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 17)     def mask(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 18)         return super().mask
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 19) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 20)     @property
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 21)     def unit(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 22)         return super().unit
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 23) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 24)     @property
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 25)     def wcs(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 26)         return super().wcs
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 27) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 28)     @property
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 29)     def meta(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 30)         return super().meta
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 31) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 32)     @property
718e11dfb0 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2015-10-25 20:29:58 +0100 33)     def uncertainty(self):
ecfc6c2a69 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2017-09-26 22:38:57 +0200 34)         return super().uncertainty
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 35) 
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 36) 
7340bc22e1 astropy/nddata/tests/test_nddata_base.py (Thomas Robitaille 2014-12-24 09:36:54 +0000 37) def test_nddata_base_subclass():
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 38)     a = MinimalSubclass()
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 39)     assert a.meta is None
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 40)     assert a.data is None
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 41)     assert a.mask is None
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 42)     assert a.unit is None
dfcfcae7de astropy/nddata/tests/test_nddatabase.py  (Matthew Craig     2014-12-17 21:55:04 -0600 43)     assert a.wcs is None
718e11dfb0 astropy/nddata/tests/test_nddata_base.py (Michael Seifert   2015-10-25 20:29:58 +0100 44)     assert a.uncertainty is None
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  2) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  3) """
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  4) This module implements a class based on NDData with all Mixins.
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  5) """
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  6) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  7) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  8) from .nddata import NDData
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200  9) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 10) from .mixins.ndslicing import NDSlicingMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 11) from .mixins.ndarithmetic import NDArithmeticMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 12) from .mixins.ndio import NDIOMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 13) 
cb7800db74 (Michael Seifert     2016-04-26 10:46:27 +0200 14) __all__ = ['NDDataRef']
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 15) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 16) 
cb7800db74 (Michael Seifert     2016-04-26 10:46:27 +0200 17) class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 18)     """Implements `NDData` with all Mixins.
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 19) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 20)     This class implements a `NDData`-like container that supports reading and
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 21)     writing as implemented in the ``astropy.io.registry`` and also slicing
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 22)     (indexing) and simple arithmetics (add, subtract, divide and multiply).
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 23) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 24)     Notes
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 25)     -----
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 26)     A key distinction from `NDDataArray` is that this class does not attempt
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 27)     to provide anything that was not defined in any of the parent classes.
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 28) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 29)     See also
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 30)     --------
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 31)     NDData
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 32)     NDArithmeticMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 33)     NDSlicingMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 34)     NDIOMixin
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 35) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 36)     Examples
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 37)     --------
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 38)     The mixins allow operation that are not possible with `NDData` or
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 39)     `NDDataBase`, i.e. simple arithmetics::
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 40) 
cb7800db74 (Michael Seifert     2016-04-26 10:46:27 +0200 41)         >>> from astropy.nddata import NDDataRef, StdDevUncertainty
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 42)         >>> import numpy as np
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 43) 
6d8868cff4 (Michael Seifert     2017-09-24 22:19:15 +0200 44)         >>> data = np.ones((3,3), dtype=float)
cb7800db74 (Michael Seifert     2016-04-26 10:46:27 +0200 45)         >>> ndd1 = NDDataRef(data, uncertainty=StdDevUncertainty(data))
cb7800db74 (Michael Seifert     2016-04-26 10:46:27 +0200 46)         >>> ndd2 = NDDataRef(data, uncertainty=StdDevUncertainty(data))
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 47) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 48)         >>> ndd3 = ndd1.add(ndd2)
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 49)         >>> ndd3.data  # doctest: +FLOAT_CMP
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 50)         array([[2., 2., 2.],
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 51)                [2., 2., 2.],
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 52)                [2., 2., 2.]])
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 53)         >>> ndd3.uncertainty.array  # doctest: +FLOAT_CMP
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 54)         array([[1.41421356, 1.41421356, 1.41421356],
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 55)                [1.41421356, 1.41421356, 1.41421356],
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 56)                [1.41421356, 1.41421356, 1.41421356]])
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 57) 
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 58)     see `NDArithmeticMixin` for a complete list of all supported arithmetic
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 59)     operations.
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 60) 
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 61)     But also slicing (indexing) is possible::
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 62) 
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 63)         >>> ndd4 = ndd3[1,:]
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 64)         >>> ndd4.data  # doctest: +FLOAT_CMP
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 65)         array([2., 2., 2.])
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 66)         >>> ndd4.uncertainty.array  # doctest: +FLOAT_CMP
550671f49f (Marten van Kerkwijk 2017-10-14 14:06:43 -0400 67)         array([1.41421356, 1.41421356, 1.41421356])
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 68) 
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 69)     See `NDSlicingMixin` for a description how slicing works (which attributes)
28a423b7ef (Michael Seifert     2016-04-21 06:00:31 +0200 70)     are sliced.
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 71)     """
9a3a747225 (Michael Seifert     2016-04-21 03:54:48 +0200 72)     pass
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   1) """
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400   2) A module that provides functions for manipulating bit masks and data quality
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   3) (DQ) arrays.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   4) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   5) """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   6) import warnings
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400   7) import numbers
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400   8) from collections import OrderedDict
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400   9) import numpy as np
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  10) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  11) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  12) __all__ = ['bitfield_to_boolean_mask', 'interpret_bit_flags',
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  13)            'BitFlagNameMap', 'extend_bit_flag_map', 'InvalidBitFlag']
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  14) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  15) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  16) _ENABLE_BITFLAG_CACHING = True
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400  17) _MAX_UINT_TYPE = np.maximum_sctype(np.uint)
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400  18) _SUPPORTED_FLAGS = int(np.bitwise_not(
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400  19)     0, dtype=_MAX_UINT_TYPE, casting='unsafe'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  20) ))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  21) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  22) 
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400  23) def _is_bit_flag(n):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  24)     """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  25)     Verifies if the input number is a bit flag (i.e., an integer number that is
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  26)     an integer power of 2).
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  27) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  28)     Parameters
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  29)     ----------
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  30)     n : int
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  31)         A positive integer number. Non-positive integers are considered not to
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  32)         be "flags".
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  33) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  34)     Returns
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  35)     -------
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  36)     bool
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  37)         ``True`` if input ``n`` is a bit flag and ``False`` if it is not.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  38) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  39)     """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  40)     if n < 1:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  41)         return False
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  42) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  43)     return bin(n).count('1') == 1
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  44) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  45) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  46) def _is_int(n):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  47)     return (
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400  48)         (isinstance(n, numbers.Integral) and not isinstance(n, bool)) or
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  49)         (isinstance(n, np.generic) and np.issubdtype(n, np.integer))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  50)     )
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  51) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400  52) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  53) class InvalidBitFlag(ValueError):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  54)     """ Indicates that a value is not an integer that is a power of 2. """
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  55)     pass
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  56) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  57) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  58) class BitFlag(int):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  59)     """ Bit flags: integer values that are powers of 2. """
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  60)     def __new__(cls, val, doc=None):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  61)         if isinstance(val, tuple):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  62)             if doc is not None:
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  63)                 raise ValueError("Flag's doc string cannot be provided twice.")
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  64)             val, doc = val
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  65) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  66)         if not (_is_int(val) and _is_bit_flag(val)):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  67)             raise InvalidBitFlag(
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  68)                 "Value '{}' is not a valid bit flag: bit flag value must be "
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  69)                 "an integral power of two.".format(val)
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  70)             )
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  71) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  72)         s = int.__new__(cls, val)
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  73)         if doc is not None:
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  74)             s.__doc__ = doc
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  75)         return s
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  76) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  77) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  78) class BitFlagNameMeta(type):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  79)     def __new__(mcls, name, bases, members):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  80)         for k, v in members.items():
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  81)             if not k.startswith('_'):
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400  82)                 v = BitFlag(v)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  83) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  84)         attr = [k for k in members.keys() if not k.startswith('_')]
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  85)         attrl = list(map(str.lower, attr))
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  86) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  87)         if _ENABLE_BITFLAG_CACHING:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  88)             cache = OrderedDict()
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  89) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  90)         for b in bases:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  91)             for k, v in b.__dict__.items():
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  92)                 if k.startswith('_'):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  93)                     continue
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  94)                 kl = k.lower()
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  95)                 if kl in attrl:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  96)                     idx = attrl.index(kl)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400  97)                     raise AttributeError("Bit flag '{:s}' was already defined."
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400  98)                                          .format(attr[idx]))
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400  99)                 if _ENABLE_BITFLAG_CACHING:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 100)                     cache[kl] = v
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 101) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 102)         members = {k: v if k.startswith('_') else BitFlag(v)
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 103)                    for k, v in members.items()}
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 104) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 105)         if _ENABLE_BITFLAG_CACHING:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 106)             cache.update({k.lower(): v for k, v in members.items()
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 107)                           if not k.startswith('_')})
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 108)             members = {'_locked': True, '__version__': '', **members,
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 109)                        '_cache': cache}
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 110)         else:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 111)             members = {'_locked': True, '__version__': '', **members}
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 112) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 113)         return super().__new__(mcls, name, bases, members)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 114) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 115)     def __setattr__(cls, name, val):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 116)         if name == '_locked':
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 117)             return super().__setattr__(name, True)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 118) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 119)         else:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 120)             if name == '__version__':
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 121)                 if cls._locked:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 122)                     raise AttributeError("Version cannot be modified.")
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 123)                 return super().__setattr__(name, val)
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 124) 
6f9d3aec60 (ikkamens           2020-10-18 23:09:32 +0200 125)             err_msg = f"Bit flags are read-only. Unable to reassign attribute {name}"
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 126)             if cls._locked:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 127)                 raise AttributeError(err_msg)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 128) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 129)         namel = name.lower()
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 130)         if _ENABLE_BITFLAG_CACHING:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 131)             if not namel.startswith('_') and namel in cls._cache:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 132)                 raise AttributeError(err_msg)
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 133) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 134)         else:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 135)             for b in cls.__bases__:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 136)                 if not namel.startswith('_') and namel in list(map(str.lower, b.__dict__)):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 137)                     raise AttributeError(err_msg)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 138)             if namel in list(map(str.lower, cls.__dict__)):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 139)                 raise AttributeError(err_msg)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 140) 
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 141)         val = BitFlag(val)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 142) 
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 143)         if _ENABLE_BITFLAG_CACHING and not namel.startswith('_'):
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 144)             cls._cache[namel] = val
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 145) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 146)         return super().__setattr__(name, val)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 147) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 148)     def __getattr__(cls, name):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 149)         if _ENABLE_BITFLAG_CACHING:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 150)             flagnames = cls._cache
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 151)         else:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 152)             flagnames = {k.lower(): v for k, v in cls.__dict__.items()}
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 153)             flagnames.update({k.lower(): v for b in cls.__bases__
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 154)                               for k, v in b.__dict__.items()})
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 155)         try:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 156)             return flagnames[name.lower()]
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 157)         except KeyError:
6f9d3aec60 (ikkamens           2020-10-18 23:09:32 +0200 158)             raise AttributeError(f"Flag '{name}' not defined")
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 159) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 160)     def __getitem__(cls, key):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 161)         return cls.__getattr__(key)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 162) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 163)     def __add__(cls, items):
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 164)         if not isinstance(items, dict):
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 165)             if not isinstance(items[0], (tuple, list)):
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 166)                 items = [items]
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 167)             items = dict(items)
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 168) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 169)         return extend_bit_flag_map(
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 170)             cls.__name__ + '_' + '_'.join([k for k in items]),
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 171)             cls,
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 172)             **items
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 173)         )
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 174) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 175)     def __iadd__(cls, other):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 176)         raise NotImplementedError(
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 177)             "Unary '+' is not supported. Use binary operator instead."
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 178)         )
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 179) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 180)     def __delattr__(cls, name):
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 181)         raise AttributeError("{:s}: cannot delete {:s} member."
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 182)                              .format(cls.__name__, cls.mro()[-2].__name__))
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 183) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 184)     def __delitem__(cls, name):
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 185)         raise AttributeError("{:s}: cannot delete {:s} member."
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 186)                              .format(cls.__name__, cls.mro()[-2].__name__))
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 187) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 188)     def __repr__(cls):
6f9d3aec60 (ikkamens           2020-10-18 23:09:32 +0200 189)         return f"<{cls.mro()[-2].__name__:s} '{cls.__name__:s}'>"
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 190) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 191) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 192) class BitFlagNameMap(metaclass=BitFlagNameMeta):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 193)     """
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 194)     A base class for bit flag name maps used to describe data quality (DQ)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 195)     flags of images by provinding a mapping from a mnemonic flag name to a flag
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 196)     value.
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 197) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 198)     Mapping for a specific instrument should subclass this class.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 199)     Subclasses should define flags as class attributes with integer values
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 200)     that are powers of 2. Each bit flag may also contain a string
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 201)     comment following the flag value.
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 202) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 203)     Examples
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 204)     --------
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 205) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 206)         >>> from astropy.nddata.bitmask import BitFlagNameMap
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 207)         >>> class ST_DQ(BitFlagNameMap):
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 208)         ...     __version__ = '1.0.0'  # optional
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 209)         ...     CR = 1, 'Cosmic Ray'
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 210)         ...     CLOUDY = 4  # no docstring comment
4349372b96 (Mihai Cara         2020-04-24 15:57:11 -0400 211)         ...     RAINY = 8, 'Dome closed'
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 212)         ...
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 213)         >>> class ST_CAM1_DQ(ST_DQ):
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 214)         ...     HOT = 16
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 215)         ...     DEAD = 32
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 216) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 217)     """
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 218)     pass
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 219) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 220) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 221) def extend_bit_flag_map(cls_name, base_cls=BitFlagNameMap, **kwargs):
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 222)     """
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 223)     A convenience function for creating bit flags maps by subclassing an
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 224)     existing map and adding additional flags supplied as keyword arguments.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 225) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 226)     Parameters
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 227)     ----------
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 228)     cls_name : str
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 229)         Class name of the bit flag map to be created.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 230) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 231)     base_cls : BitFlagNameMap, optional
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 232)         Base class for the new bit flag map.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 233) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 234)     **kwargs : int
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 235)         Each supplied keyword argument will be used to define bit flag
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 236)         names in the new map. In addition to bit flag names, ``__version__`` is
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 237)         allowed to indicate the version of the newly created map.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 238) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 239)     Examples
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 240)     --------
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 241) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 242)         >>> from astropy.nddata.bitmask import extend_bit_flag_map
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 243)         >>> ST_DQ = extend_bit_flag_map('ST_DQ', __version__='1.0.0', CR=1, CLOUDY=4, RAINY=8)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 244)         >>> ST_CAM1_DQ = extend_bit_flag_map('ST_CAM1_DQ', ST_DQ, HOT=16, DEAD=32)
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 245)         >>> ST_CAM1_DQ['HOT']  # <-- Access flags as dictionary keys
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 246)         16
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 247)         >>> ST_CAM1_DQ.HOT  # <-- Access flags as class attributes
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 248)         16
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 249) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 250)     """
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 251)     new_cls = BitFlagNameMeta.__new__(
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 252)         BitFlagNameMeta,
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 253)         cls_name,
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 254)         (base_cls, ),
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 255)         {'_locked': False}
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 256)     )
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 257)     for k, v in kwargs.items():
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 258)         try:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 259)             setattr(new_cls, k, v)
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 260)         except AttributeError as e:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 261)             if new_cls[k] != int(v):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 262)                 raise e
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 263) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 264)     new_cls._locked = True
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 265)     return new_cls
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 266) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 267) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 268) def interpret_bit_flags(bit_flags, flip_bits=None, flag_name_map=None):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 269)     """
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 270)     Converts input bit flags to a single integer value (bit mask) or `None`.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 271) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 272)     When input is a list of flags (either a Python list of integer flags or a
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 273)     string of comma-, ``'|'``-, or ``'+'``-separated list of flags),
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 274)     the returned bit mask is obtained by summing input flags.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 275) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 276)     .. note::
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 277)         In order to flip the bits of the returned bit mask,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 278)         for input of `str` type, prepend '~' to the input string. '~' must
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 279)         be prepended to the *entire string* and not to each bit flag! For
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 280)         input that is already a bit mask or a Python list of bit flags, set
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 281)         ``flip_bits`` for `True` in order to flip the bits of the returned
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 282)         bit mask.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 283) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 284)     Parameters
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 285)     ----------
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 286)     bit_flags : int, str, list, None
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 287)         An integer bit mask or flag, `None`, a string of comma-, ``'|'``- or
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 288)         ``'+'``-separated list of integer bit flags or mnemonic flag names,
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 289)         or a Python list of integer bit flags. If ``bit_flags`` is a `str`
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 290)         and if it is prepended with '~', then the output bit mask will have
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 291)         its bits flipped (compared to simple sum of input flags).
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 292)         For input ``bit_flags`` that is already a bit mask or a Python list
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 293)         of bit flags, bit-flipping can be controlled through ``flip_bits``
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 294)         parameter.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 295) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 296)         .. note::
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 297)             When ``bit_flags`` is a list of flag names, the ``flag_name_map``
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 298)             parameter must be provided.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 299) 
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 300)         .. note::
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 301)             Only one flag separator is supported at a time. ``bit_flags``
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 302)             string should not mix ``','``, ``'+'``, and ``'|'`` separators.
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 303) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 304)     flip_bits : bool, None
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 305)         Indicates whether or not to flip the bits of the returned bit mask
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 306)         obtained from input bit flags. This parameter must be set to `None`
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 307)         when input ``bit_flags`` is either `None` or a Python list of flags.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 308) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 309)     flag_name_map : BitFlagNameMap
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 310)          A `BitFlagNameMap` object that provides mapping from mnemonic
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 311)          bit flag names to integer bit values in order to translate mnemonic
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 312)          flags to numeric values when ``bit_flags`` that are comma- or
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 313)          '+'-separated list of menmonic bit flag names.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 314) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 315)     Returns
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 316)     -------
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 317)     bitmask : int or None
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 318)         Returns an integer bit mask formed from the input bit value or `None`
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 319)         if input ``bit_flags`` parameter is `None` or an empty string.
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 320)         If input string value was prepended with '~' (or ``flip_bits`` was set
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 321)         to `True`), then returned value will have its bits flipped
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 322)         (inverse mask).
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 323) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 324)     Examples
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 325)     --------
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 326) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 327)         >>> from astropy.nddata.bitmask import interpret_bit_flags, extend_bit_flag_map
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 328)         >>> ST_DQ = extend_bit_flag_map('ST_DQ', CR=1, CLOUDY=4, RAINY=8, HOT=16, DEAD=32)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 329)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags(28))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 330)         '0000000000011100'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 331)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags('4,8,16'))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 332)         '0000000000011100'
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 333)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags('CLOUDY,RAINY,HOT', flag_name_map=ST_DQ))
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 334)         '0000000000011100'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 335)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags('~4,8,16'))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 336)         '1111111111100011'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 337)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags('~(4+8+16)'))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 338)         '1111111111100011'
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 339)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags('~(CLOUDY+RAINY+HOT)',
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 340)         ... flag_name_map=ST_DQ))
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 341)         '1111111111100011'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 342)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags([4, 8, 16]))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 343)         '0000000000011100'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 344)         >>> "{0:016b}".format(0xFFFF & interpret_bit_flags([4, 8, 16], flip_bits=True))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 345)         '1111111111100011'
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 346) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 347)     """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 348)     has_flip_bits = flip_bits is not None
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 349)     flip_bits = bool(flip_bits)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 350)     allow_non_flags = False
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 351) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 352)     if _is_int(bit_flags):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 353)         return (~int(bit_flags) if flip_bits else int(bit_flags))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 354) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 355)     elif bit_flags is None:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 356)         if has_flip_bits:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 357)             raise TypeError(
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 358)                 "Keyword argument 'flip_bits' must be set to 'None' when "
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 359)                 "input 'bit_flags' is None."
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 360)             )
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 361)         return None
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 362) 
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 363)     elif isinstance(bit_flags, str):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 364)         if has_flip_bits:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 365)             raise TypeError(
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 366)                 "Keyword argument 'flip_bits' is not permitted for "
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 367)                 "comma-separated string lists of bit flags. Prepend '~' to "
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 368)                 "the string to indicate bit-flipping."
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 369)             )
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 370) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 371)         bit_flags = str(bit_flags).strip()
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 372) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 373)         if bit_flags.upper() in ['', 'NONE', 'INDEF']:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 374)             return None
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 375) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 376)         # check whether bitwise-NOT is present and if it is, check that it is
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 377)         # in the first position:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 378)         bitflip_pos = bit_flags.find('~')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 379)         if bitflip_pos == 0:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 380)             flip_bits = True
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 381)             bit_flags = bit_flags[1:].lstrip()
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 382)         else:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 383)             if bitflip_pos > 0:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 384)                 raise ValueError("Bitwise-NOT must precede bit flag list.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 385)             flip_bits = False
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 386) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 387)         # basic check for correct use of parenthesis:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 388)         while True:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 389)             nlpar = bit_flags.count('(')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 390)             nrpar = bit_flags.count(')')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 391) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 392)             if nlpar == 0 and nrpar == 0:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 393)                 break
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 394) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 395)             if nlpar != nrpar:
4027356d37 (luz paz            2021-10-08 22:33:06 -0400 396)                 raise ValueError("Unbalanced parentheses in bit flag list.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 397) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 398)             lpar_pos = bit_flags.find('(')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 399)             rpar_pos = bit_flags.rfind(')')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 400)             if lpar_pos > 0 or rpar_pos < (len(bit_flags) - 1):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 401)                 raise ValueError("Incorrect syntax (incorrect use of "
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 402)                                  "parenthesis) in bit flag list.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 403) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 404)             bit_flags = bit_flags[1:-1].strip()
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 405) 
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 406)         if sum(k in bit_flags for k in '+,|') > 1:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 407)             raise ValueError(
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 408)                 "Only one type of bit flag separator may be used in one "
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 409)                 "expression. Allowed separators are: '+', '|', or ','."
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 410)             )
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 411) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 412)         if ',' in bit_flags:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 413)             bit_flags = bit_flags.split(',')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 414) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 415)         elif '+' in bit_flags:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 416)             bit_flags = bit_flags.split('+')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 417) 
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 418)         elif '|' in bit_flags:
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 419)             bit_flags = bit_flags.split('|')
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 420) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 421)         else:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 422)             if bit_flags == '':
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 423)                 raise ValueError(
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 424)                     "Empty bit flag lists not allowed when either bitwise-NOT "
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 425)                     "or parenthesis are present."
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 426)                 )
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 427)             bit_flags = [bit_flags]
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 428) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 429)         if flag_name_map is not None:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 430)             try:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 431)                 int(bit_flags[0])
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 432)             except ValueError:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 433)                 bit_flags = [flag_name_map[f] for f in bit_flags]
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 434) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 435)         allow_non_flags = len(bit_flags) == 1
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 436) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 437)     elif hasattr(bit_flags, '__iter__'):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 438)         if not all([_is_int(flag) for flag in bit_flags]):
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 439)             if (flag_name_map is not None and all([isinstance(flag, str)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 440)                                                    for flag in bit_flags])):
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 441)                 bit_flags = [flag_name_map[f] for f in bit_flags]
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 442)             else:
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 443)                 raise TypeError("Every bit flag in a list must be either an "
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 444)                                 "integer flag value or a 'str' flag name.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 445) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 446)     else:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 447)         raise TypeError("Unsupported type for argument 'bit_flags'.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 448) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 449)     bitset = set(map(int, bit_flags))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 450)     if len(bitset) != len(bit_flags):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 451)         warnings.warn("Duplicate bit flags will be ignored")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 452) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 453)     bitmask = 0
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 454)     for v in bitset:
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 455)         if not _is_bit_flag(v) and not allow_non_flags:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 456)             raise ValueError("Input list contains invalid (not powers of two) "
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 457)                              "bit flag: {:d}".format(v))
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 458)         bitmask += v
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 459) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 460)     if flip_bits:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 461)         bitmask = ~bitmask
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 462) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 463)     return bitmask
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 464) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 465) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 466) def bitfield_to_boolean_mask(bitfield, ignore_flags=0, flip_bits=None,
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 467)                              good_mask_value=False, dtype=np.bool_,
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 468)                              flag_name_map=None):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 469)     """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 470)     bitfield_to_boolean_mask(bitfield, ignore_flags=None, flip_bits=None, \
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 471) good_mask_value=False, dtype=numpy.bool_)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 472)     Converts an array of bit fields to a boolean (or integer) mask array
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 473)     according to a bit mask constructed from the supplied bit flags (see
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 474)     ``ignore_flags`` parameter).
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 475) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 476)     This function is particularly useful to convert data quality arrays to
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 477)     boolean masks with selective filtering of DQ flags.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 478) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 479)     Parameters
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 480)     ----------
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 481)     bitfield : ndarray
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 482)         An array of bit flags. By default, values different from zero are
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 483)         interpreted as "bad" values and values equal to zero are considered
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 484)         as "good" values. However, see ``ignore_flags`` parameter on how to
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 485)         selectively ignore some bits in the ``bitfield`` array data.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 486) 
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 487)     ignore_flags : int, str, list, None (default = 0)
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 488)         An integer bit mask, `None`, a Python list of bit flags, a comma-,
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 489)         or ``'|'``-separated, ``'+'``-separated string list of integer
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 490)         bit flags or mnemonic flag names that indicate what bits in the input
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 491)         ``bitfield`` should be *ignored* (i.e., zeroed), or `None`.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 492) 
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 493)         .. note::
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 494)             When ``bit_flags`` is a list of flag names, the ``flag_name_map``
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 495)             parameter must be provided.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 496) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 497)         | Setting ``ignore_flags`` to `None` effectively will make
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 498)           `bitfield_to_boolean_mask` interpret all ``bitfield`` elements
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 499)           as "good" regardless of their value.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 500) 
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 501)         | When ``ignore_flags`` argument is an integer bit mask, it will be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 502)           combined using bitwise-NOT and bitwise-AND with each element of the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 503)           input ``bitfield`` array (``~ignore_flags & bitfield``). If the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 504)           resultant bitfield element is non-zero, that element will be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 505)           interpreted as a "bad" in the output boolean mask and it will be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 506)           interpreted as "good" otherwise. ``flip_bits`` parameter may be used
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 507)           to flip the bits (``bitwise-NOT``) of the bit mask thus effectively
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 508)           changing the meaning of the ``ignore_flags`` parameter from "ignore"
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 509)           to "use only" these flags.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 510) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 511)         .. note::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 512) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 513)             Setting ``ignore_flags`` to 0 effectively will assume that all
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 514)             non-zero elements in the input ``bitfield`` array are to be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 515)             interpreted as "bad".
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 516) 
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 517)         | When ``ignore_flags`` argument is a Python list of integer bit
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 518)           flags, these flags are added together to create an integer bit mask.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 519)           Each item in the list must be a flag, i.e., an integer that is an
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 520)           integer power of 2. In order to flip the bits of the resultant
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 521)           bit mask, use ``flip_bits`` parameter.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 522) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 523)         | Alternatively, ``ignore_flags`` may be a string of comma- or
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 524)           ``'+'``(or ``'|'``)-separated list of integer bit flags that should
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 525)           be added (bitwise OR) together to create an integer bit mask.
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 526)           For example, both ``'4,8'``, ``'4|8'``, and ``'4+8'`` are equivalent
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 527)           and indicate that bit flags 4 and 8 in the input ``bitfield``
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 528)           array should be ignored when generating boolean mask.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 529) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 530)         .. note::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 531) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 532)             ``'None'``, ``'INDEF'``, and empty (or all white space) strings
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 533)             are special values of string ``ignore_flags`` that are
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 534)             interpreted as `None`.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 535) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 536)         .. note::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 537) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 538)             Each item in the list must be a flag, i.e., an integer that is an
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 539)             integer power of 2. In addition, for convenience, an arbitrary
4027356d37 (luz paz            2021-10-08 22:33:06 -0400 540)             **single** integer is allowed and it will be interpreted as an
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 541)             integer bit mask. For example, instead of ``'4,8'`` one could
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 542)             simply provide string ``'12'``.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 543) 
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 544)         .. note::
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 545)             Only one flag separator is supported at a time. ``ignore_flags``
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 546)             string should not mix ``','``, ``'+'``, and ``'|'`` separators.
bd48e227e8 (Mihai Cara         2020-04-22 23:01:39 -0400 547) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 548)         .. note::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 549) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 550)             When ``ignore_flags`` is a `str` and when it is prepended with
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 551)             '~', then the meaning of ``ignore_flags`` parameters will be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 552)             reversed: now it will be interpreted as a list of bit flags to be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 553)             *used* (or *not ignored*) when deciding which elements of the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 554)             input ``bitfield`` array are "bad". Following this convention,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 555)             an ``ignore_flags`` string value of ``'~0'`` would be equivalent
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 556)             to setting ``ignore_flags=None``.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 557) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 558)         .. warning::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 559) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 560)             Because prepending '~' to a string ``ignore_flags`` is equivalent
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 561)             to setting ``flip_bits`` to `True`, ``flip_bits`` cannot be used
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 562)             with string ``ignore_flags`` and it must be set to `None`.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 563) 
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 564)     flip_bits : bool, None (default = None)
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 565)         Specifies whether or not to invert the bits of the bit mask either
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 566)         supplied directly through ``ignore_flags`` parameter or built from the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 567)         bit flags passed through ``ignore_flags`` (only when bit flags are
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 568)         passed as Python lists of integer bit flags). Occasionally, it may be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 569)         useful to *consider only specific bit flags* in the ``bitfield``
b98ac607cf (Mihai Cara         2018-10-26 17:12:00 -0400 570)         array when creating a boolean mask as opposed to *ignoring* specific
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 571)         bit flags as ``ignore_flags`` behaves by default. This can be achieved
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 572)         by inverting/flipping the bits of the bit mask created from
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 573)         ``ignore_flags`` flags which effectively changes the meaning of the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 574)         ``ignore_flags`` parameter from "ignore" to "use only" these flags.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 575)         Setting ``flip_bits`` to `None` means that no bit flipping will be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 576)         performed. Bit flipping for string lists of bit flags must be
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 577)         specified by prepending '~' to string bit flag lists
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 578)         (see documentation for ``ignore_flags`` for more details).
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 579) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 580)         .. warning::
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 581)             This parameter can be set to either `True` or `False` **ONLY** when
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 582)             ``ignore_flags`` is either an integer bit mask or a Python
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 583)             list of integer bit flags. When ``ignore_flags`` is either
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 584)             `None` or a string list of flags, ``flip_bits`` **MUST** be set
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 585)             to `None`.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 586) 
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 587)     good_mask_value : int, bool (default = False)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 588)         This parameter is used to derive the values that will be assigned to
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 589)         the elements in the output boolean mask array that correspond to the
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 590)         "good" bit fields (that are 0 after zeroing bits specified by
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 591)         ``ignore_flags``) in the input ``bitfield`` array. When
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 592)         ``good_mask_value`` is non-zero or ``numpy.True_`` then values in the
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 593)         output boolean mask array corresponding to "good" bit fields in
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 594)         ``bitfield`` will be ``numpy.True_`` (if ``dtype`` is ``numpy.bool_``)
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 595)         or 1 (if ``dtype`` is of numerical type) and values of corresponding
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 596)         to "bad" flags will be ``numpy.False_`` (or 0). When
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 597)         ``good_mask_value`` is zero or ``numpy.False_`` then the values
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 598)         in the output boolean mask array corresponding to "good" bit fields
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 599)         in ``bitfield`` will be ``numpy.False_`` (if ``dtype`` is
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 600)         ``numpy.bool_``) or 0 (if ``dtype`` is of numerical type) and values
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 601)         of corresponding to "bad" flags will be ``numpy.True_`` (or 1).
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 602) 
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 603)     dtype : data-type (default = ``numpy.bool_``)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 604)         The desired data-type for the output binary mask array.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 605) 
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 606)     flag_name_map : BitFlagNameMap
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 607)          A `BitFlagNameMap` object that provides mapping from mnemonic
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 608)          bit flag names to integer bit values in order to translate mnemonic
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 609)          flags to numeric values when ``bit_flags`` that are comma- or
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 610)          '+'-separated list of menmonic bit flag names.
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 611) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 612)     Returns
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 613)     -------
a15d824171 (Nathaniel Starkman 2021-04-15 15:39:57 -0400 614)     mask : ndarray
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 615)         Returns an array of the same dimensionality as the input ``bitfield``
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 616)         array whose elements can have two possible values,
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 617)         e.g., ``numpy.True_`` or ``numpy.False_`` (or 1 or 0 for integer
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 618)         ``dtype``) according to values of to the input ``bitfield`` elements,
b08b4c7a0f (Mihai Cara         2018-10-23 20:32:14 -0400 619)         ``ignore_flags`` parameter, and the ``good_mask_value`` parameter.
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 620) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 621)     Examples
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 622)     --------
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 623) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 624)         >>> from astropy.nddata import bitmask
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 625)         >>> import numpy as np
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 626)         >>> dqarr = np.asarray([[0, 0, 1, 2, 0, 8, 12, 0],
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 627)         ...                     [10, 4, 0, 0, 0, 16, 6, 0]])
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 628)         >>> flag_map = bitmask.extend_bit_flag_map(
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 629)         ...     'ST_DQ', CR=2, CLOUDY=4, RAINY=8, HOT=16, DEAD=32
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 630)         ... )
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 631)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 632)         ...                                  dtype=int)
fc0d1b8ddd (Mihai Cara         2018-10-23 21:56:02 -0400 633)         array([[0, 0, 1, 1, 0, 1, 1, 0],
fc0d1b8ddd (Mihai Cara         2018-10-23 21:56:02 -0400 634)                [1, 1, 0, 0, 0, 1, 1, 0]])
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 635)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 636)         ...                                  dtype=bool)
fc0d1b8ddd (Mihai Cara         2018-10-23 21:56:02 -0400 637)         array([[False, False,  True,  True, False,  True,  True, False],
e7948a50d8 (Mihai Cara         2018-10-26 22:28:40 -0400 638)                [ True,  True, False, False, False,  True,  True, False]]...)
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 639)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 640)         ...                                  good_mask_value=0, dtype=int)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 641)         array([[0, 0, 1, 0, 0, 1, 1, 0],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 642)                [1, 0, 0, 0, 0, 1, 0, 0]])
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 643)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=~6,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 644)         ...                                  good_mask_value=0, dtype=int)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 645)         array([[0, 0, 0, 1, 0, 0, 1, 0],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 646)                [1, 1, 0, 0, 0, 0, 1, 0]])
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 647)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6, dtype=int,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 648)         ...                                  flip_bits=True, good_mask_value=0)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 649)         array([[0, 0, 0, 1, 0, 0, 1, 0],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 650)                [1, 1, 0, 0, 0, 0, 1, 0]])
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 651)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(2+4)',
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 652)         ...                                  good_mask_value=0, dtype=int)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 653)         array([[0, 0, 0, 1, 0, 0, 1, 0],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 654)                [1, 1, 0, 0, 0, 0, 1, 0]])
bbdd883814 (Mihai Cara         2020-04-23 11:50:22 -0400 655)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=[2, 4],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 656)         ...                                  flip_bits=True, good_mask_value=0,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 657)         ...                                  dtype=int)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 658)         array([[0, 0, 0, 1, 0, 0, 1, 0],
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 659)                [1, 1, 0, 0, 0, 0, 1, 0]])
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 660)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR,CLOUDY)',
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 661)         ...                                  good_mask_value=0, dtype=int,
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 662)         ...                                  flag_name_map=flag_map)
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 663)         array([[0, 0, 0, 1, 0, 0, 1, 0],
7ab0a0e988 (Mihai Cara         2020-03-31 09:48:22 -0400 664)                [1, 1, 0, 0, 0, 0, 1, 0]])
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 665)         >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR+CLOUDY)',
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 666)         ...                                  good_mask_value=0, dtype=int,
37d6f3be09 (Mihai Cara         2020-04-23 12:13:45 -0400 667)         ...                                  flag_name_map=flag_map)
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 668)         array([[0, 0, 0, 1, 0, 0, 1, 0],
e66fc7850e (Mihai Cara         2020-04-02 08:17:23 -0400 669)                [1, 1, 0, 0, 0, 0, 1, 0]])
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 670) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 671)     """
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 672)     bitfield = np.asarray(bitfield)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 673)     if not np.issubdtype(bitfield.dtype, np.integer):
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 674)         raise TypeError("Input bitfield array must be of integer type.")
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 675) 
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 676)     ignore_mask = interpret_bit_flags(ignore_flags, flip_bits=flip_bits,
68f2b0e3f3 (Mihai Cara         2020-03-19 14:00:43 -0400 677)                                       flag_name_map=flag_name_map)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 678) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 679)     if ignore_mask is None:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 680)         if good_mask_value:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 681)             mask = np.ones_like(bitfield, dtype=dtype)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 682)         else:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 683)             mask = np.zeros_like(bitfield, dtype=dtype)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 684)         return mask
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 685) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 686)     # filter out bits beyond the maximum supported by the data type:
bf505bf055 (Mihai Cara         2018-10-26 03:26:43 -0400 687)     ignore_mask = ignore_mask & _SUPPORTED_FLAGS
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 688) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 689)     # invert the "ignore" mask:
9dd0a232d6 (Mihai Cara         2021-08-10 22:05:07 -0400 690)     ignore_mask = np.bitwise_not(ignore_mask, dtype=bitfield.dtype.type,
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 691)                                  casting='unsafe')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 692) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 693)     mask = np.empty_like(bitfield, dtype=np.bool_)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 694)     np.bitwise_and(bitfield, ignore_mask, out=mask, casting='unsafe')
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 695) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 696)     if good_mask_value:
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 697)         np.logical_not(mask, out=mask)
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 698) 
29d7cc1c6d (Mihai Cara         2018-10-22 14:26:20 -0400 699)     return mask.astype(dtype=dtype, subok=False, copy=False)
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  1) 
0c64572a2e astropy/nddata/mixins/tests/test_ndio.py (Thomas Robitaille 2018-11-30 14:02:06 +0000  2) from astropy.nddata import NDData, NDIOMixin, NDDataRef
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  3) 
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  4) 
9a3a747225 astropy/nddata/mixins/tests/test_ndio.py (Michael Seifert   2016-04-21 03:54:48 +0200  5) # Alias NDDataAllMixins in case this will be renamed ... :-)
cb7800db74 astropy/nddata/mixins/tests/test_ndio.py (Michael Seifert   2016-04-26 10:46:27 +0200  6) NDDataIO = NDDataRef
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  7) 
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  8) 
27f4628955 astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-22 22:43:18 -0600  9) def test_simple_write_read(tmpdir):
60fa6ba28f astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-23 12:01:38 -0600 10)     ndd = NDDataIO([1, 2, 3])
60fa6ba28f astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-23 12:01:38 -0600 11)     assert hasattr(ndd, 'read')
60fa6ba28f astropy/nddata/tests/test_io.py          (Matthew Craig     2014-12-23 12:01:38 -0600 12)     assert hasattr(ndd, 'write')
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500    1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500    2) 
796bed9983 astropy/nddata/mixins/tests/test_ndarithmetic.py (Thomas Robitaille   2017-01-13 16:39:34 +0000    3) import pytest
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500    4) import numpy as np
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100    5) from numpy.testing import assert_array_equal, assert_array_almost_equal
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500    6) 
c9db697adf astropy/nddata/mixins/tests/test_ndarithmetic.py (Pey Lian Lim        2019-11-04 17:45:45 -0500    7) from astropy.nddata.nduncertainty import (
c9db697adf astropy/nddata/mixins/tests/test_ndarithmetic.py (Pey Lian Lim        2019-11-04 17:45:45 -0500    8)     StdDevUncertainty, VarianceUncertainty,
c9db697adf astropy/nddata/mixins/tests/test_ndarithmetic.py (Pey Lian Lim        2019-11-04 17:45:45 -0500    9)     InverseVariance,
c9db697adf astropy/nddata/mixins/tests/test_ndarithmetic.py (Pey Lian Lim        2019-11-04 17:45:45 -0500   10)     UnknownUncertainty,
c9db697adf astropy/nddata/mixins/tests/test_ndarithmetic.py (Pey Lian Lim        2019-11-04 17:45:45 -0500   11)     IncompatibleUncertaintiesException)
0c64572a2e astropy/nddata/mixins/tests/test_ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000   12) from astropy.nddata import NDDataRef
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200   13) from astropy.nddata import _testing as nd_testing
cb7800db74 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-26 10:46:27 +0200   14) 
0c64572a2e astropy/nddata/mixins/tests/test_ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000   15) from astropy.units import UnitsError, Quantity
0c64572a2e astropy/nddata/mixins/tests/test_ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000   16) from astropy import units as u
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200   17) from astropy.wcs import WCS
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500   18) 
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500   19) 
9a3a747225 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-21 03:54:48 +0200   20) # Alias NDDataAllMixins in case this will be renamed ... :-)
cb7800db74 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-26 10:46:27 +0200   21) NDDataArithmetic = NDDataRef
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500   22) 
2b9e8d479f astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-10-02 21:32:44 -0500   23) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   24) class StdDevUncertaintyUncorrelated(StdDevUncertainty):
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   25)     @property
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   26)     def supports_correlated(self):
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   27)         return False
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   28) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100   29) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   30) # Test with Data covers:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   31) # scalars, 1D, 2D and 3D
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   32) # broadcasting between them
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500   33) @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   34) @pytest.mark.parametrize(('data1', 'data2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   35)                          (np.array(5), np.array(10)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   36)                          (np.array(5), np.arange(10)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   37)                          (np.array(5), np.arange(10).reshape(2, 5)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   38)                          (np.arange(10), np.ones(10) * 2),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   39)                          (np.arange(10), np.ones((10, 10)) * 2),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   40)                          (np.arange(10).reshape(2, 5), np.ones((2, 5)) * 3),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   41)                          (np.arange(1000).reshape(20, 5, 10),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   42)                           np.ones((20, 5, 10)) * 3)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   43)                          ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   44) def test_arithmetics_data(data1, data2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   45) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   46)     nd1 = NDDataArithmetic(data1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   47)     nd2 = NDDataArithmetic(data2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   48) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   49)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   50)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   51)     assert_array_equal(data1+data2, nd3.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   52)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   53)     nd4 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   54)     assert_array_equal(data1-data2, nd4.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   55)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   56)     nd5 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   57)     assert_array_equal(data1*data2, nd5.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   58)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   59)     nd6 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   60)     assert_array_equal(data1/data2, nd6.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   61)     for nd in [nd3, nd4, nd5, nd6]:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   62)         # Check that broadcasting worked as expected
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   63)         if data1.ndim > data2.ndim:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   64)             assert data1.shape == nd.data.shape
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   65)         else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   66)             assert data2.shape == nd.data.shape
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   67)         # Check all other attributes are not set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   68)         assert nd.unit is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   69)         assert nd.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   70)         assert nd.mask is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   71)         assert len(nd.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   72)         assert nd.wcs is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   73) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   74) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   75) # Invalid arithmetic operations for data covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   76) # not broadcastable data
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   77) def test_arithmetics_data_invalid():
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   78)     nd1 = NDDataArithmetic([1, 2, 3])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   79)     nd2 = NDDataArithmetic([1, 2])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   80)     with pytest.raises(ValueError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   81)         nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   82) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   83) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   84) # Test with Data and unit and covers:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   85) # identical units (even dimensionless unscaled vs. no unit),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   86) # equivalent units (such as meter and kilometer)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   87) # equivalent composite units (such as m/s and km/h)
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500   88) @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   89) @pytest.mark.parametrize(('data1', 'data2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   90)     (np.array(5) * u.s, np.array(10) * u.s),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   91)     (np.array(5) * u.s, np.arange(10) * u.h),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   92)     (np.array(5) * u.s, np.arange(10).reshape(2, 5) * u.min),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   93)     (np.arange(10) * u.m / u.s, np.ones(10) * 2 * u.km / u.s),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   94)     (np.arange(10) * u.m / u.s, np.ones((10, 10)) * 2 * u.m / u.h),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   95)     (np.arange(10).reshape(2, 5) * u.m / u.s,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   96)      np.ones((2, 5)) * 3 * u.km / u.h),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   97)     (np.arange(1000).reshape(20, 5, 10),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   98)      np.ones((20, 5, 10)) * 3 * u.dimensionless_unscaled),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100   99)     (np.array(5), np.array(10) * u.s / u.h),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  100)     ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  101) def test_arithmetics_data_unit_identical(data1, data2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  102) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  103)     nd1 = NDDataArithmetic(data1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  104)     nd2 = NDDataArithmetic(data2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  105) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  106)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  107)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  108)     ref = data1 + data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  109)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  110)     assert_array_equal(ref_data, nd3.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  111)     assert nd3.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  112)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  113)     nd4 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  114)     ref = data1 - data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  115)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  116)     assert_array_equal(ref_data, nd4.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  117)     assert nd4.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  118)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  119)     nd5 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  120)     ref = data1 * data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  121)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  122)     assert_array_equal(ref_data, nd5.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  123)     assert nd5.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  124)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  125)     nd6 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  126)     ref = data1 / data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  127)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  128)     assert_array_equal(ref_data, nd6.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  129)     assert nd6.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  130)     for nd in [nd3, nd4, nd5, nd6]:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  131)         # Check that broadcasting worked as expected
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  132)         if data1.ndim > data2.ndim:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  133)             assert data1.shape == nd.data.shape
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  134)         else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  135)             assert data2.shape == nd.data.shape
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  136)         # Check all other attributes are not set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  137)         assert nd.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  138)         assert nd.mask is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  139)         assert len(nd.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  140)         assert nd.wcs is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  141) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  142) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  143) # Test with Data and unit and covers:
01d98073c1 astropy/nddata/mixins/tests/test_ndarithmetic.py (Brigitta Sipőcz     2016-06-15 05:34:47 +0100  144) # not identical not convertible units
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  145) # one with unit (which is not dimensionless) and one without
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  146) @pytest.mark.parametrize(('data1', 'data2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  147)     (np.array(5) * u.s, np.array(10) * u.m),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  148)     (np.array(5) * u.Mpc, np.array(10) * u.km / u.s),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  149)     (np.array(5) * u.Mpc, np.array(10)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  150)     (np.array(5), np.array(10) * u.s),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  151)     ])
943aeff599 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-12-13 01:06:40 +0100  152) def test_arithmetics_data_unit_not_identical(data1, data2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  153) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  154)     nd1 = NDDataArithmetic(data1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  155)     nd2 = NDDataArithmetic(data2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  156) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  157)     # Addition should not be possible
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  158)     with pytest.raises(UnitsError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  159)         nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  160)     # Subtraction should not be possible
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  161)     with pytest.raises(UnitsError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  162)         nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  163)     # Multiplication is possible
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  164)     nd3 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  165)     ref = data1 * data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  166)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  167)     assert_array_equal(ref_data, nd3.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  168)     assert nd3.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  169)     # Division is possible
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  170)     nd4 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  171)     ref = data1 / data2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  172)     ref_unit, ref_data = ref.unit, ref.value
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  173)     assert_array_equal(ref_data, nd4.data)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  174)     assert nd4.unit == ref_unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  175)     for nd in [nd3, nd4]:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  176)         # Check all other attributes are not set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  177)         assert nd.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  178)         assert nd.mask is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  179)         assert len(nd.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  180)         assert nd.wcs is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  181) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  182) 
01d98073c1 astropy/nddata/mixins/tests/test_ndarithmetic.py (Brigitta Sipőcz     2016-06-15 05:34:47 +0100  183) # Tests with wcs (not very sensible because there is no operation between them
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  184) # covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  185) # both set and identical/not identical
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  186) # one set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  187) # None set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  188) @pytest.mark.parametrize(('wcs1', 'wcs2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  189)     (None, None),
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  190)     (None, WCS(naxis=2)),
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  191)     (WCS(naxis=2), None),
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  192)     nd_testing.create_two_equal_wcs(naxis=2),
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  193)     nd_testing.create_two_unequal_wcs(naxis=2),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  194)     ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  195) def test_arithmetics_data_wcs(wcs1, wcs2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  196) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  197)     nd1 = NDDataArithmetic(1, wcs=wcs1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  198)     nd2 = NDDataArithmetic(1, wcs=wcs2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  199) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  200)     if wcs1 is None and wcs2 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  201)         ref_wcs = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  202)     elif wcs1 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  203)         ref_wcs = wcs2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  204)     elif wcs2 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  205)         ref_wcs = wcs1
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  206)     else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  207)         ref_wcs = wcs1
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  208) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  209)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  210)     nd3 = nd1.add(nd2)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  211)     nd_testing.assert_wcs_seem_equal(ref_wcs, nd3.wcs)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  212)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  213)     nd4 = nd1.subtract(nd2)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  214)     nd_testing.assert_wcs_seem_equal(ref_wcs, nd4.wcs)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  215)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  216)     nd5 = nd1.multiply(nd2)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  217)     nd_testing.assert_wcs_seem_equal(ref_wcs, nd5.wcs)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  218)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  219)     nd6 = nd1.divide(nd2)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200  220)     nd_testing.assert_wcs_seem_equal(ref_wcs, nd6.wcs)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  221)     for nd in [nd3, nd4, nd5, nd6]:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  222)         # Check all other attributes are not set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  223)         assert nd.unit is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  224)         assert nd.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  225)         assert len(nd.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  226)         assert nd.mask is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  227) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  228) 
01d98073c1 astropy/nddata/mixins/tests/test_ndarithmetic.py (Brigitta Sipőcz     2016-06-15 05:34:47 +0100  229) # Masks are completely separated in the NDArithmetics from the data so we need
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  230) # no correlated tests but covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  231) # masks 1D, 2D and mixed cases with broadcasting
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  232) @pytest.mark.parametrize(('mask1', 'mask2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  233)     (None, None),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  234)     (None, False),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  235)     (True, None),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  236)     (False, False),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  237)     (True, False),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  238)     (False, True),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  239)     (True, True),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  240)     (np.array(False), np.array(True)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  241)     (np.array(False), np.array([0, 1, 0, 1, 1], dtype=np.bool_)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  242)     (np.array(True),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  243)      np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  244)     (np.array([0, 1, 0, 1, 1], dtype=np.bool_),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  245)      np.array([1, 1, 0, 0, 1], dtype=np.bool_)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  246)     (np.array([0, 1, 0, 1, 1], dtype=np.bool_),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  247)      np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  248)     (np.array([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1]], dtype=np.bool_),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  249)      np.array([[0, 1, 0, 1, 1], [1, 1, 0, 1, 1]], dtype=np.bool_)),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  250)     ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  251) def test_arithmetics_data_masks(mask1, mask2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  252) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  253)     nd1 = NDDataArithmetic(1, mask=mask1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  254)     nd2 = NDDataArithmetic(1, mask=mask2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  255) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  256)     if mask1 is None and mask2 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  257)         ref_mask = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  258)     elif mask1 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  259)         ref_mask = mask2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  260)     elif mask2 is None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  261)         ref_mask = mask1
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  262)     else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  263)         ref_mask = mask1 | mask2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  264) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  265)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  266)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  267)     assert_array_equal(ref_mask, nd3.mask)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  268)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  269)     nd4 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  270)     assert_array_equal(ref_mask, nd4.mask)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  271)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  272)     nd5 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  273)     assert_array_equal(ref_mask, nd5.mask)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  274)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  275)     nd6 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  276)     assert_array_equal(ref_mask, nd6.mask)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  277)     for nd in [nd3, nd4, nd5, nd6]:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  278)         # Check all other attributes are not set
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  279)         assert nd.unit is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  280)         assert nd.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  281)         assert len(nd.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  282)         assert nd.wcs is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  283) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  284) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  285) # One additional case which can not be easily incorporated in the test above
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  286) # what happens if the masks are numpy ndarrays are not broadcastable
255778e2d6 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100  287) def test_arithmetics_data_masks_invalid():
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  288) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  289)     nd1 = NDDataArithmetic(1, mask=np.array([1, 0], dtype=np.bool_))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  290)     nd2 = NDDataArithmetic(1, mask=np.array([1, 0, 1], dtype=np.bool_))
2b9e8d479f astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-10-02 21:32:44 -0500  291) 
2b9e8d479f astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-10-02 21:32:44 -0500  292)     with pytest.raises(ValueError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  293)         nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  294)     with pytest.raises(ValueError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  295)         nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  296)     with pytest.raises(ValueError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  297)         nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  298)     with pytest.raises(ValueError):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  299)         nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  300) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  301) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  302) # Covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  303) # both have uncertainties (data and uncertainty without unit)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  304) # tested against manually determined resulting uncertainties to verify the
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  305) # implemented formulas
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  306) # this test only works as long as data1 and data2 do not contain any 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  307) def test_arithmetics_stddevuncertainty_basic():
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  308)     nd1 = NDDataArithmetic([1, 2, 3], uncertainty=StdDevUncertainty([1, 1, 3]))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  309)     nd2 = NDDataArithmetic([2, 2, 2], uncertainty=StdDevUncertainty([2, 2, 2]))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  310)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  311)     nd4 = nd2.add(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  312)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  313)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  314)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  315)     ref_uncertainty = np.sqrt(np.array([1, 1, 3])**2 + np.array([2, 2, 2])**2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  316)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  317) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  318)     nd3 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  319)     nd4 = nd2.subtract(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  320)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  321)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  322)     # Compare it to the theoretical uncertainty (same as for add)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  323)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  324) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  325)     # Multiplication and Division only work with almost equal array comparisons
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  326)     # since the formula implemented and the formula used as reference are
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  327)     # slightly different.
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  328)     nd3 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  329)     nd4 = nd2.multiply(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  330)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  331)     assert_array_almost_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  332)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  333)     ref_uncertainty = np.abs(np.array([2, 4, 6])) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  334)         (np.array([1, 1, 3]) / np.array([1, 2, 3]))**2 +
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  335)         (np.array([2, 2, 2]) / np.array([2, 2, 2]))**2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  336)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  337) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  338)     nd3 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  339)     nd4 = nd2.divide(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  340)     # Inverse operation gives a different uncertainty!
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  341)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  342)     ref_uncertainty_1 = np.abs(np.array([1/2, 2/2, 3/2])) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  343)         (np.array([1, 1, 3]) / np.array([1, 2, 3]))**2 +
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  344)         (np.array([2, 2, 2]) / np.array([2, 2, 2]))**2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  345)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty_1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  346)     ref_uncertainty_2 = np.abs(np.array([2, 1, 2/3])) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  347)         (np.array([1, 1, 3]) / np.array([1, 2, 3]))**2 +
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  348)         (np.array([2, 2, 2]) / np.array([2, 2, 2]))**2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  349)     assert_array_almost_equal(nd4.uncertainty.array, ref_uncertainty_2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  350) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  351) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  352) # Tests for correlation, covering
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  353) # correlation between -1 and 1 with correlation term being positive / negative
01d98073c1 astropy/nddata/mixins/tests/test_ndarithmetic.py (Brigitta Sipőcz     2016-06-15 05:34:47 +0100  354) # also with one data being once positive and once completely negative
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  355) # The point of this test is to compare the used formula to the theoretical one.
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  356) # TODO: Maybe covering units too but I think that should work because of
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  357) # the next tests. Also this may be reduced somehow.
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  358) @pytest.mark.parametrize(('cor', 'uncert1', 'data2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  359)     (-1, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  360)     (-0.5, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  361)     (-0.25, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  362)     (0, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  363)     (0.25, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  364)     (0.5, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  365)     (1, [1, 1, 3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  366)     (-1, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  367)     (-0.5, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  368)     (-0.25, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  369)     (0, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  370)     (0.25, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  371)     (0.5, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  372)     (1, [-1, -1, -3], [2, 2, 7]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  373)     (-1, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  374)     (-0.5, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  375)     (-0.25, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  376)     (0, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  377)     (0.25, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  378)     (0.5, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  379)     (1, [1, 1, 3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  380)     (-1, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  381)     (-0.5, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  382)     (-0.25, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  383)     (0, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  384)     (0.25, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  385)     (0.5, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  386)     (1, [-1, -1, -3], [-2, -3, -2]),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  387)     ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  388) def test_arithmetics_stddevuncertainty_basic_with_correlation(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  389)         cor, uncert1, data2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  390)     data1 = np.array([1, 2, 3])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  391)     data2 = np.array(data2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  392)     uncert1 = np.array(uncert1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  393)     uncert2 = np.array([2, 2, 2])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  394)     nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  395)     nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  396)     nd3 = nd1.add(nd2, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  397)     nd4 = nd2.add(nd1, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  398)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  399)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  400)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  401)     ref_uncertainty = np.sqrt(uncert1**2 + uncert2**2 +
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  402)                               2 * cor * np.abs(uncert1 * uncert2))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  403)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  404) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  405)     nd3 = nd1.subtract(nd2, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  406)     nd4 = nd2.subtract(nd1, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  407)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  408)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  409)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  410)     ref_uncertainty = np.sqrt(uncert1**2 + uncert2**2 -
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  411)                               2 * cor * np.abs(uncert1 * uncert2))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  412)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  413) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  414)     # Multiplication and Division only work with almost equal array comparisons
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  415)     # since the formula implemented and the formula used as reference are
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  416)     # slightly different.
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  417)     nd3 = nd1.multiply(nd2, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  418)     nd4 = nd2.multiply(nd1, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  419)     # Inverse operation should result in the same uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  420)     assert_array_almost_equal(nd3.uncertainty.array, nd4.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  421)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  422)     ref_uncertainty = (np.abs(data1 * data2)) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  423)         (uncert1 / data1)**2 + (uncert2 / data2)**2 +
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  424)         (2 * cor * np.abs(uncert1 * uncert2) / (data1 * data2)))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  425)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  426) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  427)     nd3 = nd1.divide(nd2, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  428)     nd4 = nd2.divide(nd1, uncertainty_correlation=cor)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  429)     # Inverse operation gives a different uncertainty!
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  430)     # Compare it to the theoretical uncertainty
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  431)     ref_uncertainty_1 = (np.abs(data1 / data2)) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  432)         (uncert1 / data1)**2 + (uncert2 / data2)**2 -
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  433)         (2 * cor * np.abs(uncert1 * uncert2) / (data1 * data2)))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  434)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty_1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  435)     ref_uncertainty_2 = (np.abs(data2 / data1)) * np.sqrt(
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  436)         (uncert1 / data1)**2 + (uncert2 / data2)**2 -
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  437)         (2 * cor * np.abs(uncert1 * uncert2) / (data1 * data2)))
e9ed0f4e4a astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:12:02 -0600  438)     assert_array_almost_equal(nd4.uncertainty.array, ref_uncertainty_2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  439) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  440) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  441) # Tests for correlation, covering
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  442) # correlation between -1 and 1 with correlation term being positive / negative
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  443) # also with one data being once positive and once completely negative
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  444) # The point of this test is to compare the used formula to the theoretical one.
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  445) # TODO: Maybe covering units too but I think that should work because of
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  446) # the next tests. Also this may be reduced somehow.
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  447) @pytest.mark.parametrize(('cor', 'uncert1', 'data2'), [
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  448)     (-1, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  449)     (-0.5, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  450)     (-0.25, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  451)     (0, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  452)     (0.25, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  453)     (0.5, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  454)     (1, [1, 1, 3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  455)     (-1, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  456)     (-0.5, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  457)     (-0.25, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  458)     (0, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  459)     (0.25, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  460)     (0.5, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  461)     (1, [-1, -1, -3], [2, 2, 7]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  462)     (-1, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  463)     (-0.5, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  464)     (-0.25, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  465)     (0, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  466)     (0.25, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  467)     (0.5, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  468)     (1, [1, 1, 3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  469)     (-1, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  470)     (-0.5, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  471)     (-0.25, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  472)     (0, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  473)     (0.25, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  474)     (0.5, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  475)     (1, [-1, -1, -3], [-2, -3, -2]),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  476)     ])
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  477) def test_arithmetics_varianceuncertainty_basic_with_correlation(
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  478)         cor, uncert1, data2):
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  479)     data1 = np.array([1, 2, 3])
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  480)     data2 = np.array(data2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  481)     uncert1 = np.array(uncert1)**2
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  482)     uncert2 = np.array([2, 2, 2])**2
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  483)     nd1 = NDDataArithmetic(data1, uncertainty=VarianceUncertainty(uncert1))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  484)     nd2 = NDDataArithmetic(data2, uncertainty=VarianceUncertainty(uncert2))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  485)     nd3 = nd1.add(nd2, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  486)     nd4 = nd2.add(nd1, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  487)     # Inverse operation should result in the same uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  488)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  489)     # Compare it to the theoretical uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  490)     ref_uncertainty = (uncert1 + uncert2 +
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  491)                        2 * cor * np.sqrt(uncert1 * uncert2))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  492)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  493) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  494)     nd3 = nd1.subtract(nd2, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  495)     nd4 = nd2.subtract(nd1, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  496)     # Inverse operation should result in the same uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  497)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  498)     # Compare it to the theoretical uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  499)     ref_uncertainty = (uncert1 + uncert2 -
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  500)                        2 * cor * np.sqrt(uncert1 * uncert2))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  501)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  502) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  503)     # Multiplication and Division only work with almost equal array comparisons
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  504)     # since the formula implemented and the formula used as reference are
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  505)     # slightly different.
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  506)     nd3 = nd1.multiply(nd2, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  507)     nd4 = nd2.multiply(nd1, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  508)     # Inverse operation should result in the same uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  509)     assert_array_almost_equal(nd3.uncertainty.array, nd4.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  510)     # Compare it to the theoretical uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  511)     ref_uncertainty = (data1 * data2)**2 * (
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  512)         uncert1 / data1**2 + uncert2 / data2**2 +
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  513)         (2 * cor * np.sqrt(uncert1 * uncert2) / (data1 * data2)))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  514)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  515) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  516)     nd3 = nd1.divide(nd2, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  517)     nd4 = nd2.divide(nd1, uncertainty_correlation=cor)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  518)     # Inverse operation gives a different uncertainty because of the
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  519)     # prefactor nd1/nd2 vs nd2/nd1. Howeveare, a large chunk is the same.
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  520)     ref_common = (
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  521)         uncert1 / data1**2 + uncert2 / data2**2 -
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  522)         (2 * cor * np.sqrt(uncert1 * uncert2) / (data1 * data2)))
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  523)     # Compare it to the theoretical uncertainty
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  524)     ref_uncertainty_1 = (data1 / data2)**2 * ref_common
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  525)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty_1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  526)     ref_uncertainty_2 = (data2 / data1)**2 * ref_common
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  527)     assert_array_almost_equal(nd4.uncertainty.array, ref_uncertainty_2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  528) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  529) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  530) # Tests for correlation, covering
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  531) # correlation between -1 and 1 with correlation term being positive / negative
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  532) # also with one data being once positive and once completely negative
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  533) # The point of this test is to compare the used formula to the theoretical one.
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  534) # TODO: Maybe covering units too but I think that should work because of
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  535) # the next tests. Also this may be reduced somehow.
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500  536) @pytest.mark.filterwarnings("ignore:divide by zero encountered.*")
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  537) @pytest.mark.parametrize(('cor', 'uncert1', 'data2'), [
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  538)     (-1, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  539)     (-0.5, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  540)     (-0.25, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  541)     (0, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  542)     (0.25, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  543)     (0.5, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  544)     (1, [1, 1, 3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  545)     (-1, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  546)     (-0.5, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  547)     (-0.25, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  548)     (0, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  549)     (0.25, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  550)     (0.5, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  551)     (1, [-1, -1, -3], [2, 2, 7]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  552)     (-1, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  553)     (-0.5, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  554)     (-0.25, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  555)     (0, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  556)     (0.25, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  557)     (0.5, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  558)     (1, [1, 1, 3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  559)     (-1, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  560)     (-0.5, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  561)     (-0.25, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  562)     (0, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  563)     (0.25, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  564)     (0.5, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  565)     (1, [-1, -1, -3], [-2, -3, -2]),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  566)     ])
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  567) def test_arithmetics_inversevarianceuncertainty_basic_with_correlation(
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  568)         cor, uncert1, data2):
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  569)     data1 = np.array([1, 2, 3])
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  570)     data2 = np.array(data2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  571)     uncert1 = 1 / np.array(uncert1)**2
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  572)     uncert2 = 1 / np.array([2, 2, 2])**2
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  573)     nd1 = NDDataArithmetic(data1, uncertainty=InverseVariance(uncert1))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  574)     nd2 = NDDataArithmetic(data2, uncertainty=InverseVariance(uncert2))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  575)     nd3 = nd1.add(nd2, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  576)     nd4 = nd2.add(nd1, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  577)     # Inverse operation should result in the same uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  578)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  579)     # Compare it to the theoretical uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  580)     ref_uncertainty = 1/ (1 / uncert1 + 1 / uncert2 +
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  581)                        2 * cor / np.sqrt(uncert1 * uncert2))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  582)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  583) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  584)     nd3 = nd1.subtract(nd2, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  585)     nd4 = nd2.subtract(nd1, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  586)     # Inverse operation should result in the same uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  587)     assert_array_equal(nd3.uncertainty.array, nd4.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  588)     # Compare it to the theoretical uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  589)     ref_uncertainty = 1 / (1 / uncert1 + 1 / uncert2 -
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  590)                        2 * cor / np.sqrt(uncert1 * uncert2))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  591)     assert_array_equal(nd3.uncertainty.array, ref_uncertainty)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  592) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  593)     # Multiplication and Division only work with almost equal array comparisons
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  594)     # since the formula implemented and the formula used as reference are
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  595)     # slightly different.
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  596)     nd3 = nd1.multiply(nd2, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  597)     nd4 = nd2.multiply(nd1, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  598)     # Inverse operation should result in the same uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  599)     assert_array_almost_equal(nd3.uncertainty.array, nd4.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  600)     # Compare it to the theoretical uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  601)     ref_uncertainty = 1 / ((data1 * data2)**2 * (
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  602)         1 / uncert1 / data1**2 + 1 / uncert2 / data2**2 +
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  603)         (2 * cor / np.sqrt(uncert1 * uncert2) / (data1 * data2))))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  604)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  605) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  606)     nd3 = nd1.divide(nd2, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  607)     nd4 = nd2.divide(nd1, uncertainty_correlation=cor)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  608)     # Inverse operation gives a different uncertainty because of the
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  609)     # prefactor nd1/nd2 vs nd2/nd1. Howeveare, a large chunk is the same.
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  610)     ref_common = (
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  611)         1 / uncert1 / data1**2 + 1 / uncert2 / data2**2 -
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  612)         (2 * cor / np.sqrt(uncert1 * uncert2) / (data1 * data2)))
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  613)     # Compare it to the theoretical uncertainty
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  614)     ref_uncertainty_1 = 1 / ((data1 / data2)**2 * ref_common)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  615)     assert_array_almost_equal(nd3.uncertainty.array, ref_uncertainty_1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  616)     ref_uncertainty_2 = 1 / ((data2 / data1)**2 * ref_common)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  617)     assert_array_almost_equal(nd4.uncertainty.array, ref_uncertainty_2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  618) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  619) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  620) # Covering:
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  621) # just an example that a np.ndarray works as correlation, no checks for
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  622) # the right result since these were basically done in the function above.
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  623) def test_arithmetics_stddevuncertainty_basic_with_correlation_array():
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  624)     data1 = np.array([1, 2, 3])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  625)     data2 = np.array([1, 1, 1])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  626)     uncert1 = np.array([1, 1, 1])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  627)     uncert2 = np.array([2, 2, 2])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  628)     cor = np.array([0, 0.25, 0])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  629)     nd1 = NDDataArithmetic(data1, uncertainty=StdDevUncertainty(uncert1))
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  630)     nd2 = NDDataArithmetic(data2, uncertainty=StdDevUncertainty(uncert2))
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  631)     nd1.add(nd2, uncertainty_correlation=cor)
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  632) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  633) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  634) # Covering:
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  635) # That propagate throws an exception when correlation is given but the
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  636) # uncertainty does not support correlation.
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  637) def test_arithmetics_with_correlation_unsupported():
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  638)     data1 = np.array([1, 2, 3])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  639)     data2 = np.array([1, 1, 1])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  640)     uncert1 = np.array([1, 1, 1])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  641)     uncert2 = np.array([2, 2, 2])
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  642)     cor = 3
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  643)     nd1 = NDDataArithmetic(data1,
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  644)                            uncertainty=StdDevUncertaintyUncorrelated(uncert1))
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  645)     nd2 = NDDataArithmetic(data2,
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  646)                            uncertainty=StdDevUncertaintyUncorrelated(uncert2))
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  647) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  648)     with pytest.raises(ValueError):
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  649)         nd1.add(nd2, uncertainty_correlation=cor)
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  650) 
6ff981b219 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  651) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  652) # Covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  653) # only one has an uncertainty (data and uncertainty without unit)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  654) # tested against the case where the other one has zero uncertainty. (this case
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  655) # must be correct because we tested it in the last case)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  656) # Also verify that if the result of the data has negative values the resulting
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  657) # uncertainty has no negative values.
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  658) def test_arithmetics_stddevuncertainty_one_missing():
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  659)     nd1 = NDDataArithmetic([1, -2, 3])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  660)     nd1_ref = NDDataArithmetic([1, -2, 3],
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  661)                                uncertainty=StdDevUncertainty([0, 0, 0]))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  662)     nd2 = NDDataArithmetic([2, 2, -2],
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  663)                            uncertainty=StdDevUncertainty([2, 2, 2]))
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  664) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  665)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  666)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  667)     nd3_ref = nd1_ref.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  668)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  669)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  670) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  671)     nd3 = nd2.add(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  672)     nd3_ref = nd2.add(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  673)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  674)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  675) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  676)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  677)     nd3 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  678)     nd3_ref = nd1_ref.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  679)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  680)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  681) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  682)     nd3 = nd2.subtract(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  683)     nd3_ref = nd2.subtract(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  684)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  685)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  686) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  687)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  688)     nd3 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  689)     nd3_ref = nd1_ref.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  690)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  691)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  692) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  693)     nd3 = nd2.multiply(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  694)     nd3_ref = nd2.multiply(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  695)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  696)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  697) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  698)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  699)     nd3 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  700)     nd3_ref = nd1_ref.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  701)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  702)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  703) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  704)     nd3 = nd2.divide(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  705)     nd3_ref = nd2.divide(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  706)     assert_array_equal(nd3.uncertainty.array, nd3_ref.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  707)     assert_array_equal(np.abs(nd3.uncertainty.array), nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  708) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  709) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  710) # Covering:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  711) # data with unit and uncertainty with unit (but equivalent units)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  712) # compared against correctly scaled NDDatas
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500  713) @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  714) @pytest.mark.parametrize(('uncert1', 'uncert2'), [
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  715)     (np.array([1, 2, 3]) * u.m, None),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  716)     (np.array([1, 2, 3]) * u.cm, None),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  717)     (None, np.array([1, 2, 3]) * u.m),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  718)     (None, np.array([1, 2, 3]) * u.cm),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  719)     (np.array([1, 2, 3]), np.array([2, 3, 4])),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  720)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  721)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  722)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  723)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  724)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  725)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  726)     (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  727)     ])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  728) def test_arithmetics_stddevuncertainty_with_units(uncert1, uncert2):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  729)     # Data has same units
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  730)     data1 = np.array([1, 2, 3]) * u.m
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  731)     data2 = np.array([-4, 7, 0]) * u.m
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  732)     if uncert1 is not None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  733)         uncert1 = StdDevUncertainty(uncert1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  734)         if isinstance(uncert1, Quantity):
a64f411d19 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2017-05-30 11:51:38 -0400  735)             uncert1_ref = uncert1.to_value(data1.unit)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  736)         else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  737)             uncert1_ref = uncert1
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  738)         uncert_ref1 = StdDevUncertainty(uncert1_ref, copy=True)
418f06cfd2 astropy/nddata/tests/test_nddata_arithmetic.py   (Matthew Craig       2014-08-18 21:23:05 -0500  739)     else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  740)         uncert1 = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  741)         uncert_ref1 = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  742) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  743)     if uncert2 is not None:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  744)         uncert2 = StdDevUncertainty(uncert2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  745)         if isinstance(uncert2, Quantity):
a64f411d19 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2017-05-30 11:51:38 -0400  746)             uncert2_ref = uncert2.to_value(data2.unit)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  747)         else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  748)             uncert2_ref = uncert2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  749)         uncert_ref2 = StdDevUncertainty(uncert2_ref, copy=True)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  750)     else:
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  751)         uncert2 = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  752)         uncert_ref2 = None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  753) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  754)     nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  755)     nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  756) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  757)     nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  758)     nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  759) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  760)     # Let's start the tests
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  761)     # Addition
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  762)     nd3 = nd1.add(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  763)     nd3_ref = nd1_ref.add(nd2_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  764)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  765)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  766)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  767) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  768)     nd3 = nd2.add(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  769)     nd3_ref = nd2_ref.add(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  770)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  771)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  772)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  773) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  774)     # Subtraction
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  775)     nd3 = nd1.subtract(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  776)     nd3_ref = nd1_ref.subtract(nd2_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  777)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  778)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  779)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  780) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  781)     nd3 = nd2.subtract(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  782)     nd3_ref = nd2_ref.subtract(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  783)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  784)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  785)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  786) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  787)     # Multiplication
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  788)     nd3 = nd1.multiply(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  789)     nd3_ref = nd1_ref.multiply(nd2_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  790)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  791)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  792)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  793) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  794)     nd3 = nd2.multiply(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  795)     nd3_ref = nd2_ref.multiply(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  796)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  797)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  798)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  799) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  800)     # Division
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  801)     nd3 = nd1.divide(nd2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  802)     nd3_ref = nd1_ref.divide(nd2_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  803)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  804)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  805)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  806) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  807)     nd3 = nd2.divide(nd1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  808)     nd3_ref = nd2_ref.divide(nd1_ref)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  809)     assert nd3.unit == nd3_ref.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  810)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  811)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  812) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  813) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  814) # Covering:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  815) # data with unit and uncertainty with unit (but equivalent units)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  816) # compared against correctly scaled NDDatas
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500  817) @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  818) @pytest.mark.parametrize(('uncert1', 'uncert2'), [
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  819)     (np.array([1, 2, 3]) * u.m, None),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  820)     (np.array([1, 2, 3]) * u.cm, None),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  821)     (None, np.array([1, 2, 3]) * u.m),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  822)     (None, np.array([1, 2, 3]) * u.cm),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  823)     (np.array([1, 2, 3]), np.array([2, 3, 4])),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  824)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  825)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  826)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  827)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  828)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  829)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  830)     (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  831)     ])
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  832) def test_arithmetics_varianceuncertainty_with_units(uncert1, uncert2):
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  833)     # Data has same units
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  834)     data1 = np.array([1, 2, 3]) * u.m
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  835)     data2 = np.array([-4, 7, 0]) * u.m
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  836)     if uncert1 is not None:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  837)         uncert1 = VarianceUncertainty(uncert1**2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  838)         if isinstance(uncert1, Quantity):
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  839)             uncert1_ref = uncert1.to_value(data1.unit**2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  840)         else:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  841)             uncert1_ref = uncert1
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  842)         uncert_ref1 = VarianceUncertainty(uncert1_ref, copy=True)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  843)     else:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  844)         uncert1 = None
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  845)         uncert_ref1 = None
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  846) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  847)     if uncert2 is not None:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  848)         uncert2 = VarianceUncertainty(uncert2**2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  849)         if isinstance(uncert2, Quantity):
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  850)             uncert2_ref = uncert2.to_value(data2.unit**2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  851)         else:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  852)             uncert2_ref = uncert2
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  853)         uncert_ref2 = VarianceUncertainty(uncert2_ref, copy=True)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  854)     else:
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  855)         uncert2 = None
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  856)         uncert_ref2 = None
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  857) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  858)     nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  859)     nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  860) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  861)     nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  862)     nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  863) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  864)     # Let's start the tests
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  865)     # Addition
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  866)     nd3 = nd1.add(nd2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  867)     nd3_ref = nd1_ref.add(nd2_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  868)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  869)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  870)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  871) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  872)     nd3 = nd2.add(nd1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  873)     nd3_ref = nd2_ref.add(nd1_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  874)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  875)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  876)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  877) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  878)     # Subtraction
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  879)     nd3 = nd1.subtract(nd2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  880)     nd3_ref = nd1_ref.subtract(nd2_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  881)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  882)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  883)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  884) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  885)     nd3 = nd2.subtract(nd1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  886)     nd3_ref = nd2_ref.subtract(nd1_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  887)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  888)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  889)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  890) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  891)     # Multiplication
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  892)     nd3 = nd1.multiply(nd2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  893)     nd3_ref = nd1_ref.multiply(nd2_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  894)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  895)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  896)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  897) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  898)     nd3 = nd2.multiply(nd1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  899)     nd3_ref = nd2_ref.multiply(nd1_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  900)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  901)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  902)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  903) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  904)     # Division
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  905)     nd3 = nd1.divide(nd2)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  906)     nd3_ref = nd1_ref.divide(nd2_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  907)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  908)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  909)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  910) 
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  911)     nd3 = nd2.divide(nd1)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  912)     nd3_ref = nd2_ref.divide(nd1_ref)
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  913)     assert nd3.unit == nd3_ref.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  914)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
1add626fe7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:38:53 -0600  915)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  916) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  917) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  918) # Covering:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  919) # data with unit and uncertainty with unit (but equivalent units)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  920) # compared against correctly scaled NDDatas
6fc6aa0e78 astropy/nddata/mixins/tests/test_ndarithmetic.py (Marten van Kerkwijk 2021-12-09 16:19:45 -0500  921) @pytest.mark.filterwarnings("ignore:.*encountered in.*divide.*")
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  922) @pytest.mark.parametrize(('uncert1', 'uncert2'), [
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  923)     (np.array([1, 2, 3]) * u.m, None),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  924)     (np.array([1, 2, 3]) * u.cm, None),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  925)     (None, np.array([1, 2, 3]) * u.m),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  926)     (None, np.array([1, 2, 3]) * u.cm),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  927)     (np.array([1, 2, 3]), np.array([2, 3, 4])),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  928)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  929)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.m,
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  930)     (np.array([1, 2, 3]) * u.m, np.array([2, 3, 4])) * u.m,
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  931)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])),
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  932)     (np.array([1, 2, 3]), np.array([2, 3, 4])) * u.cm,
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  933)     (np.array([1, 2, 3]) * u.cm, np.array([2, 3, 4])) * u.cm,
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  934)     (np.array([1, 2, 3]) * u.km, np.array([2, 3, 4])) * u.cm,
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  935)     ])
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  936) def test_arithmetics_inversevarianceuncertainty_with_units(uncert1, uncert2):
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  937)     # Data has same units
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  938)     data1 = np.array([1, 2, 3]) * u.m
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  939)     data2 = np.array([-4, 7, 0]) * u.m
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  940)     if uncert1 is not None:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  941)         uncert1 = InverseVariance(1 / uncert1**2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  942)         if isinstance(uncert1, Quantity):
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  943)             uncert1_ref = uncert1.to_value(1 / data1.unit**2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  944)         else:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  945)             uncert1_ref = uncert1
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  946)         uncert_ref1 = InverseVariance(uncert1_ref, copy=True)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  947)     else:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  948)         uncert1 = None
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  949)         uncert_ref1 = None
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  950) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  951)     if uncert2 is not None:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  952)         uncert2 = InverseVariance(1 / uncert2**2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  953)         if isinstance(uncert2, Quantity):
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  954)             uncert2_ref = uncert2.to_value(1 / data2.unit**2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  955)         else:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  956)             uncert2_ref = uncert2
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  957)         uncert_ref2 = InverseVariance(uncert2_ref, copy=True)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  958)     else:
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  959)         uncert2 = None
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  960)         uncert_ref2 = None
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  961) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  962)     nd1 = NDDataArithmetic(data1, uncertainty=uncert1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  963)     nd2 = NDDataArithmetic(data2, uncertainty=uncert2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  964) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  965)     nd1_ref = NDDataArithmetic(data1, uncertainty=uncert_ref1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  966)     nd2_ref = NDDataArithmetic(data2, uncertainty=uncert_ref2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  967) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  968)     # Let's start the tests
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  969)     # Addition
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  970)     nd3 = nd1.add(nd2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  971)     nd3_ref = nd1_ref.add(nd2_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  972)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  973)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  974)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  975) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  976)     nd3 = nd2.add(nd1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  977)     nd3_ref = nd2_ref.add(nd1_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  978)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  979)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  980)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  981) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  982)     # Subtraction
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  983)     nd3 = nd1.subtract(nd2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  984)     nd3_ref = nd1_ref.subtract(nd2_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  985)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  986)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  987)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  988) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  989)     nd3 = nd2.subtract(nd1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  990)     nd3_ref = nd2_ref.subtract(nd1_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  991)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  992)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  993)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  994) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  995)     # Multiplication
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  996)     nd3 = nd1.multiply(nd2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  997)     nd3_ref = nd1_ref.multiply(nd2_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  998)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600  999)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1000)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1001) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1002)     nd3 = nd2.multiply(nd1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1003)     nd3_ref = nd2_ref.multiply(nd1_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1004)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1005)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1006)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1007) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1008)     # Division
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1009)     nd3 = nd1.divide(nd2)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1010)     nd3_ref = nd1_ref.divide(nd2_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1011)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1012)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1013)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1014) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1015)     nd3 = nd2.divide(nd1)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1016)     nd3_ref = nd2_ref.divide(nd1_ref)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1017)     assert nd3.unit == nd3_ref.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1018)     assert nd3.uncertainty.unit == nd3_ref.uncertainty.unit
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1019)     assert_array_equal(nd3.uncertainty.array, nd3.uncertainty.array)
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1020) 
10c1701ff7 astropy/nddata/mixins/tests/test_ndarithmetic.py (Matthew Craig       2017-12-11 12:41:01 -0600 1021) 
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1022) # Test abbreviation and long name for taking the first found meta, mask, wcs
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1023) @pytest.mark.parametrize(('use_abbreviation'), ['ff', 'first_found'])
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1024) def test_arithmetics_handle_switches(use_abbreviation):
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1025)     meta1 = {'a': 1}
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1026)     meta2 = {'b': 2}
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1027)     mask1 = True
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1028)     mask2 = False
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1029)     uncertainty1 = StdDevUncertainty([1, 2, 3])
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1030)     uncertainty2 = StdDevUncertainty([1, 2, 3])
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1031)     wcs1, wcs2 = nd_testing.create_two_unequal_wcs(naxis=1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1032)     data1 = [1, 1, 1]
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1033)     data2 = [1, 1, 1]
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1034) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1035)     nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1, wcs=wcs1,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1036)                            uncertainty=uncertainty1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1037)     nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2, wcs=wcs2,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1038)                            uncertainty=uncertainty2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1039)     nd3 = NDDataArithmetic(data1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1040) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1041)     # Both have the attributes but option None is chosen
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1042)     nd_ = nd1.add(nd2, propagate_uncertainties=None, handle_meta=None,
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1043)                   handle_mask=None, compare_wcs=None)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1044)     assert nd_.wcs is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1045)     assert len(nd_.meta) == 0
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1046)     assert nd_.mask is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1047)     assert nd_.uncertainty is None
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1048) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1049)     # Only second has attributes and False is chosen
7096103496 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100 1050)     nd_ = nd3.add(nd2, propagate_uncertainties=False,
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1051)                   handle_meta=use_abbreviation, handle_mask=use_abbreviation,
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1052)                   compare_wcs=use_abbreviation)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1053)     nd_testing.assert_wcs_seem_equal(nd_.wcs, wcs2)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1054)     assert nd_.meta == meta2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1055)     assert nd_.mask == mask2
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1056)     assert_array_equal(nd_.uncertainty.array, uncertainty2.array)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1057) 
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1058)     # Only first has attributes and False is chosen
7096103496 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100 1059)     nd_ = nd1.add(nd3, propagate_uncertainties=False,
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1060)                   handle_meta=use_abbreviation, handle_mask=use_abbreviation,
d6c9926132 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 1061)                   compare_wcs=use_abbreviation)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1062)     nd_testing.assert_wcs_seem_equal(nd_.wcs, wcs1)
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1063)     assert nd_.meta == meta1
6d15a57b1f astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 1064)     assert nd_.mask == mask1
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1065)     assert_array_equal(nd_.uncertainty.array, uncertainty1.array)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1066) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1067) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1068) def test_arithmetics_meta_func():
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1069)     def meta_fun_func(meta1, meta2, take='first'):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1070)         if take == 'first':
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1071)             return meta1
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1072)         else:
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1073)             return meta2
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1074) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1075)     meta1 = {'a': 1}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1076)     meta2 = {'a': 3, 'b': 2}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1077)     mask1 = True
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1078)     mask2 = False
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1079)     uncertainty1 = StdDevUncertainty([1, 2, 3])
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1080)     uncertainty2 = StdDevUncertainty([1, 2, 3])
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1081)     data1 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1082)     data2 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1083) 
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1084)     nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1085)                            uncertainty=uncertainty1)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1086)     nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1087)                            uncertainty=uncertainty2)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1088) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1089)     nd3 = nd1.add(nd2, handle_meta=meta_fun_func)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1090)     assert nd3.meta['a'] == 1
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1091)     assert 'b' not in nd3.meta
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1092) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1093)     nd4 = nd1.add(nd2, handle_meta=meta_fun_func, meta_take='second')
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1094)     assert nd4.meta['a'] == 3
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1095)     assert nd4.meta['b'] == 2
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1096) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1097)     with pytest.raises(KeyError):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1098)         nd1.add(nd2, handle_meta=meta_fun_func, take='second')
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1099) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1100) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1101) def test_arithmetics_wcs_func():
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1102)     def wcs_comp_func(wcs1, wcs2, tolerance=0.1):
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1103)         if tolerance < 0.01:
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1104)             return False
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1105)         return True
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1106) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1107)     meta1 = {'a': 1}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1108)     meta2 = {'a': 3, 'b': 2}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1109)     mask1 = True
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1110)     mask2 = False
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1111)     uncertainty1 = StdDevUncertainty([1, 2, 3])
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1112)     uncertainty2 = StdDevUncertainty([1, 2, 3])
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1113)     wcs1, wcs2 = nd_testing.create_two_equal_wcs(naxis=1)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1114)     data1 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1115)     data2 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1116) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1117)     nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1, wcs=wcs1,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1118)                            uncertainty=uncertainty1)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1119)     nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2, wcs=wcs2,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1120)                            uncertainty=uncertainty2)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1121) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1122)     nd3 = nd1.add(nd2, compare_wcs=wcs_comp_func)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1123)     nd_testing.assert_wcs_seem_equal(nd3.wcs, wcs1)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1124) 
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1125)     # Fails because the function fails
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1126)     with pytest.raises(ValueError):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1127)         nd1.add(nd2, compare_wcs=wcs_comp_func, wcs_tolerance=0.00001)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1128) 
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1129)     # Fails because for a parameter to be passed correctly to the function it
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1130)     # needs the wcs_ prefix
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1131)     with pytest.raises(KeyError):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1132)         nd1.add(nd2, compare_wcs=wcs_comp_func, tolerance=1)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1133) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1134) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1135) def test_arithmetics_mask_func():
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1136)     def mask_sad_func(mask1, mask2, fun=0):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1137)         if fun > 0.5:
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1138)             return mask2
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1139)         else:
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1140)             return mask1
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1141) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1142)     meta1 = {'a': 1}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1143)     meta2 = {'a': 3, 'b': 2}
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1144)     mask1 = [True, False, True]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1145)     mask2 = [True, False, False]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1146)     uncertainty1 = StdDevUncertainty([1, 2, 3])
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1147)     uncertainty2 = StdDevUncertainty([1, 2, 3])
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1148)     data1 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1149)     data2 = [1, 1, 1]
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1150) 
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1151)     nd1 = NDDataArithmetic(data1, meta=meta1, mask=mask1,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1152)                            uncertainty=uncertainty1)
21e330439d astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2019-09-26 21:09:34 +0200 1153)     nd2 = NDDataArithmetic(data2, meta=meta2, mask=mask2,
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1154)                            uncertainty=uncertainty2)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1155) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1156)     nd3 = nd1.add(nd2, handle_mask=mask_sad_func)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1157)     assert_array_equal(nd3.mask, nd1.mask)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1158) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1159)     nd4 = nd1.add(nd2, handle_mask=mask_sad_func, mask_fun=1)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1160)     assert_array_equal(nd4.mask, nd2.mask)
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1161) 
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1162)     with pytest.raises(KeyError):
e24b2fb404 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 1163)         nd1.add(nd2, handle_mask=mask_sad_func, fun=1)
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1164) 
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1165) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1166) @pytest.mark.parametrize('meth', ['add', 'subtract', 'divide', 'multiply'])
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1167) def test_two_argument_useage(meth):
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1168)     ndd1 = NDDataArithmetic(np.ones((3, 3)))
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1169)     ndd2 = NDDataArithmetic(np.ones((3, 3)))
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1170) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1171)     # Call add on the class (not the instance) and compare it with already
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1172)     # tested useage:
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1173)     ndd3 = getattr(NDDataArithmetic, meth)(ndd1, ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1174)     ndd4 = getattr(ndd1, meth)(ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1175)     np.testing.assert_array_equal(ndd3.data, ndd4.data)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1176) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1177)     # And the same done on an unrelated instance...
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1178)     ndd3 = getattr(NDDataArithmetic(-100), meth)(ndd1, ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1179)     ndd4 = getattr(ndd1, meth)(ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1180)     np.testing.assert_array_equal(ndd3.data, ndd4.data)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1181) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1182) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1183) @pytest.mark.parametrize('meth', ['add', 'subtract', 'divide', 'multiply'])
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1184) def test_two_argument_useage_non_nddata_first_arg(meth):
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1185)     data1 = 50
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1186)     data2 = 100
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1187) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1188)     # Call add on the class (not the instance)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1189)     ndd3 = getattr(NDDataArithmetic, meth)(data1, data2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1190) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1191)     # Compare it with the instance-useage and two identical NDData-like
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1192)     # classes:
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1193)     ndd1 = NDDataArithmetic(data1)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1194)     ndd2 = NDDataArithmetic(data2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1195)     ndd4 = getattr(ndd1, meth)(ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1196)     np.testing.assert_array_equal(ndd3.data, ndd4.data)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1197) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1198)     # and check it's also working when called on an instance
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1199)     ndd3 = getattr(NDDataArithmetic(-100), meth)(data1, data2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1200)     ndd4 = getattr(ndd1, meth)(ndd2)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1201)     np.testing.assert_array_equal(ndd3.data, ndd4.data)
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1202) 
0cbe0410b0 astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 1203) 
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1204) def test_arithmetics_unknown_uncertainties():
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1205)     # Not giving any uncertainty class means it is saved as UnknownUncertainty
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1206)     ndd1 = NDDataArithmetic(np.ones((3, 3)),
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1207)                             uncertainty=UnknownUncertainty(np.ones((3, 3))))
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1208)     ndd2 = NDDataArithmetic(np.ones((3, 3)),
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1209)                             uncertainty=UnknownUncertainty(np.ones((3, 3))*2))
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1210)     # There is no way to propagate uncertainties:
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1211)     with pytest.raises(IncompatibleUncertaintiesException):
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1212)         ndd1.add(ndd2)
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1213)     # But it should be possible without propagation
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1214)     ndd3 = ndd1.add(ndd2, propagate_uncertainties=False)
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1215)     np.testing.assert_array_equal(ndd1.uncertainty.array,
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1216)                                   ndd3.uncertainty.array)
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1217) 
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1218)     ndd4 = ndd1.add(ndd2, propagate_uncertainties=None)
4aa24253da astropy/nddata/mixins/tests/test_ndarithmetic.py (Michael Seifert     2016-04-27 15:58:27 +0200 1219)     assert ndd4.uncertainty is None
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   2) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   3) 
796bed9983 (Thomas Robitaille 2017-01-13 16:39:34 +0000   4) import pytest
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   5) import numpy as np
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   6) from numpy.testing import assert_array_equal
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100   7) 
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000   8) from astropy.nddata import NDData, NDSlicingMixin
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500   9) from astropy.nddata import _testing as nd_testing
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  10) from astropy.nddata.nduncertainty import NDUncertainty, StdDevUncertainty
0c64572a2e (Thomas Robitaille 2018-11-30 14:02:06 +0000  11) from astropy import units as u
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  12) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  13) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  14) # Just add the Mixin to NDData
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  15) # TODO: Make this use NDDataRef instead!
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  16) class NDDataSliceable(NDSlicingMixin, NDData):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  17)     pass
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  18) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  19) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  20) # Just some uncertainty (following the StdDevUncertainty implementation of
01d98073c1 (Brigitta Sipőcz   2016-06-15 05:34:47 +0100  21) # storing the uncertainty in a property 'array') with slicing.
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  22) class SomeUncertainty(NDUncertainty):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  23) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  24)     @property
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  25)     def uncertainty_type(self):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  26)         return 'fake'
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  27) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  28)     def _propagate_add(self, data, final_data):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  29)         pass
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  30) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  31)     def _propagate_subtract(self, data, final_data):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  32)         pass
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  33) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  34)     def _propagate_multiply(self, data, final_data):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  35)         pass
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  36) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  37)     def _propagate_divide(self, data, final_data):
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  38)         pass
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  39) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  40) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  41) def test_slicing_only_data():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  42)     data = np.arange(10)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  43)     nd = NDDataSliceable(data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  44)     nd2 = nd[2:5]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  45)     assert_array_equal(data[2:5], nd2.data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  46) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  47) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  48) def test_slicing_data_scalar_fail():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  49)     data = np.array(10)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  50)     nd = NDDataSliceable(data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  51)     with pytest.raises(TypeError):  # as exc
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  52)         nd[:]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  53)     # assert exc.value.args[0] == 'Scalars cannot be sliced.'
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  54) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  55) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  56) def test_slicing_1ddata_ndslice():
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  57)     data = np.array([10, 20])
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  58)     nd = NDDataSliceable(data)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  59)     # Standard numpy warning here:
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  60)     with pytest.raises(IndexError):
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  61)         nd[:, :]
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  62) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  63) 
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  64) @pytest.mark.parametrize('prop_name', ['mask', 'uncertainty'])
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  65) def test_slicing_1dmask_ndslice(prop_name):
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  66)     # Data is 2d but mask/uncertainty only 1d so this should let the IndexError when
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  67)     # slicing the mask rise to the user.
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  68)     data = np.ones((3, 3))
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  69)     kwarg = {prop_name: np.ones(3)}
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  70)     nd = NDDataSliceable(data, **kwarg)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  71)     # Standard numpy warning here:
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  72)     with pytest.raises(IndexError):
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  73)         nd[:, :]
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  74) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  75) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  76) def test_slicing_all_npndarray_1d():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  77)     data = np.arange(10)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  78)     mask = data > 3
6969297ad8 (Patricio Rojo     2018-05-04 17:18:20 -0300  79)     uncertainty = StdDevUncertainty(np.linspace(10, 20, 10))
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  80)     naxis = 1
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  81)     wcs = nd_testing._create_wcs_simple(naxis=naxis, ctype=["deg"] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  82)                                         crpix=[3] * naxis, crval=[10] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500  83)                                         cdelt=[1] * naxis)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  84)     # Just to have them too
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  85)     unit = u.s
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  86)     meta = {'observer': 'Brian'}
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  87) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  88)     nd = NDDataSliceable(data, mask=mask, uncertainty=uncertainty, wcs=wcs,
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  89)                          unit=unit, meta=meta)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  90)     nd2 = nd[2:5]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  91)     assert_array_equal(data[2:5], nd2.data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  92)     assert_array_equal(mask[2:5], nd2.mask)
6969297ad8 (Patricio Rojo     2018-05-04 17:18:20 -0300  93)     assert_array_equal(uncertainty[2:5].array, nd2.uncertainty.array)
1ac17e71dd (Stuart Mumford    2019-10-22 18:31:37 +0100  94)     assert nd2.wcs.pixel_to_world(1) == nd.wcs.pixel_to_world(3)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  95)     assert unit is nd2.unit
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  96)     assert meta == nd.meta
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100  97) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  98) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200  99) def test_slicing_all_npndarray_nd():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 100)     # See what happens for multidimensional properties
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 101)     data = np.arange(1000).reshape(10, 10, 10)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 102)     mask = data > 3
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 103)     uncertainty = np.linspace(10, 20, 1000).reshape(10, 10, 10)
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 104)     naxis = 3
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 105)     wcs = nd_testing._create_wcs_simple(naxis=naxis, ctype=["deg"] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 106)                                         crpix=[3] * naxis, crval=[10] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 107)                                         cdelt=[1] * naxis)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 108) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 109)     nd = NDDataSliceable(data, mask=mask, uncertainty=uncertainty, wcs=wcs)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 110)     # Slice only 1D
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 111)     nd2 = nd[2:5]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 112)     assert_array_equal(data[2:5], nd2.data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 113)     assert_array_equal(mask[2:5], nd2.mask)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 114)     assert_array_equal(uncertainty[2:5], nd2.uncertainty.array)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 115)     # Slice 3D
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 116)     nd2 = nd[2:5, :, 4:7]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 117)     assert_array_equal(data[2:5, :, 4:7], nd2.data)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 118)     assert_array_equal(mask[2:5, :, 4:7], nd2.mask)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 119)     assert_array_equal(uncertainty[2:5, :, 4:7], nd2.uncertainty.array)
1ac17e71dd (Stuart Mumford    2019-10-22 18:31:37 +0100 120)     assert nd2.wcs.pixel_to_world(1, 5, 1) == nd.wcs.pixel_to_world(5, 5, 3)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 121) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 122) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 123) def test_slicing_all_npndarray_shape_diff():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 124)     data = np.arange(10)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 125)     mask = (data > 3)[0:9]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 126)     uncertainty = np.linspace(10, 20, 15)
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 127)     naxis = 1
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 128)     wcs = nd_testing._create_wcs_simple(naxis=naxis, ctype=["deg"] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 129)                                         crpix=[3] * naxis, crval=[10] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 130)                                         cdelt=[1] * naxis)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 131) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 132)     nd = NDDataSliceable(data, mask=mask, uncertainty=uncertainty, wcs=wcs)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 133)     nd2 = nd[2:5]
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 134)     assert_array_equal(data[2:5], nd2.data)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 135)     # All are sliced even if the shapes differ (no Info)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 136)     assert_array_equal(mask[2:5], nd2.mask)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 137)     assert_array_equal(uncertainty[2:5], nd2.uncertainty.array)
1ac17e71dd (Stuart Mumford    2019-10-22 18:31:37 +0100 138)     assert nd2.wcs.pixel_to_world(1) == nd.wcs.pixel_to_world(3)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 139) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 140) 
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 141) def test_slicing_all_something_wrong():
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 142)     data = np.arange(10)
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 143)     mask = [False] * 10
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 144)     uncertainty = {'rdnoise': 2.9, 'gain': 1.4}
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 145)     naxis = 1
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 146)     wcs = nd_testing._create_wcs_simple(naxis=naxis, ctype=["deg"] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 147)                                         crpix=[3] * naxis, crval=[10] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 148)                                         cdelt=[1] * naxis)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 149) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 150)     nd = NDDataSliceable(data, mask=mask, uncertainty=uncertainty, wcs=wcs)
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 151)     nd2 = nd[2:5]
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 152)     # Sliced properties:
8313712468 (Michael Seifert   2015-10-25 21:44:54 +0100 153)     assert_array_equal(data[2:5], nd2.data)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 154)     assert_array_equal(mask[2:5], nd2.mask)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 155)     # Not sliced attributes (they will raise a Info nevertheless)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 156)     uncertainty is nd2.uncertainty
1ac17e71dd (Stuart Mumford    2019-10-22 18:31:37 +0100 157)     assert nd2.wcs.pixel_to_world(1) == nd.wcs.pixel_to_world(3)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 158) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 159) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 160) def test_boolean_slicing():
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 161)     data = np.arange(10)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 162)     mask = data.copy()
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 163)     uncertainty = StdDevUncertainty(data.copy())
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 164)     naxis = 1
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 165)     wcs = nd_testing._create_wcs_simple(naxis=naxis, ctype=["deg"] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 166)                                         crpix=[3] * naxis, crval=[10] * naxis,
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 167)                                         cdelt=[1] * naxis)
6b4dd32570 (Matthew Craig     2019-10-15 22:35:00 -0500 168) 
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 169)     nd = NDDataSliceable(data, mask=mask, uncertainty=uncertainty, wcs=wcs)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 170) 
5827b172c0 (Stuart Mumford    2019-10-25 22:08:43 +0100 171)     with pytest.raises(ValueError):
16361f71d7 (Stuart Mumford    2019-10-25 12:44:28 +0100 172)         nd2 = nd[(nd.data >= 3) & (nd.data < 8)]
16361f71d7 (Stuart Mumford    2019-10-25 12:44:28 +0100 173) 
ae07ce14e8 (Stuart Mumford    2019-10-26 12:25:57 +0100 174)     nd.wcs = None
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 175)     nd2 = nd[(nd.data >= 3) & (nd.data < 8)]
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 176)     assert_array_equal(data[3:8], nd2.data)
0475bdec78 (Michael Seifert   2016-04-29 14:42:48 +0200 177)     assert_array_equal(mask[3:8], nd2.mask)
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   1) # Licensed under a 3-clause BSD style license - see LICENSE.rst
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   2) # This module implements the Arithmetic mixin to the NDData class.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   3) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   4) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   5) from copy import deepcopy
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   6) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   7) import numpy as np
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500   8) 
0c64572a2e astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000   9) from astropy.nddata.nduncertainty import NDUncertainty
0c64572a2e astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000  10) from astropy.units import dimensionless_unscaled
0c64572a2e astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2018-11-30 14:02:06 +0000  11) from astropy.utils import format_doc, sharedmethod
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  12) 
27e0cd96f6 astropy/nddata/arithmetic.py          (Matthew Craig       2014-12-21 23:31:08 -0600  13) __all__ = ['NDArithmeticMixin']
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500  14) 
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  15) # Global so it doesn't pollute the class dict unnecessarily:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  16) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  17) # Docstring templates for add, subtract, multiply, divide methods.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  18) _arit_doc = """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  19)     Performs {name} by evaluating ``self`` {op} ``operand``.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  20) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  21)     Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  22)     ----------
a15d824171 astropy/nddata/mixins/ndarithmetic.py (Nathaniel Starkman  2021-04-15 15:39:57 -0400  23)     operand, operand2 : `NDData`-like instance
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  24)         If ``operand2`` is ``None`` or not given it will perform the operation
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  25)         ``self`` {op} ``operand``.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  26)         If ``operand2`` is given it will perform ``operand`` {op} ``operand2``.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  27)         If the method was called on a class rather than on the instance
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  28)         ``operand2`` must be given.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  29) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  30)     propagate_uncertainties : `bool` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  31)         If ``None`` the result will have no uncertainty. If ``False`` the
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  32)         result will have a copied version of the first operand that has an
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  33)         uncertainty. If ``True`` the result will have a correctly propagated
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  34)         uncertainty from the uncertainties of the operands but this assumes
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  35)         that the uncertainties are `NDUncertainty`-like. Default is ``True``.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  36) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  37)         .. versionchanged:: 1.2
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  38)             This parameter must be given as keyword-parameter. Using it as
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  39)             positional parameter is deprecated.
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  40)             ``None`` was added as valid parameter value.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200  41) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  42)     handle_mask : callable, ``'first_found'`` or ``None``, optional
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  43)         If ``None`` the result will have no mask. If ``'first_found'`` the
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  44)         result will have a copied version of the first operand that has a
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  45)         mask). If it is a callable then the specified callable must
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100  46)         create the results ``mask`` and if necessary provide a copy.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100  47)         Default is `numpy.logical_or`.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  48) 
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  49)         .. versionadded:: 1.2
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  50) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  51)     handle_meta : callable, ``'first_found'`` or ``None``, optional
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  52)         If ``None`` the result will have no meta. If ``'first_found'`` the
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  53)         result will have a copied version of the first operand that has a
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  54)         (not empty) meta. If it is a callable then the specified callable must
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100  55)         create the results ``meta`` and if necessary provide a copy.
4bd5aa78e2 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-02-02 21:36:23 +0100  56)         Default is ``None``.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  57) 
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  58)         .. versionadded:: 1.2
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  59) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  60)     compare_wcs : callable, ``'first_found'`` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  61)         If ``None`` the result will have no wcs and no comparison between
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  62)         the wcs of the operands is made. If ``'first_found'`` the
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  63)         result will have a copied version of the first operand that has a
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  64)         wcs. If it is a callable then the specified callable must
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  65)         compare the ``wcs``. The resulting ``wcs`` will be like if ``False``
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100  66)         was given otherwise it raises a ``ValueError`` if the comparison was
4bd5aa78e2 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-02-02 21:36:23 +0100  67)         not successful. Default is ``'first_found'``.
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  68) 
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  69)         .. versionadded:: 1.2
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  70) 
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  71)     uncertainty_correlation : number or `~numpy.ndarray`, optional
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  72)         The correlation between the two operands is used for correct error
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  73)         propagation for correlated data as given in:
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  74)         https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  75)         Default is 0.
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100  76) 
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  77)         .. versionadded:: 1.2
ff8213c72d astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-14 05:38:44 +0200  78) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  79) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  80)     kwargs :
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  81)         Any other parameter that should be passed to the callables used.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  82) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  83)     Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  84)     -------
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  85)     result : `~astropy.nddata.NDData`-like
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  86)         The resulting dataset
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  87) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  88)     Notes
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  89)     -----
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100  90)     If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  91)     callable must accept the corresponding attributes as first two
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  92)     parameters. If the callable also needs additional parameters these can be
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  93)     defined as ``kwargs`` and must start with ``"wcs_"`` (for wcs callable) or
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  94)     ``"meta_"`` (for meta callable). This startstring is removed before the
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100  95)     callable is called.
d6c9926132 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200  96) 
d6c9926132 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200  97)     ``"first_found"`` can also be abbreviated with ``"ff"``.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  98)     """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100  99) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 100) 
928fe68418 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2017-09-22 00:08:49 +0200 101) class NDArithmeticMixin:
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 102)     """
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 103)     Mixin class to add arithmetic to an NDData object.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 104) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 105)     When subclassing, be sure to list the superclasses in the correct order
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 106)     so that the subclass sees NDData as the main superclass. See
bfbf5592b5 astropy/nddata/arithmetic.py          (Matthew Craig       2014-12-21 23:32:06 -0600 107)     `~astropy.nddata.NDDataArray` for an example.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 108) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 109)     Notes
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 110)     -----
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 111)     This class only aims at covering the most common cases so there are certain
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 112)     restrictions on the saved attributes::
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 113) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 114)         - ``uncertainty`` : has to be something that has a `NDUncertainty`-like
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 115)           interface for uncertainty propagation
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 116)         - ``mask`` : has to be something that can be used by a bitwise ``or``
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 117)           operation.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 118)         - ``wcs`` : has to implement a way of comparing with ``=`` to allow
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 119)           the operation.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 120) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 121)     But there is a workaround that allows to disable handling a specific
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 122)     attribute and to simply set the results attribute to ``None`` or to
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 123)     copy the existing attribute (and neglecting the other).
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 124)     For example for uncertainties not representing an `NDUncertainty`-like
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 125)     interface you can alter the ``propagate_uncertainties`` parameter in
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 126)     :meth:`NDArithmeticMixin.add`. ``None`` means that the result will have no
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 127)     uncertainty, ``False`` means it takes the uncertainty of the first operand
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 128)     (if this does not exist from the second operand) as the result's
4e26af9776 astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2018-10-21 18:00:38 +0100 129)     uncertainty. This behavior is also explained in the docstring for the
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 130)     different arithmetic operations.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 131) 
5c5194fd9f astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2017-09-30 16:39:01 +0100 132)     Decomposing the units is not attempted, mainly due to the internal mechanics
5c5194fd9f astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2017-09-30 16:39:01 +0100 133)     of `~astropy.units.Quantity`, so the resulting data might have units like
5c5194fd9f astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2017-09-30 16:39:01 +0100 134)     ``km/m`` if you divided for example 100km by 5m. So this Mixin has adopted
4e26af9776 astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2018-10-21 18:00:38 +0100 135)     this behavior.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 136) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 137)     Examples
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 138)     --------
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 139)     Using this Mixin with `~astropy.nddata.NDData`:
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 140) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 141)         >>> from astropy.nddata import NDData, NDArithmeticMixin
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 142)         >>> class NDDataWithMath(NDArithmeticMixin, NDData):
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 143)         ...     pass
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 144) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 145)     Using it with one operand on an instance::
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 146) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 147)         >>> ndd = NDDataWithMath(100)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 148)         >>> ndd.add(20)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 149)         NDDataWithMath(120)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 150) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 151)     Using it with two operand on an instance::
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 152) 
1a88a84ed4 astropy/nddata/mixins/ndarithmetic.py (Marten van Kerkwijk 2017-05-18 09:11:56 -0400 153)         >>> ndd = NDDataWithMath(-4)
1a88a84ed4 astropy/nddata/mixins/ndarithmetic.py (Marten van Kerkwijk 2017-05-18 09:11:56 -0400 154)         >>> ndd.divide(1, ndd)
1a88a84ed4 astropy/nddata/mixins/ndarithmetic.py (Marten van Kerkwijk 2017-05-18 09:11:56 -0400 155)         NDDataWithMath(-0.25)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 156) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 157)     Using it as classmethod requires two operands::
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 158) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 159)         >>> NDDataWithMath.subtract(5, 4)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 160)         NDDataWithMath(1)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 161) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 162)     """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 163) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 164)     def _arithmetic(self, operation, operand,
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 165)                     propagate_uncertainties=True, handle_mask=np.logical_or,
4bd5aa78e2 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-02-02 21:36:23 +0100 166)                     handle_meta=None, uncertainty_correlation=0,
8ae78ddef1 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:58:13 +0100 167)                     compare_wcs='first_found', **kwds):
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 168)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 169)         Base method which calculates the result of the arithmetic operation.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 170) 
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 171)         This method determines the result of the arithmetic operation on the
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 172)         ``data`` including their units and then forwards to other methods
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 173)         to calculate the other properties for the result (like uncertainty).
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 174) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 175)         Parameters
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 176)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 177)         operation : callable
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 178)             The operation that is performed on the `NDData`. Supported are
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 179)             `numpy.add`, `numpy.subtract`, `numpy.multiply` and
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 180)             `numpy.true_divide`.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 181) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 182)         operand : same type (class) as self
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 183)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 184) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 185)         propagate_uncertainties : `bool` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 186)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 187) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100 188)         handle_mask : callable, ``'first_found'`` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 189)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 190) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100 191)         handle_meta : callable, ``'first_found'`` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 192)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 193) 
7096103496 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-27 22:39:21 +0100 194)         compare_wcs : callable, ``'first_found'`` or ``None``, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 195)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 196) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 197)         uncertainty_correlation : ``Number`` or `~numpy.ndarray`, optional
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 198)             see :meth:`NDArithmeticMixin.add`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 199) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 200)         kwargs :
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 201)             Any other parameter that should be passed to the
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 202)             different :meth:`NDArithmeticMixin._arithmetic_mask` (or wcs, ...)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 203)             methods.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 204) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 205)         Returns
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 206)         -------
a15d824171 astropy/nddata/mixins/ndarithmetic.py (Nathaniel Starkman  2021-04-15 15:39:57 -0400 207)         result : ndarray or `~astropy.units.Quantity`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 208)             The resulting data as array (in case both operands were without
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 209)             unit) or as quantity if at least one had a unit.
7340bc22e1 astropy/nddata/mixins/ndarithmetic.py (Thomas Robitaille   2014-12-24 09:36:54 +0000 210) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 211)         kwargs : `dict`
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 212)             The kwargs should contain all the other attributes (besides data
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 213)             and unit) needed to create a new instance for the result. Creating
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 214)             the new instance is up to the calling method, for example
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 215)             :meth:`NDArithmeticMixin.add`.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 216) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 217)         """
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 218)         # Find the appropriate keywords for the appropriate method (not sure
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 219)         # if data and uncertainty are ever used ...)
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 220)         kwds2 = {'mask': {}, 'meta': {}, 'wcs': {},
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 221)                  'data': {}, 'uncertainty': {}}
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 222)         for i in kwds:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 223)             splitted = i.split('_', 1)
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 224)             try:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 225)                 kwds2[splitted[0]][splitted[1]] = kwds[i]
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 226)             except KeyError:
6f9d3aec60 astropy/nddata/mixins/ndarithmetic.py (ikkamens            2020-10-18 23:09:32 +0200 227)                 raise KeyError(f'Unknown prefix {splitted[0]} for parameter {i}')
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 228) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 229)         kwargs = {}
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 230) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 231)         # First check that the WCS allows the arithmetic operation
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 232)         if compare_wcs is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 233)             kwargs['wcs'] = None
d6c9926132 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 234)         elif compare_wcs in ['ff', 'first_found']:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 235)             if self.wcs is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 236)                 kwargs['wcs'] = deepcopy(operand.wcs)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 237)             else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 238)                 kwargs['wcs'] = deepcopy(self.wcs)
5eeb5b5d07 astropy/nddata/mixins/ndarithmetic.py (Anthony Horton      2016-01-19 18:05:05 +1100 239)         else:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 240)             kwargs['wcs'] = self._arithmetic_wcs(operation, operand,
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 241)                                                  compare_wcs, **kwds2['wcs'])
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 242) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 243)         # Then calculate the resulting data (which can but not needs to be a
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 244)         # quantity)
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 245)         result = self._arithmetic_data(operation, operand, **kwds2['data'])
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 246) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 247)         # Determine the other properties
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 248)         if propagate_uncertainties is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 249)             kwargs['uncertainty'] = None
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 250)         elif not propagate_uncertainties:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 251)             if self.uncertainty is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 252)                 kwargs['uncertainty'] = deepcopy(operand.uncertainty)
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 253)             else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 254)                 kwargs['uncertainty'] = deepcopy(self.uncertainty)
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 255)         else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 256)             kwargs['uncertainty'] = self._arithmetic_uncertainty(
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 257)                 operation, operand, result, uncertainty_correlation,
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 258)                 **kwds2['uncertainty'])
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 259) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 260)         if handle_mask is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 261)             kwargs['mask'] = None
d6c9926132 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 262)         elif handle_mask in ['ff', 'first_found']:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 263)             if self.mask is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 264)                 kwargs['mask'] = deepcopy(operand.mask)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 265)             else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 266)                 kwargs['mask'] = deepcopy(self.mask)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 267)         else:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 268)             kwargs['mask'] = self._arithmetic_mask(operation, operand,
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 269)                                                    handle_mask,
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 270)                                                    **kwds2['mask'])
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 271) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 272)         if handle_meta is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 273)             kwargs['meta'] = None
d6c9926132 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-04-19 05:16:18 +0200 274)         elif handle_meta in ['ff', 'first_found']:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 275)             if not self.meta:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 276)                 kwargs['meta'] = deepcopy(operand.meta)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 277)             else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 278)                 kwargs['meta'] = deepcopy(self.meta)
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 279)         else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 280)             kwargs['meta'] = self._arithmetic_meta(
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 281)                 operation, operand, handle_meta, **kwds2['meta'])
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 282) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 283)         # Wrap the individual results into a new instance of the same class.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 284)         return result, kwargs
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 285) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 286)     def _arithmetic_data(self, operation, operand, **kwds):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 287)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 288)         Calculate the resulting data
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 289) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 290)         Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 291)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 292)         operation : callable
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 293)             see `NDArithmeticMixin._arithmetic` parameter description.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 294) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 295)         operand : `NDData`-like instance
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 296)             The second operand wrapped in an instance of the same class as
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 297)             self.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 298) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 299)         kwds :
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 300)             Additional parameters.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 301) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 302)         Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 303)         -------
a15d824171 astropy/nddata/mixins/ndarithmetic.py (Nathaniel Starkman  2021-04-15 15:39:57 -0400 304)         result_data : ndarray or `~astropy.units.Quantity`
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 305)             If both operands had no unit the resulting data is a simple numpy
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 306)             array, but if any of the operands had a unit the return is a
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 307)             Quantity.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 308)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 309) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 310)         # Do the calculation with or without units
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 311)         if self.unit is None and operand.unit is None:
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 312)             result = operation(self.data, operand.data)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 313)         elif self.unit is None:
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 314)             result = operation(self.data << dimensionless_unscaled,
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 315)                                operand.data << operand.unit)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 316)         elif operand.unit is None:
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 317)             result = operation(self.data << self.unit,
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 318)                                operand.data << dimensionless_unscaled)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 319)         else:
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 320)             result = operation(self.data << self.unit,
6dda0394c5 astropy/nddata/mixins/ndarithmetic.py (Simon Conseil       2020-11-30 12:28:26 -0300 321)                                operand.data << operand.unit)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 322) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 323)         return result
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 324) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 325)     def _arithmetic_uncertainty(self, operation, operand, result, correlation,
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 326)                                 **kwds):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 327)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 328)         Calculate the resulting uncertainty.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 329) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 330)         Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 331)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 332)         operation : callable
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 333)             see :meth:`NDArithmeticMixin._arithmetic` parameter description.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 334) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 335)         operand : `NDData`-like instance
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 336)             The second operand wrapped in an instance of the same class as
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 337)             self.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 338) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 339)         result : `~astropy.units.Quantity` or `~numpy.ndarray`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 340)             The result of :meth:`NDArithmeticMixin._arithmetic_data`.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 341) 
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 342)         correlation : number or `~numpy.ndarray`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 343)             see :meth:`NDArithmeticMixin.add` parameter description.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 344) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 345)         kwds :
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 346)             Additional parameters.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 347) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 348)         Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 349)         -------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 350)         result_uncertainty : `NDUncertainty` subclass instance or None
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 351)             The resulting uncertainty already saved in the same `NDUncertainty`
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 352)             subclass that ``self`` had (or ``operand`` if self had no
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 353)             uncertainty). ``None`` only if both had no uncertainty.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 354)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 355) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 356)         # Make sure these uncertainties are NDUncertainties so this kind of
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 357)         # propagation is possible.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 358)         if (self.uncertainty is not None and
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 359)                 not isinstance(self.uncertainty, NDUncertainty)):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 360)             raise TypeError("Uncertainty propagation is only defined for "
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 361)                             "subclasses of NDUncertainty.")
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 362)         if (operand.uncertainty is not None and
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 363)                 not isinstance(operand.uncertainty, NDUncertainty)):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 364)             raise TypeError("Uncertainty propagation is only defined for "
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 365)                             "subclasses of NDUncertainty.")
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 366) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 367)         # Now do the uncertainty propagation
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 368)         # TODO: There is no enforced requirement that actually forbids the
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 369)         # uncertainty to have negative entries but with correlation the
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 370)         # sign of the uncertainty DOES matter.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 371)         if self.uncertainty is None and operand.uncertainty is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 372)             # Neither has uncertainties so the result should have none.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 373)             return None
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 374)         elif self.uncertainty is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 375)             # Create a temporary uncertainty to allow uncertainty propagation
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 376)             # to yield the correct results. (issue #4152)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 377)             self.uncertainty = operand.uncertainty.__class__(None)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 378)             result_uncert = self.uncertainty.propagate(operation, operand,
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 379)                                                        result, correlation)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 380)             # Delete the temporary uncertainty again.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 381)             self.uncertainty = None
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 382)             return result_uncert
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 383) 
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 384)         elif operand.uncertainty is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 385)             # As with self.uncertainty is None but the other way around.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 386)             operand.uncertainty = self.uncertainty.__class__(None)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 387)             result_uncert = self.uncertainty.propagate(operation, operand,
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 388)                                                        result, correlation)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 389)             operand.uncertainty = None
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 390)             return result_uncert
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 391) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 392)         else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 393)             # Both have uncertainties so just propagate.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 394)             return self.uncertainty.propagate(operation, operand, result,
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 395)                                               correlation)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 396) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 397)     def _arithmetic_mask(self, operation, operand, handle_mask, **kwds):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 398)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 399)         Calculate the resulting mask
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 400) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 401)         This is implemented as the piecewise ``or`` operation if both have a
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 402)         mask.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 403) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 404)         Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 405)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 406)         operation : callable
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 407)             see :meth:`NDArithmeticMixin._arithmetic` parameter description.
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 408)             By default, the ``operation`` will be ignored.
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 409) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 410)         operand : `NDData`-like instance
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 411)             The second operand wrapped in an instance of the same class as
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 412)             self.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 413) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 414)         handle_mask : callable
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 415)             see :meth:`NDArithmeticMixin.add`
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 416) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 417)         kwds :
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 418)             Additional parameters given to ``handle_mask``.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 419) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 420)         Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 421)         -------
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 422)         result_mask : any type
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 423)             If only one mask was present this mask is returned.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 424)             If neither had a mask ``None`` is returned. Otherwise
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 425)             ``handle_mask`` must create (and copy) the returned mask.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 426)         """
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 427) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 428)         # If only one mask is present we need not bother about any type checks
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 429)         if self.mask is None and operand.mask is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 430)             return None
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 431)         elif self.mask is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 432)             # Make a copy so there is no reference in the result.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 433)             return deepcopy(operand.mask)
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 434)         elif operand.mask is None:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 435)             return deepcopy(self.mask)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 436)         else:
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 437)             # Now lets calculate the resulting mask (operation enforces copy)
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 438)             return handle_mask(self.mask, operand.mask, **kwds)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 439) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 440)     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 441)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 442)         Calculate the resulting wcs.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 443) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 444)         There is actually no calculation involved but it is a good place to
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 445)         compare wcs information of both operands. This is currently not working
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 446)         properly with `~astropy.wcs.WCS` (which is the suggested class for
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 447)         storing as wcs property) but it will not break it neither.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 448) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 449)         Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 450)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 451)         operation : callable
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 452)             see :meth:`NDArithmeticMixin._arithmetic` parameter description.
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 453)             By default, the ``operation`` will be ignored.
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 454) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 455)         operand : `NDData` instance or subclass
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 456)             The second operand wrapped in an instance of the same class as
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 457)             self.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 458) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 459)         compare_wcs : callable
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 460)             see :meth:`NDArithmeticMixin.add` parameter description.
004380c161 astropy/nddata/mixins/ndarithmetic.py (E. Madison Bray     2015-07-07 12:59:39 -0400 461) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 462)         kwds :
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 463)             Additional parameters given to ``compare_wcs``.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 464) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 465)         Raises
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 466)         ------
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 467)         ValueError
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 468)             If ``compare_wcs`` returns ``False``.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 469) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 470)         Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 471)         -------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 472)         result_wcs : any type
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 473)             The ``wcs`` of the first operand is returned.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 474)         """
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 475) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 476)         # ok, not really arithmetics but we need to check which wcs makes sense
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 477)         # for the result and this is an ideal place to compare the two WCS,
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 478)         # too.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 479) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 480)         # I'll assume that the comparison returned None or False in case they
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 481)         # are not equal.
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 482)         if not compare_wcs(self.wcs, operand.wcs, **kwds):
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 483)             raise ValueError("WCS are not equal.")
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 484) 
3509ea6156 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2019-09-24 21:35:34 +0200 485)         return deepcopy(self.wcs)
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 486) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 487)     def _arithmetic_meta(self, operation, operand, handle_meta, **kwds):
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 488)         """
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 489)         Calculate the resulting meta.
004380c161 astropy/nddata/mixins/ndarithmetic.py (E. Madison Bray     2015-07-07 12:59:39 -0400 490) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 491)         Parameters
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 492)         ----------
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 493)         operation : callable
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 494)             see :meth:`NDArithmeticMixin._arithmetic` parameter description.
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 495)             By default, the ``operation`` will be ignored.
004380c161 astropy/nddata/mixins/ndarithmetic.py (E. Madison Bray     2015-07-07 12:59:39 -0400 496) 
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 497)         operand : `NDData`-like instance
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 498)             The second operand wrapped in an instance of the same class as
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 499)             self.
4298d92efc astropy/nddata/arithmetic.py          (Matthew Craig       2014-10-02 21:03:08 -0500 500) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 501)         handle_meta : callable
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 502)             see :meth:`NDArithmeticMixin.add`
004380c161 astropy/nddata/mixins/ndarithmetic.py (E. Madison Bray     2015-07-07 12:59:39 -0400 503) 
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 504)         kwds :
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 505)             Additional parameters given to ``handle_meta``.
255778e2d6 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-19 02:29:45 +0100 506) 
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 507)         Returns
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 508)         -------
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 509)         result_meta : any type
6ff981b219 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-22 14:42:51 +0100 510)             The result of ``handle_meta``.
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 511)         """
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 512)         # Just return what handle_meta does with both of the metas.
e24b2fb404 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-01-18 22:09:37 +0100 513)         return handle_meta(self.meta, operand.meta, **kwds)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 514) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 515)     @sharedmethod
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 516)     @format_doc(_arit_doc, name='addition', op='+')
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 517)     def add(self, operand, operand2=None, **kwargs):
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 518)         return self._prepare_then_do_arithmetic(np.add, operand, operand2,
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 519)                                                 **kwargs)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 520) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 521)     @sharedmethod
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 522)     @format_doc(_arit_doc, name='subtraction', op='-')
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 523)     def subtract(self, operand, operand2=None, **kwargs):
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 524)         return self._prepare_then_do_arithmetic(np.subtract, operand, operand2,
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 525)                                                 **kwargs)
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 526) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 527)     @sharedmethod
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 528)     @format_doc(_arit_doc, name="multiplication", op="*")
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 529)     def multiply(self, operand, operand2=None, **kwargs):
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 530)         return self._prepare_then_do_arithmetic(np.multiply, operand, operand2,
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 531)                                                 **kwargs)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 532) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 533)     @sharedmethod
6d15a57b1f astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2015-10-25 22:06:55 +0100 534)     @format_doc(_arit_doc, name="division", op="/")
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 535)     def divide(self, operand, operand2=None, **kwargs):
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 536)         return self._prepare_then_do_arithmetic(np.true_divide, operand,
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 537)                                                 operand2, **kwargs)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 538) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 539)     @sharedmethod
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 540)     def _prepare_then_do_arithmetic(self_or_cls, operation, operand, operand2,
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 541)                                     **kwargs):
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 542)         """Intermediate method called by public arithmetics (i.e. ``add``)
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 543)         before the processing method (``_arithmetic``) is invoked.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 544) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 545)         .. warning::
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 546)             Do not override this method in subclasses.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 547) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 548)         This method checks if it was called as instance or as class method and
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 549)         then wraps the operands and the result from ``_arithmetics`` in the
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 550)         appropriate subclass.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 551) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 552)         Parameters
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 553)         ----------
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 554)         self_or_cls : instance or class
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 555)             ``sharedmethod`` behaves like a normal method if called on the
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 556)             instance (then this parameter is ``self``) but like a classmethod
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 557)             when called on the class (then this parameter is ``cls``).
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 558) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 559)         operations : callable
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 560)             The operation (normally a numpy-ufunc) that represents the
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 561)             appropriate action.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 562) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 563)         operand, operand2, kwargs :
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 564)             See for example ``add``.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 565) 
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 566)         Result
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 567)         ------
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 568)         result : `~astropy.nddata.NDData`-like
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 569)             Depending how this method was called either ``self_or_cls``
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 570)             (called on class) or ``self_or_cls.__class__`` (called on instance)
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 571)             is the NDData-subclass that is used as wrapper for the result.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 572)         """
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 573)         # DO NOT OVERRIDE THIS METHOD IN SUBCLASSES.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 574) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 575)         if isinstance(self_or_cls, NDArithmeticMixin):
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 576)             # True means it was called on the instance, so self_or_cls is
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 577)             # a reference to self
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 578)             cls = self_or_cls.__class__
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 579) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 580)             if operand2 is None:
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 581)                 # Only one operand was given. Set operand2 to operand and
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 582)                 # operand to self so that we call the appropriate method of the
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 583)                 # operand.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 584)                 operand2 = operand
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 585)                 operand = self_or_cls
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 586)             else:
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 587)                 # Convert the first operand to the class of this method.
2b72431345 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-11 13:21:07 +0200 588)                 # This is important so that always the correct _arithmetics is
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 589)                 # called later that method.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 590)                 operand = cls(operand)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 591) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 592)         else:
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 593)             # It was used as classmethod so self_or_cls represents the cls
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 594)             cls = self_or_cls
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 595) 
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 596)             # It was called on the class so we expect two operands!
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 597)             if operand2 is None:
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 598)                 raise TypeError("operand2 must be given when the method isn't "
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 599)                                 "called on an instance.")
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 600) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 601)             # Convert to this class. See above comment why.
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 602)             operand = cls(operand)
0cbe0410b0 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-06 20:16:43 +0200 603) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 604)         # At this point operand, operand2, kwargs and cls are determined.
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 605) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 606)         # Let's try to convert operand2 to the class of operand to allows for
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 607)         # arithmetic operations with numbers, lists, numpy arrays, numpy masked
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 608)         # arrays, astropy quantities, masked quantities and of other subclasses
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 609)         # of NDData.
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 610)         operand2 = cls(operand2)
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 611) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 612)         # Now call the _arithmetics method to do the arithmetics.
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 613)         result, init_kwds = operand._arithmetic(operation, operand2, **kwargs)
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 614) 
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 615)         # Return a new class based on the result
6c787ab890 astropy/nddata/mixins/ndarithmetic.py (Michael Seifert     2016-05-07 01:37:32 +0200 616)         return cls(result, **init_kwds)
